[
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products are there in each category?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city had the highest number of orders shipped to it in the last quarter?",
        "output": "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT od.OrderID) AS HighDiscountOrders FROM [Order Details] od WHERE od.Discount > 0.20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the city with the highest number of orders shipped.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total discount given on orders per employee.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to orders for each product?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers exist in each country?",
        "output": "SELECT Country, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest number of orders?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the overall average inventory turnover for the current year?",
        "output": "SELECT AVG(turnover) AS YearlyInventoryTurnover FROM (SELECT SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS turnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM OrderDate) GROUP BY od.ProductID) AS turnovers;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(Freight) AS AverageFreight FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with stock levels below 10% of their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < 0.1 * ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee per month?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersCount, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales revenue from their products?",
        "output": "SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS HandledOrders FROM orders GROUP BY orders.EmployeeID ORDER BY HandledOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the average order value differ among different customer demographics?",
        "output": "SELECT customerDemographics.CustomerDesc, AVG(total_order_value) AS avg_order_value FROM ( SELECT customerDemographics.CustomerTypeID, customerDemographics.CustomerDesc, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS total_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerTypeID, customerDemographics.CustomerDesc ) AS subquery GROUP BY customerDemographics.CustomerDesc",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders per supplier per month?",
        "output": "SELECT p.SupplierID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.OrderID) AS TotalOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID, OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with a unit price lower than the average unit price of all products.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee manages the highest number of other employees?",
        "output": "SELECT employees.EmployeeID, COUNT(subordinate.EmployeeID) AS NumberOfSubordinates FROM employees LEFT JOIN employees AS subordinate ON employees.EmployeeID = subordinate.ReportsTo GROUP BY employees.EmployeeID ORDER BY NumberOfSubordinates DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees with the highest differences in sales by month.",
        "output": "SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS OrderYear, EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, OrderYear, OrderMonth ORDER BY EmployeeID, OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who report to a specific manager.",
        "output": "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS FullName FROM employees WHERE ReportsTo = ?;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) as ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are located in each city?",
        "output": "SELECT City, COUNT(*) AS NumberOfCustomers FROM customers GROUP BY City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the supplier with the most products on reorder.",
        "output": "SELECT SupplierID FROM products WHERE UnitsInStock < ReorderLevel GROUP BY SupplierID ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How do sales figures compare between different regions?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average employee sales in Q1 of 2023?",
        "output": "SELECT employees.EmployeeID, AVG(employee_sales) AS avg_employee_sales FROM (SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID) AS subquery;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have not placed an order in the last six months.",
        "output": "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are supplied by more than one supplier?",
        "output": "SELECT COUNT(*) as NumberOfProducts FROM (SELECT ProductID, COUNT(DISTINCT SupplierID) AS SupplierCount FROM products GROUP BY ProductID) AS subquery WHERE SupplierCount > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company's method results in the shortest delivery time?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many discontinued products are still in stock?",
        "output": "SELECT COUNT(products.ProductID) AS discontinued_in_stock FROM products WHERE products.Discontinued = 1 AND products.UnitsInStock > 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for the company in the last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer retention rate over the past year.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) THEN orders.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN orders.CustomerID END), 0)) * 100 AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate for the last year?",
        "output": "SELECT (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()) / (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) AS RetentionRate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top three categories in terms of product performance?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY product_performance DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer region has the highest on-time delivery rate?",
        "output": "SELECT ShipRegion, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount applied across all orders?",
        "output": "SELECT SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers based on the value of products supplied.",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalValue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products by category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend of average shipping costs over the past six months?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the distribution of product categories for each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.CategoryID) AS CategoryDistribution FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total revenue from discontinued products.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have placed more than five orders?",
        "output": "SELECT COUNT(*) FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID) AS OrderCounts WHERE OrderCount > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the product with the highest sales revenue.",
        "output": "SELECT ProductID, ProductName, SUM([Order Details].UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for shipped orders in the last year?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(ShippedDate) = YEAR(CURRENT_DATE) - 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the Total Freight cost for all shipped orders this year?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(ShippedDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total value of products on order for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitsOnOrder * UnitPrice) AS TotalValueOnOrder FROM products GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which month had the highest sales in quantity?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest total sales this year?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the shortest lead times?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is the most frequently used?",
        "output": "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of suppliers based in the USA?",
        "output": "SELECT COUNT(*) FROM suppliers WHERE Country = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order size (quantity) by employee?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Quantity) AS AvgOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the highest satisfaction rate based on on-time deliveries?",
        "output": "SELECT shippers.CompanyName, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS satisfaction_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY satisfaction_rate DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 products with the highest total sales value.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer?",
        "output": "SELECT orders.CustomerID, COUNT(*) AS TotalOrders FROM orders GROUP BY orders.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed orders in more than three different cities?",
        "output": "SELECT DISTINCT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.ShipCity) > 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Display the number of orders shipped after their required date.",
        "output": "SELECT COUNT(OrderID) AS NumberOfDelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average delivery time across different regions?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the average order value differ between employees?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find all customers who have never placed an order.",
        "output": "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products fall below their reorder level?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of products sold by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS product_count FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders had a discount applied?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscount FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many days on average did each category take to fulfill orders in May 2023?",
        "output": "SELECT categories.CategoryID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_days FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' AND orders.ShippedDate IS NOT NULL GROUP BY categories.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average units on order for each supplier?",
        "output": "SELECT SupplierID, AVG(UnitsOnOrder) FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value for each customer?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue for each month in 2023?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlyRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in the last month?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have met their sales targets for the past quarter?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) AND QUARTER(o.OrderDate) = QUARTER(CURDATE()) - 1 GROUP BY e.EmployeeID HAVING TotalSales > 10000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have less stock than their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated by each product, factoring in discounts.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * (1 - od.Discount) * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products fall in each discount bracket (0-10%, 11-20%, etc.)?",
        "output": "SELECT CASE WHEN Discount <= 0.1 THEN '0-10%' WHEN Discount <= 0.2 THEN '11-20%' ELSE '21%+' END AS DiscountBracket, COUNT(DISTINCT ProductID) FROM [Order Details] GROUP BY DiscountBracket;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top three suppliers based on product count provided.",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find out which products have the highest reorder level.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the top-selling product for each category?",
        "output": "SELECT CategoryID, ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID, ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the lowest unit price for products with units on order?",
        "output": "SELECT MIN(UnitPrice) FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average number of units on order per category.",
        "output": "SELECT CategoryID, AVG(UnitsOnOrder) FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the fastest average delivery time?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of sales by employee title?",
        "output": "SELECT e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders placed each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many suppliers are there in each country?",
        "output": "SELECT Country, COUNT(DISTINCT SupplierID) AS SupplierCount FROM suppliers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the most frequently ordered product.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a discount applied in their orders?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products with an average selling price higher than their listed unit price.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING AVG(od.UnitPrice * (1 - od.Discount)) > p.UnitPrice;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product with the lowest stock but not discontinued.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > 0 AND Discontinued = 0 ORDER BY UnitsInStock ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders include a discount greater than 20% and which employees processed them?",
        "output": "SELECT o.OrderID, e.EmployeeID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE od.Discount > 0.2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the most revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Revenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY Revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales volume in the last quarter?",
        "output": "SELECT ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30') GROUP BY ProductID ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee achieved the highest sales in the first quarter of 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE EXTRACT(QUARTER FROM orders.OrderDate) = 1 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the stock optimization efficiency by comparing units in stock and units on order.",
        "output": "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS StockOptimization FROM products;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales for each employee by month.",
        "output": "SELECT e.EmployeeID, MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the product with the highest sales quantity in the last month.",
        "output": "SELECT ProductID FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE) ORDER BY SUM(Quantity) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have ordered within the last month but not in the previous three months.",
        "output": "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE AND customers.CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN CURRENT_DATE - INTERVAL '4 months' AND CURRENT_DATE - INTERVAL '2 month');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of unique customers who have placed orders?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated by top three suppliers.",
        "output": "SELECT s.SupplierName, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierName ORDER BY Revenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which regions have suppliers with the shortest lead time?",
        "output": "SELECT suppliers.Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.Region ORDER BY AverageLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost per shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 customers by lifetime value.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have the highest lifetime value?",
        "output": "SELECT c.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders o ON [Order Details].OrderID = o.OrderID JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY c.CustomerID ORDER BY lifetime_value DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the difference in revenue from this month compared to the previous month?",
        "output": "SELECT (SUM(CASE WHEN MONTH(OrderDate) = MONTH(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS RevenueDifference FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE)",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the inventory turnover ratio vary across product categories?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the total shipping cost per each shipping company for August 2023.",
        "output": "SELECT shippers.CompanyName, SUM(orders.Freight) AS total_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31' GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest number of different employees living in it?",
        "output": "SELECT City, COUNT(DISTINCT EmployeeID) AS EmployeeCount FROM employees GROUP BY City ORDER BY EmployeeCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much revenue did each employee generate after discounts?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value in February 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= '2023-02-01' AND orders.OrderDate <= '2023-02-28';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the orders that were shipped after the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders have incurred the highest freight costs?",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the percentage of discontinued products in inventory.",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS PercentageDiscontinued FROM products WHERE Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total sales for each product category.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top-performing employees in terms of sales?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY total_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region has the lowest average shipping cost?",
        "output": "SELECT region.RegionDescription, AVG(orders.Freight) AS average_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription ORDER BY average_shipping_cost",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the impact of discounts on the average order value.",
        "output": "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValueWithDiscount, AVG(od.UnitPrice * od.Quantity) AS AverageOrderValueWithoutDiscount FROM [Order Details] od;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the supplier with the most products above reorder level?",
        "output": "SELECT SupplierID FROM products WHERE UnitsInStock > ReorderLevel GROUP BY SupplierID ORDER BY COUNT(ProductID) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Compute monthly sales growth rate for each product.",
        "output": "SELECT p.ProductID, MONTH(o.OrderDate) AS Month, (SUM(od.Quantity * od.UnitPrice) - LAG(SUM(od.Quantity * od.UnitPrice)) OVER (PARTITION BY p.ProductID ORDER BY MONTH(o.OrderDate))) / NULLIF(LAG(SUM(od.Quantity * od.UnitPrice)) OVER (PARTITION BY p.ProductID ORDER BY MONTH(o.OrderDate)), 0) AS GrowthRate FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, MONTH(o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after the required date last year?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest sales volume?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSalesVolume FROM [Order Details] GROUP BY ProductID ORDER BY TotalSalesVolume DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have never placed an order.",
        "output": "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT CustomerID FROM orders);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total quantity of each product currently on order.",
        "output": "SELECT ProductName, SUM(UnitsOnOrder) AS TotalOnOrder FROM products GROUP BY ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been placed so far this year?",
        "output": "SELECT COUNT(OrderID) AS OrdersThisYear FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE())",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the order with the shortest fulfillment time.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL AND OrderDate IS NOT NULL ORDER BY FulfillmentTime ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which day did each employee have the most orders placed?",
        "output": "SELECT EmployeeID, OrderDate AS Day, NumOrders FROM (SELECT employees.EmployeeID, orders.OrderDate, COUNT(orders.OrderID) AS NumOrders, ROW_NUMBER() OVER (PARTITION BY employees.EmployeeID ORDER BY COUNT(orders.OrderID) DESC, orders.OrderDate) AS rn FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, orders.OrderDate) AS ranked_orders WHERE rn = 1 ORDER BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest average shipping cost?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry ORDER BY AverageShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost per order?",
        "output": "SELECT OrderID, Freight AS TotalFreightCost FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total number of orders placed in each country.",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied per order?",
        "output": "SELECT AVG(SUM(Discount)) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY OrderMonth;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have never reported to a manager.",
        "output": "SELECT e.EmployeeID FROM employees e WHERE e.ReportsTo IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate from 2022 to 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2022-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the highest order volume?",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS order_volume FROM orders GROUP BY orders.ShipCity ORDER BY order_volume DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has provided the highest number of products currently in stock?",
        "output": "SELECT s.SupplierID, s.CompanyName, SUM(p.UnitsInStock) AS TotalStock FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalStock DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the distribution of discounts provided across different product categories?",
        "output": "SELECT c.CategoryID, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total sales for orders shipped late.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have placed more than 5 orders?",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have managed to reduce discount percentages over the years.",
        "output": "SELECT DISTINCT EmployeeID FROM (SELECT EmployeeID, Year, AvgDiscount, LAG(AvgDiscount, 1) OVER (PARTITION BY EmployeeID ORDER BY Year) AS PrevAvgDiscount FROM (SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate)) AS YearlyDiscounts) AS Discounts WHERE AvgDiscount < PrevAvgDiscount;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most common ship-to country for orders placed in 2023?",
        "output": "SELECT orders.ShipCountry, COUNT(orders.OrderID) AS num_orders FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY orders.ShipCountry ORDER BY num_orders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders per employee are shipped with each shipping method?",
        "output": "SELECT e.EmployeeID, o.ShipVia, COUNT(*) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order processing time by employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgProcessingTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time between order date and required date?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageTimeBetween FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of freight costs come from orders shipped to Europe?",
        "output": "SELECT SUM(Freight) * 100.0 / (SELECT SUM(Freight) FROM orders) AS EuropeFreightPercentage FROM orders WHERE ShipCountry IN ('France', 'Germany', 'UK', 'Italy', 'Spain');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of unique customers?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM customers;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discounts given for each product.",
        "output": "SELECT ProductName, SUM(Discount * Quantity * UnitPrice) as TotalDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders that were delivered late?",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the total sales per product category for the current year.",
        "output": "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What was the total sales revenue generated last year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order per month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders GROUP BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many different products have been sold in total?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS TotalUniqueProducts FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have the highest discount percentage?",
        "output": "SELECT ProductID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY ProductID ORDER BY MaxDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of total revenue by each shipping method?",
        "output": "SELECT ShipVia, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID) * 100 AS Percentage FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many unique customers placed orders handled by each employee?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the on-time delivery rate vary by region?",
        "output": "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(ShipRegion) * 100 AS OnTimeRate FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the highest overall sales?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products by sales quantity.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for shipments handled by each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of each product sold each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, ProductID, SUM(Quantity) AS TotalQuantitySold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', OrderDate), ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify orders where the discount applied was greater than 20%.",
        "output": "SELECT OrderID FROM [Order Details] WHERE Discount > 0.20;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped last year?",
        "output": "SELECT COUNT(OrderID) AS OrdersLastYear FROM orders WHERE YEAR(ShippedDate) = YEAR(CURDATE()) - 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees report to the same manager, and how many are they?",
        "output": "SELECT ReportsTo, COUNT(EmployeeID) AS NumberOfReports FROM employees WHERE ReportsTo IS NOT NULL GROUP BY ReportsTo;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the month with the highest sales for a particular product.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.ProductID = ? GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not reached their reorder level but are discontinued?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company handled the most orders in March 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE MONTH(orders.OrderDate) = 3 AND YEAR(orders.OrderDate) = 2023 GROUP BY shippers.CompanyName ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the largest number of units on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the supplier with the fastest average shipping time.",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS FastestShippingTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON orders.OrderID = (SELECT od.OrderID FROM [Order Details] od WHERE od.ProductID = products.ProductID LIMIT 1) GROUP BY suppliers.CompanyName ORDER BY FastestShippingTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales value?",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the shortest average lead time?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS ShortestLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY ShortestLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees have processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the suppliers whose average order lead time exceeds 20 days.",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.SupplierID HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > 20;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping postal code areas have the most irregular delivery times?",
        "output": "SELECT ShipPostalCode, STDDEV(DATEDIFF(ShippedDate, RequiredDate)) AS Irregularity FROM orders GROUP BY ShipPostalCode ORDER BY Irregularity DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month experienced the highest average shipping cost per order?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Year, Month ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the lowest sales performance?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) = (SELECT MIN(TotalSales) FROM (SELECT SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID) AS SubQuery);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders with a discount greater than 10%?",
        "output": "SELECT (COUNT(*) FILTER (WHERE Discount > 0.1) / COUNT(*)) * 100.0 AS PercentageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "For each supplier, list all products along with their sales quantity.",
        "output": "SELECT s.SupplierName, p.ProductName, SUM(od.Quantity) FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is most frequently used?",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the sales growth for each employee from 2020 to 2021.",
        "output": "SELECT e.EmployeeID, ((SUM(CASE WHEN YEAR(o.OrderDate) = 2021 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(o.OrderDate) = 2020 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(o.OrderDate) = 2020 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0)) * 100 AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend in Total Sales over the past year?",
        "output": "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY YEAR(OrderDate), MONTH(OrderDate) ORDER BY Year, Month",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly trend of the reorder level across all products?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(products.ReorderLevel) AS avg_reorder_level FROM products GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees who report to a specific manager and their sales totals.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.ReportsTo = 5 GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products that have the highest discount applied in orders.",
        "output": "SELECT products.ProductName, [Order Details].Discount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount = (SELECT MAX([Order Details].Discount) FROM [Order Details]) ORDER BY products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find orders where the shipping date is after the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Lifetime Value for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee shipped orders to the most diverse range of countries?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS UniqueCountries FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY UniqueCountries DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the best lead time in the third quarter of 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY products.SupplierID ORDER BY avg_lead_time LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How has the average discount rate on orders changed in the past year?",
        "output": "SELECT MONTH(o.OrderDate) AS order_month, AVG([Order Details].Discount) AS avg_discount_rate FROM orders o JOIN [Order Details] ON o.OrderID = [Order Details].OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY order_month",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products show a sales drop after a discount is applied?",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING SUM(CASE WHEN od.Discount > 0 THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN od.Discount = 0 THEN od.Quantity ELSE 0 END);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between the order date and the required date?",
        "output": "SELECT AVG(DATEDIFF(orders.RequiredDate, orders.OrderDate)) AS AvgDaysBetween FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the total sales revenue for each shipping country.",
        "output": "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which month had the highest employee sales performance?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS sales FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY month ORDER BY sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average lead time?",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product generates the highest profit margin?",
        "output": "SELECT p.ProductName, ((od.UnitPrice - p.UnitPrice) / od.UnitPrice) AS ProfitMargin FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY ProfitMargin DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the shipping method with the highest total freight cost.",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped to each country in the current year?",
        "output": "SELECT ShipCountry, COUNT(*) AS Orders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which category has the highest sales revenue?",
        "output": "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate for January 2023?",
        "output": "SELECT (COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'))::DECIMAL / NULLIF(COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate < '2023-01-01'), 0) FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most common shipping method used for orders?",
        "output": "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the trend of monthly total sales over the last two years?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate BETWEEN DATE_ADD(CURRENT_DATE, INTERVAL -2 YEAR) AND CURRENT_DATE GROUP BY Year, Month ORDER BY Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time per supplier in months?",
        "output": "SELECT suppliers.SupplierID, EXTRACT(YEAR_MONTH FROM orders.OrderDate) AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Evaluate which products have the highest impact on sales growth.",
        "output": "SELECT products.ProductName, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) - LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY products.ProductID ORDER BY YEAR(orders.OrderDate), MONTH(orders.OrderDate))) / LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY products.ProductID ORDER BY YEAR(orders.OrderDate), MONTH(orders.OrderDate)) AS sales_growth FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName, products.ProductID, YEAR(orders.OrderDate), MONTH(orders.OrderDate) ORDER BY sales_growth DESC LIMIT 10",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped via each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How long does it take on average to fulfill an order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were shipped late by each supplier?",
        "output": "SELECT p.SupplierID, COUNT(o.OrderID) AS LateOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate > o.RequiredDate GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly inventory turnover ratio?",
        "output": "SELECT EXTRACT(MONTH FROM order_date) AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products are ordered the most?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify seasonal trends in orders for products.",
        "output": "SELECT DATE_PART('month', o.OrderDate) AS Month, SUM(od.Quantity) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest number of units on order?",
        "output": "SELECT p.ProductID, p.ProductName, p.UnitsOnOrder FROM products p ORDER BY p.UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest sales revenue?",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice) AS HighestSalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY HighestSalesRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping delay time for late shipments?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgShippingDelayTime FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied to products in the order details?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What was the most frequently ordered product in 2023?",
        "output": "SELECT products.ProductName, COUNT([Order Details].ProductID) AS order_frequency FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY order_frequency DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have never supplied discontinued products?",
        "output": "SELECT SupplierID FROM suppliers WHERE SupplierID NOT IN (SELECT SupplierID FROM products WHERE Discontinued = 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the correlation between freight costs and order size?",
        "output": "SELECT CORR(FreightCost, OrderValue) AS Correlation FROM (SELECT o.OrderID, SUM(o.Freight) AS FreightCost, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS OrderStats;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have sales greater than a specific threshold?",
        "output": "SELECT COUNT(*) FROM (SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 5000) AS employee_sales_above_threshold;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the most units in stock?",
        "output": "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have a freight cost above $50?",
        "output": "SELECT COUNT(OrderID) AS OrdersAbove50 FROM orders WHERE Freight > 50;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on or before the required date?",
        "output": "SELECT COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 100.0 / COUNT(orders.OrderID) AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have not completed any orders in the last six months.",
        "output": "SELECT employees.EmployeeID, CONCAT(FirstName, ' ', LastName) AS FullName FROM employees WHERE employees.EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM orders WHERE OrderDate >= DATE_ADD(CURRENT_DATE, INTERVAL -6 MONTH));",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity ordered for each supplier last month?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(od.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with inventory levels below a specific threshold.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which orders have the highest discount applied?",
        "output": "SELECT OrderID FROM [Order Details] ORDER BY Discount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with no sales in the last month.",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID AND EXTRACT(YEAR_MONTH FROM NOW() - INTERVAL 1 MONTH) = EXTRACT(YEAR_MONTH FROM od.OrderDate) WHERE od.OrderID IS NULL AND p.Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees generated the most sales in Q2 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales generated in January 2023?",
        "output": "SELECT SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are running low against their reorder level as of today?",
        "output": "SELECT products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the correlation between unit price and quantity ordered.",
        "output": "SELECT CORR(od.UnitPrice, od.Quantity) AS Correlation FROM \"Order Details\" od;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has been ordered the most?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total discount amount given by each employee.",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most products that are currently out of stock?",
        "output": "SELECT s.CompanyName, COUNT(p.ProductID) AS OutOfStockProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0 GROUP BY s.CompanyName ORDER BY OutOfStockProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products that are below their reorder level.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders in the last six months?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE()",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top 5 products by sales revenue generated by employees.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY [Order Details].ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by quantity sold?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company provides the lowest average freight cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia ORDER BY AvgFreightCost ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the most common shipping method used for orders over $500?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderID IN (SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING SUM(UnitPrice * Quantity * (1 - Discount)) > 500) GROUP BY ShipVia ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total number of units ordered per supplier.",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on products across all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders are shipped via each shipping method?",
        "output": "SELECT ShipVia, (COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders)) AS Percentage FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that need to be reordered?",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have zero units on order and in stock?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for each supplier in 2023?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY total_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which months had the highest growth in average order value this year?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATE_PART('year', o.OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY Month ORDER BY AvgOrderValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the most significant number of high-value orders (over $1000)?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS HighValueOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 1000",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum delay encountered for any order?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, RequiredDate)) AS MaxDelay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the fastest average lead time?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find discontinued products that still have units in stock.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the monthly order count for each country?",
        "output": "SELECT orders.ShipCountry, EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCountry, OrderMonth",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average inventory turnover ratio per category.",
        "output": "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest units on order?",
        "output": "SELECT ProductID, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "For each supplier, what are the top three products by sales revenue?",
        "output": "SELECT p.SupplierID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID, p.ProductName ORDER BY Revenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the orders shipped more than 7 days after ordering.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingDelay FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers who have not placed any orders in the past year.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL OR o.OrderDate < CURRENT_DATE - INTERVAL '1 YEAR';",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the shortest lead time on average?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders each month?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products are still in stock?",
        "output": "SELECT COUNT(*) AS DiscontinuedInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the most employee-generated sales?",
        "output": "SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.City ORDER BY CitySales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products by total sales value?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest total discount applied?",
        "output": "SELECT products.ProductName, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for orders shipped to each country?",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products with the most significant differences between units in stock and reorder levels.",
        "output": "SELECT ProductName, (UnitsInStock - ReorderLevel) AS Difference FROM products ORDER BY ABS(Difference) DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total number of units on order for each supplier.",
        "output": "SELECT s.SupplierID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales amount for each employee?",
        "output": "SELECT EmployeeID, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS TotalSales FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average discount given on orders across all customers.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of orders that were shipped late?",
        "output": "SELECT ShipCity, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateOrders FROM orders GROUP BY ShipCity ORDER BY LateOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average number of orders processed per employee in a month?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) / COUNT(DISTINCT DATE_FORMAT(orders.OrderDate, '%Y-%m')) AS AverageMonthlyOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories have the highest total sales?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY total_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used the most in the past six months?",
        "output": "SELECT ShipVia, COUNT(OrderID) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY ShipVia ORDER BY COUNT(OrderID) DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the average discount applied to orders last quarter.",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1' QUARTER) AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many active suppliers are currently providing products?",
        "output": "SELECT COUNT(*) AS ActiveSuppliers FROM suppliers s WHERE EXISTS (SELECT 1 FROM products p WHERE s.SupplierID = p.SupplierID AND p.Discontinued = 0);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped using each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order value?",
        "output": "SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees are responsible for the orders that were shipped late last month?",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE MONTH(orders.ShippedDate) = MONTH(DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) AND YEAR(orders.ShippedDate) = YEAR(DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) AND orders.ShippedDate > orders.RequiredDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount applied per order for each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been consistently ordered every month?",
        "output": "SELECT p.ProductID, p.ProductName, COUNT(DISTINCT DATE_TRUNC('month', o.OrderDate)) AS MonthsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName HAVING MonthsOrdered = (SELECT COUNT(DISTINCT DATE_TRUNC('month', OrderDate)) FROM orders o);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price for products within each category?",
        "output": "SELECT p.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories have the highest sales?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY category_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the most expensive products on average?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY SupplierID ORDER BY AvgPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales quantity this year?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders in the last year?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate > DATEADD(year, -1, CURRENT_DATE) GROUP BY o.CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have sales in multiple regions?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipRegion) AS RegionsCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING RegionsCount > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products have been ordered?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are shipped to the USA?",
        "output": "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS PercentageToUSA FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the number of orders shipped to each region.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have higher units on order than units in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 customers by total spending?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpending FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalSpending DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are nearing their reorder level?",
        "output": "SELECT products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate across all shipments in Q1 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / CAST(COUNT(orders.OrderID) AS FLOAT) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) <= 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed on weekends?",
        "output": "SELECT COUNT(OrderID) AS WeekendOrders FROM orders WHERE DAYOFWEEK(OrderDate) IN (1, 7);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the average discount applied across all products.",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the highest sales in the first quarter of 2023?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the monthly sales for each product?",
        "output": "SELECT MONTH(o.OrderDate) AS SaleMonth, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY MONTH(o.OrderDate), p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the reorder level for the most ordered products.",
        "output": "SELECT p.ProductName, p.ReorderLevel FROM products p JOIN (SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID) od ON p.ProductID = od.ProductID ORDER BY TotalOrdered DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products were sold in each category in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS products_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have a hire date before 1995?",
        "output": "SELECT COUNT(*) FROM employees WHERE HireDate < '1995-01-01';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount applied for all orders of each product?",
        "output": "SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 employees who processed the most orders.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 products by total sales revenue.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductSales FROM [Order Details] GROUP BY ProductID ORDER BY ProductSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have a unit price greater than the average unit price?",
        "output": "SELECT COUNT(ProductID) AS Product_Count FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top-performing employees by sales in 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What percentage of products are currently discontinued?",
        "output": "SELECT (COUNT(ProductID) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the month with the highest total sales revenue.",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost for all orders?",
        "output": "SELECT AVG(Freight) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the sales performance of products grouped by supplier?",
        "output": "SELECT s.SupplierName, SUM(od.Quantity) AS SalesPerformance FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest discount applied?",
        "output": "SELECT od.ProductID, od.Discount FROM [Order Details] od WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Show the total sales for each employee by year.",
        "output": "SELECT YEAR(orders.OrderDate) AS OrderYear, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY YEAR(orders.OrderDate), employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders that have not been shipped yet.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products that are both discontinued and below the reorder level.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify suppliers who have products that are frequently reordered.",
        "output": "SELECT suppliers.SupplierID, suppliers.SupplierName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE UnitsInStock <= ReorderLevel GROUP BY suppliers.SupplierID, suppliers.SupplierName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 3 most ordered products?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalOrdered DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had the highest discounts applied?",
        "output": "SELECT orders.OrderID, SUM([Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the average order value change over the months?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were handled by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest total sales in the current year?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much sales did employees generate in each country?",
        "output": "SELECT e.EmployeeID, o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN \"[Order Details]\" od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders in the last year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the month with the highest number of orders last year.",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY MONTH(OrderDate) ORDER BY OrderCount DESC FETCH FIRST 1 ROW ONLY",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales value generated by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the greatest total sales value?",
        "output": "SELECT od.ProductID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesValue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSalesValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount provided on products sold?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How much discount was given in total last year?",
        "output": "SELECT SUM(UnitPrice * Quantity * Discount) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the difference in fulfillment time for on-time and late orders each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, AVG(CASE WHEN ShippedDate <= RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) AS OnTimeFulfillment, AVG(CASE WHEN ShippedDate > RequiredDate THEN DATEDIFF(ShippedDate, OrderDate) END) AS LateFulfillment FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all discontinued products with over 100 units in stock.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average quantity ordered per product.",
        "output": "SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names of all products that have been discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city receives the most orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average unit price of products sold.",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders have a discount greater than 10%?",
        "output": "SELECT COUNT(DISTINCT OrderID) * 100.0 / (SELECT COUNT(DISTINCT OrderID) FROM [Order Details]) AS DiscountOver10 FROM [Order Details] WHERE Discount > 0.10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average units in stock for each category?",
        "output": "SELECT CategoryID, AVG(UnitsInStock) AS AverageUnitsInStock FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest order volume?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY OrderVolume DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight cost for orders handled by each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) as TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by quantity?",
        "output": "SELECT ProductName FROM (SELECT P.ProductName, SUM(OD.Quantity) AS TotalQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName ORDER BY TotalQuantity DESC) AS TopProducts LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend of order volumes over the last five years?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, COUNT(*) AS OrderVolume FROM orders GROUP BY Year ORDER BY Year DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees whose average order size is the largest.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Quantity) AS AvgOrderSize FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgOrderSize DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total order quantity for each product in the last month?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been shipped late relative to the required date?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for each order?",
        "output": "SELECT OrderID, Freight FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total units sold and total discount given per supplier.",
        "output": "SELECT s.SupplierID, SUM(od.Quantity) AS TotalUnitsSold, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier has the most discontinued products?",
        "output": "SELECT SupplierID FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY COUNT(ProductID) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount percentage for each product?",
        "output": "SELECT p.ProductName, AVG(od.Discount) * 100 AS AverageDiscountPercentage FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed from each country this month?",
        "output": "SELECT customers.Country, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY customers.Country",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method has the lowest total freight cost?",
        "output": "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipVia ORDER BY TotalFreightCost ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have inventory levels below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders shipped by month?",
        "output": "SELECT DATE_FORMAT(o.ShippedDate, '%Y-%m') AS ShipMonth, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY ShipMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount provided across all orders in 2022?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2022",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 cities with the highest total sales.",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS city_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY city_sales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average discount applied per order.",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have placed orders in consecutive months?",
        "output": "SELECT DISTINCT o1.CustomerID FROM orders o1 JOIN orders o2 ON o1.CustomerID = o2.CustomerID AND EXTRACT(YEAR FROM o1.OrderDate) = EXTRACT(YEAR FROM o2.OrderDate) AND EXTRACT(MONTH FROM o1.OrderDate) = EXTRACT(MONTH FROM o2.OrderDate) - 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders has each employee processed this year?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which order had the longest delivery time?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS DeliveryTime FROM orders ORDER BY DeliveryTime DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 customers by total order value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalOrderValue DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the average number of orders handled per week by employees.",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, AVG(OrderCountPerWeek) AS AvgOrdersPerWeek FROM (SELECT employees.EmployeeID, COUNT(orders.OrderID)/4 AS OrderCountPerWeek FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, YEAR(orders.OrderDate), WEEK(orders.OrderDate)) AS WeeklyOrders GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions generate the most revenue from sales?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered, and how many units are necessary to reach the reorder level?",
        "output": "SELECT ProductID, ProductName, (ReorderLevel - UnitsInStock) AS UnitsToReorder FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products by revenue in the year 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY revenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many days on average does it take to fulfill an order?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShippedDate IS NOT NULL",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that are both in stock and on order.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock > 0 AND UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each product category this year?",
        "output": "SELECT c.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalCategorySales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the employees with the longest tenure, and how does that correlate with their sales performance?",
        "output": "SELECT e.EmployeeID, DATEDIFF(CURDATE(), e.HireDate) AS TenureDays, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TenureDays DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the relationship between employee hire date and sales performance?",
        "output": "SELECT e.EmployeeID, EXTRACT(YEAR FROM e.HireDate) AS HireYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM e.HireDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have not delivered any orders this month?",
        "output": "SELECT suppliers.CompanyName FROM suppliers WHERE NOT EXISTS (SELECT 1 FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE products.SupplierID = suppliers.SupplierID AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()))",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which territories are most productive in terms of sales?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY territory_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that are below their reorder level.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between order and shipping for each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgProcessTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total number of orders handled by each employee in the past year.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month has the highest number of orders?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with orders shipped after the required date.",
        "output": "SELECT o.CustomerID, o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Who is the employee with the most orders fulfilled?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the supplier with the longest average delivery time.",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.CompanyName ORDER BY AverageDeliveryTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between shipping cost and delivery time?",
        "output": "SELECT orders.OrderID, orders.Freight, DATEDIFF(orders.ShippedDate, orders.RequiredDate) AS delivery_time_diff FROM orders ORDER BY delivery_time_diff DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee who handled the most orders in the last month.",
        "output": "SELECT E.EmployeeID, COUNT(O.OrderID) AS OrderCount FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID WHERE O.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND O.OrderDate < CURDATE() GROUP BY E.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest average shipping cost?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee fulfilled the most orders?",
        "output": "SELECT orders.EmployeeID, COUNT(*) AS FulfilledOrders FROM orders WHERE orders.ShippedDate IS NOT NULL GROUP BY orders.EmployeeID ORDER BY FulfilledOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales volume in the last 12 months?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate > DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY products.ProductID, products.ProductName ORDER BY sales_volume DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed but not yet shipped?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the products that need to be reordered immediately based on their reorder levels?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipper method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY ShipVia ORDER BY NumberOfShipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average quantity ordered per product category in the last quarter?",
        "output": "SELECT CategoryID, AVG([Order Details].Quantity) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top 5 products frequently sold by employees.",
        "output": "SELECT od.ProductID, COUNT(od.OrderID) AS Frequency FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY od.ProductID ORDER BY Frequency DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the on-time delivery rate for each shipping company.",
        "output": "SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total shipping cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the lowest average cost per order?",
        "output": "SELECT ShipVia, AVG(Freight) FROM orders GROUP BY ShipVia ORDER BY AVG(Freight) ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of total sales is accounted for by the top 10% of customers?",
        "output": "SELECT ROUND(100.0 * SUM(t.CustomerRevenue) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID), 2) AS Top10PercentSales FROM ( SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID) t ORDER BY t.CustomerRevenue DESC LIMIT (SELECT ROUND(0.1 * COUNT(DISTINCT CustomerID)) FROM orders);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales quantity in 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value per customer for the year 2023?",
        "output": "SELECT AVG(order_value) AS avg_order_value FROM (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.CustomerID) AS order_values",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of distinct products ordered each month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM orders o JOIN \"Order Details\" od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount given by employees?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 products by total sales revenue.",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the sales growth rate for each employee compared to the previous year?",
        "output": "SELECT employees.EmployeeID, (SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END)) / NULLIF(SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 0) * 100 AS GrowthRate FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the highest number of orders in the current year.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many times was each product ordered?",
        "output": "SELECT od.ProductID, COUNT(od.ProductID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the lifetime value of each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the stock level correlate with the order quantity for each product?",
        "output": "SELECT ProductName, UnitsInStock - SUM(Quantity) AS StockToOrderDifference FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the month with the highest number of new customers.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS NewCustomers FROM orders WHERE OrderDate >= 'start_date' GROUP BY Month ORDER BY NewCustomers DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the percentage of orders shipped on time.",
        "output": "SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(*)) * 100.0 AS PercentageShippedOnTime FROM orders",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used the most in the last quarter?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with more than five orders.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly trend of inventory turnover ratio?",
        "output": "SELECT DATE_TRUNC('month', O.OrderDate) AS Month, SUM(OD.Quantity * OD.UnitPrice) / AVG(P.UnitsInStock) AS InventoryTurnover FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have been with the company for over 10 years.",
        "output": "SELECT employees.EmployeeID, TIMESTAMPDIFF(YEAR, employees.HireDate, CURDATE()) AS YearsWithCompany FROM employees WHERE TIMESTAMPDIFF(YEAR, employees.HireDate, CURDATE()) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Retention Rate for the last year?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN o.CustomerID END) * 1.0) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END), 0) AS RetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the sales performance of employees working in different regions?",
        "output": "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average price of products per category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average shipping time for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgShippingTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many orders were made for each product on which a discount was applied?",
        "output": "SELECT od.ProductID, COUNT(od.OrderID) FROM [Order Details] od WHERE od.Discount > 0 GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many distinct products were ordered by each customer?",
        "output": "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS NumberOfProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city had the highest number of orders processed by employees?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "In which months did the company achieve the highest total sales?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS monthly_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY monthly_sales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find out the total units in stock for each category.",
        "output": "SELECT p.CategoryID, SUM(p.UnitsInStock) AS TotalUnitsInStock FROM products p GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee had the highest average order value in Q1 2023?",
        "output": "SELECT employees.FirstName, employees.LastName, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage increase in orders compared to the previous year?",
        "output": "SELECT ((COUNT(*) - previous_year_count) * 100.0 / previous_year_count) AS PercentageIncrease FROM (SELECT COUNT(*) AS current_year_count FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE())) current_year, (SELECT COUNT(*) AS previous_year_count FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1) previous_year;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been placed by customers from each country?",
        "output": "SELECT c.Country, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost per order for each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which cities are served by more than 5 suppliers?",
        "output": "SELECT City, COUNT(DISTINCT SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY City HAVING COUNT(DISTINCT SupplierID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest lead time for deliveries?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products that have not been ordered in the last quarter.",
        "output": "SELECT p.ProductName FROM products p WHERE p.ProductID NOT IN (SELECT DISTINCT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are below their reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of customers made multiple orders in 2023?",
        "output": "SELECT (COUNT(DISTINCT orders.CustomerID) - COUNT(DISTINCT single_orders.CustomerID)) / COUNT(DISTINCT orders.CustomerID) * 100 AS returning_customer_percentage FROM orders LEFT JOIN (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) = 1) single_orders ON orders.CustomerID = single_orders.CustomerID WHERE YEAR(orders.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of each product are on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue from orders with a discount greater than 10%?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] WHERE [Order Details].Discount > 0.1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for February 2023?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE MONTH(orders.OrderDate) = 2 AND YEAR(orders.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend in total freight cost?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many unique customers have each employee served?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomers FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have processed orders with the highest average unit price?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice) AS AverageUnitPrice FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AverageUnitPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer generated the highest revenue in 2022?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product in Q2 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = 2 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find out which regions have the most suppliers.",
        "output": "SELECT Region, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY Region ORDER BY NumSuppliers DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier offers the highest priced product?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitPrice = (SELECT MAX(UnitPrice) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of orders placed for each product category last year?",
        "output": "SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY products.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given on all orders?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the correlation between supplier location and product price?",
        "output": "SELECT suppliers.Region, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the product with the highest sales revenue in the last month.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderDate BETWEEN DATEADD(MONTH, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY products.ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order size in terms of quantity?",
        "output": "SELECT AVG(od.Quantity) AS AverageOrderSize FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount amount applied to each product?",
        "output": "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which month in 2023 had the highest average order value?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month ORDER BY avg_order_value DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend in the quantity ordered over the months?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are running below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest aggregate sales?",
        "output": "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY CategoryID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How are the products performing based on sales in the last quarter?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(QUARTER FROM o.OrderDate) = EXTRACT(QUARTER FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales this month?",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify any employees who have not completed any orders this year.",
        "output": "SELECT e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND YEAR(o.OrderDate) = YEAR(CURDATE()) WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales in the last year?",
        "output": "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most popular shipping city over the last two years?",
        "output": "SELECT o.ShipCity, COUNT(*) AS ShipCount FROM orders o WHERE o.OrderDate >= DATEADD(YEAR, -2, CURRENT_DATE) GROUP BY o.ShipCity ORDER BY ShipCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of on-time deliveries for each month?",
        "output": "SELECT strftime('%Y-%m', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY strftime('%Y-%m', OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for the current month?",
        "output": "SELECT SUM(OD.Quantity * OD.UnitPrice) / AVG(P.UnitsInStock) AS InventoryTurnover FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE MONTH(CURRENT_DATE) = MONTH(OD.OrderDate) AND YEAR(CURRENT_DATE) = YEAR(OD.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with zero units in stock but pending orders.",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock = 0 AND p.UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average order fulfillment time vary across different regions?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY OrderMonth;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity ordered for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantityOrdered FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with an average lead time greater than two weeks.",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.SupplierID HAVING AvgLeadTime > 14;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the trend in total sales revenue over the last year?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS MonthlyRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY OrderMonth ORDER BY OrderMonth DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the highest total sales this year?",
        "output": "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed each month for the last year?",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY MONTH(OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of products are discontinued as of this date?",
        "output": "SELECT COUNT(products.ProductID) * 100.0 / (SELECT COUNT(ProductID) FROM products) AS discontinued_percentage FROM products WHERE products.Discontinued = TRUE;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by units sold?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories have been on order but not yet reached reorder level?",
        "output": "SELECT DISTINCT CategoryID FROM products WHERE UnitsOnOrder > 0 AND UnitsOnOrder < ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 products with the highest sales?",
        "output": "SELECT ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in each country?",
        "output": "SELECT Country, COUNT(OrderID) AS OrderCount FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the highest average order quantity.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Quantity) AS AvgQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY AvgQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with zero units on order but high units in stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND UnitsInStock > 50;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that need to be reordered based on current stock and reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for each product on a monthly basis.",
        "output": "SELECT p.ProductID, EXTRACT(MONTH FROM od.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, EXTRACT(MONTH FROM od.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 3 cities with the highest number of shipping delays.",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS DelayCount FROM orders o WHERE o.ShippedDate > o.RequiredDate GROUP BY o.ShipCity ORDER BY DelayCount DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the shortest average order processing time.",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgProcessingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID ORDER BY AvgProcessingTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales in December 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 12 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not completed any sales in the current year?",
        "output": "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND YEAR(orders.OrderDate) = YEAR(CURDATE()) WHERE orders.OrderID IS NULL",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total Customer Lifetime Value for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which region has the highest sales overall contributed by employees?",
        "output": "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products supplied per country?",
        "output": "SELECT suppliers.Country, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated by each employee in the first quarter of 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate between January 2022 and January 2023?",
        "output": "(SELECT COUNT(DISTINCT o1.CustomerID) FROM orders o1 WHERE o1.OrderDate BETWEEN '2022-01-01' AND '2023-01-01') / (SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2022-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products do we currently have?",
        "output": "SELECT COUNT(ProductID) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products with more units on order than in stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated from each product category?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the sales trend for each category over the past year?",
        "output": "SELECT c.CategoryName, MONTH(od.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE od.OrderDate >= DATEADD(year, -1, GETDATE()) GROUP BY c.CategoryName, MONTH(od.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customer with the longest average delivery time.",
        "output": "SELECT CustomerID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDeliveryTime FROM orders GROUP BY CustomerID ORDER BY AverageDeliveryTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the inventory turnover ratio for the last month.",
        "output": "SELECT (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE EXTRACT(MONTH FROM CURRENT_DATE) - 1 = EXTRACT(MONTH FROM [Order Details].OrderDate) AND EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM [Order Details].OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the overall customer retention rate for the past three months?",
        "output": "SELECT (COUNT(DISTINCT o1.CustomerID) - COUNT(DISTINCT o2.CustomerID)) / NULLIF(COUNT(DISTINCT o2.CustomerID), 0) AS RetentionRate FROM orders o1 LEFT JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE o1.OrderDate BETWEEN CURRENT_DATE - INTERVAL '3 months' AND CURRENT_DATE AND o2.OrderDate < CURRENT_DATE - INTERVAL '3 months';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the highest total revenue after discounts.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenueAfterDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenueAfterDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top three cities with the most customers.",
        "output": "SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping methods result in the quickest delivery times?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that are currently discontinued?",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time during the last year?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the lowest average shipping cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgCost FROM orders GROUP BY ShipVia ORDER BY AvgCost ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the most units on order.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers ship to the most diverse countries?",
        "output": "SELECT s.SupplierID, COUNT(DISTINCT o.ShipCountry) AS DiverseCountries FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY DiverseCountries DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products ordered from each supplier?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top three cities with the highest order shipment?",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS TotalOrders FROM orders GROUP BY orders.ShipCity ORDER BY TotalOrders DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have handled orders from more than one region.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING COUNT(DISTINCT o.ShipRegion) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average unit price of all products across categories.",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees and the corresponding regions they manage.",
        "output": "SELECT DISTINCT employees.EmployeeID, employees.Region FROM employees;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discount given on all products.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value in the second quarter of 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30';",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the breakdown of orders by shipping company?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which cities have the highest number of different customers?",
        "output": "SELECT c.City, COUNT(DISTINCT c.CustomerID) AS UniqueCustomerCount FROM customers c GROUP BY c.City ORDER BY UniqueCustomerCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the monthly customer retention rate?",
        "output": "SELECT COUNT(DISTINCT o1.CustomerID) * 100.0 / NULLIF((SELECT COUNT(DISTINCT o2.CustomerID) FROM orders o2 WHERE o2.OrderDate < '2023-01-01'), 0) AS RetentionRate FROM orders o1 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the earliest hire date among employees who generated top 10% sales?",
        "output": "SELECT MIN(HireDate) FROM employees WHERE EmployeeID IN (SELECT EmployeeID FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS Sales WHERE TotalSales >= (SELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TotalSales) FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS AllSales));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the month with the highest total sales.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify suppliers who provide more than 10 different discontinued products.",
        "output": "SELECT SupplierID FROM products WHERE Discontinued = 1 GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average unit price for products in each category.",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which products have the highest discount on average?",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AvgDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many products are ordered on average per order?",
        "output": "SELECT AVG(total_products) AS AvgProductsPerOrder FROM (SELECT SUM(od.Quantity) AS total_products FROM [Order Details] od GROUP BY od.OrderID) subquery;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders were delivered later than the required date?",
        "output": "SELECT o.OrderID, o.RequiredDate, o.ShippedDate FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for the past 6 months?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE()",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most discontinued products?",
        "output": "SELECT suppliers.CompanyName, COUNT(*) AS DiscontinuedProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY DiscontinuedProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of orders with more than 100 units?",
        "output": "SELECT AVG(UnitPrice) FROM [Order Details] WHERE Quantity > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the supplier with the best-selling product.",
        "output": "SELECT SupplierID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID, products.ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the inventory turnover ratio vary for each product?",
        "output": "SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice)/AVG(products.UnitsInStock)) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the order fulfillment time for each employee?",
        "output": "SELECT o.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o GROUP BY o.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average number of units per order for each product?",
        "output": "SELECT p.ProductName, AVG(od.Quantity) AS AvgQuantityPerOrder FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the shipping cost per order for each month in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue for each category?",
        "output": "SELECT CategoryID, SUM(products.UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average fulfillment time per order for the past six months?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_fulfillment_time FROM orders o WHERE o.OrderDate BETWEEN '2023-04-01' AND '2023-09-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For orders shipped late, what is the average delay in days?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelayDays FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Are there any trends in shipping cost over time?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with the highest sales volume in the last month.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE order_date > DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the order fulfillment time for each month in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY MONTH(orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 3 employees with the highest sales in July 2023.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for each product?",
        "output": "SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed on weekends?",
        "output": "SELECT COUNT(*) FROM orders WHERE DAYOFWEEK(OrderDate) IN (1, 7);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping method used by customers from Germany?",
        "output": "SELECT ShipVia, COUNT(ShipVia) AS UsageCount FROM orders WHERE ShipCountry = 'Germany' GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have more units on order than units in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that need to be reordered (units in stock are below reorder level).",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total number of units sold per supplier.",
        "output": "SELECT s.SupplierName, SUM(od.Quantity) AS TotalUnitsSold FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value per customer for the past quarter?",
        "output": "SELECT AVG(customer_sales.AverageOrderValue) AS AverageOrderValuePerCustomer FROM (SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY o.CustomerID) AS customer_sales;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer over time?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which country has the highest number of orders placed?",
        "output": "SELECT customers.Country, COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country ORDER BY total_orders DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers are responsible for the highest sales volume?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY supplier_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories had the highest inventory turnover ratio in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE EXISTS (SELECT 1 FROM orders WHERE [Order Details].OrderID = orders.OrderID AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') GROUP BY categories.CategoryName ORDER BY turnover_ratio DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied to orders in 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for all orders from each supplier?",
        "output": "SELECT p.SupplierID, SUM(o.Freight) AS TotalFreight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees are handling the most orders?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS HandledOrders FROM orders o GROUP BY o.EmployeeID ORDER BY HandledOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders had zero shipping cost each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(CASE WHEN Freight = 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS ZeroCostPercentage FROM orders GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products have a reorder level below their current stock?",
        "output": "SELECT COUNT(products.ProductID) AS product_count FROM products WHERE products.ReorderLevel < products.UnitsInStock",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value processed by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total freight charges for all shipped orders.",
        "output": "SELECT SUM(orders.Freight) AS TotalFreight FROM orders WHERE orders.ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders are shipped through each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS Percentage FROM orders GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product have been sold in the last year?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS UnitsSold FROM [Order Details] od WHERE od.OrderID IN (SELECT o.OrderID FROM orders o WHERE YEAR(o.OrderDate) = YEAR(GETDATE()) - 1) GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is most commonly used each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY Year, Month, ShipVia ORDER BY Year, Month, UsageCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country has the highest number of orders?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders included a discount each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(DISTINCT orders.OrderID) AS DiscountedOrders FROM \"Order Details\" JOIN orders ON \"Order Details\".OrderID = orders.OrderID WHERE \"Order Details\".Discount > 0 GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales volume in 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY total_quantity DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How quickly are orders generally shipped after being placed?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShipTime FROM orders WHERE orders.ShippedDate IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the month with the highest number of new customers.",
        "output": "SELECT MONTH(OrderDate) AS Month, COUNT(DISTINCT c.CustomerID) AS NewCustomers FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY MONTH(OrderDate) ORDER BY NewCustomers DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customer with the highest return rate.",
        "output": "SELECT CustomerID FROM (SELECT CustomerID, COUNT(OrderID) as NumberOfOrders FROM orders GROUP BY CustomerID) as OrderCounts WHERE NumberOfOrders = (SELECT MAX(NumberOfOrders) FROM (SELECT CustomerID, COUNT(OrderID) as NumberOfOrders FROM orders GROUP BY CustomerID) as OrderCounts);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the variance in shipping cost per order for the last quarter?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, VARIANCE(Freight) AS FreightVariance FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND OrderDate < CURDATE() GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have a shipping cost greater than $100?",
        "output": "SELECT COUNT(OrderID) AS HighCostOrders FROM orders WHERE Freight > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped per month?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS month, COUNT(*) AS orders_shipped FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_TRUNC('month', ShippedDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many discontinued products have remaining inventory?",
        "output": "SELECT COUNT(products.ProductID) AS discontinued_products_with_inventory FROM products WHERE products.Discontinued = 1 AND products.UnitsInStock > 0",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in August 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total revenue for products with no discount applied.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount = 0 GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were delivered on time in the last six months?",
        "output": "SELECT COUNT(o.OrderID) AS OnTimeOrders FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have not placed any orders in the past six months.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate > CURRENT_DATE - INTERVAL '6 months' WHERE o.OrderID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a stock level below the reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average units on order for products that are not discontinued.",
        "output": "SELECT AVG(UnitsOnOrder) FROM products WHERE Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have orders with the highest discount and what impact does that have on sales?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, od.Discount, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalDiscountSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY e.EmployeeID, e.FirstName, e.LastName, od.Discount ORDER BY od.Discount DESC, TotalDiscountSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are shipped internationally?",
        "output": "SELECT SUM(CASE WHEN ShipCountry <> 'YourCountry' THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS InternationalShippingRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer placed the most orders last year?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS TotalOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY customers.CustomerID ORDER BY TotalOrders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products have reached their reorder level?",
        "output": "SELECT COUNT(*) AS reorder_products FROM products WHERE UnitsInStock <= ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the sales trend per month for 2023 for each employee?",
        "output": "SELECT e.EmployeeID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the most common discount rate given on products?",
        "output": "SELECT od.Discount, COUNT(*) AS Frequency FROM [Order Details] od GROUP BY od.Discount ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest units in stock but is on order?",
        "output": "SELECT ProductID FROM products WHERE UnitsInStock > 0 AND UnitsOnOrder > 0 ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify orders shipped via the most common method.",
        "output": "SELECT ShipVia, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which day of the week has the highest number of orders placed?",
        "output": "SELECT DAYNAME(OrderDate) AS DayOfWeek, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY DAYNAME(OrderDate) ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products are there?",
        "output": "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have stock levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total number of products ordered per category.",
        "output": "SELECT CategoryID, SUM(Quantity) AS TotalOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity sold for each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value by month for the current year?",
        "output": "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY MONTH(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the distribution of products in terms of quantity per unit?",
        "output": "SELECT QuantityPerUnit, COUNT(*) AS ProductCount FROM products GROUP BY QuantityPerUnit ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on or before the required date each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the most sales in a particular region.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipRegion = 'YourRegion' GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products were sold in April 2023?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] OD JOIN orders O ON OD.OrderID = O.OrderID WHERE O.OrderDate BETWEEN '2023-04-01' AND '2023-04-30';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied on each product in order details?",
        "output": "SELECT ProductID, AVG(Discount) FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the products with the highest and lowest unit prices.",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 1 UNION ALL SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "In which month was the freight cost the highest?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY Month ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products had the highest quantity sold in March 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductID ORDER BY total_quantity_sold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order this year?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE)",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the order with the highest freight cost.",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier over the past month?",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total freight cost for each shipping company?",
        "output": "SELECT shippers.CompanyName, SUM(orders.Freight) AS total_freight_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products by sales revenue.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average inventory level for each product category.",
        "output": "SELECT categories.CategoryID, categories.CategoryName, AVG(UnitsInStock) AS AverageInventory FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID GROUP BY categories.CategoryID, categories.CategoryName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers made purchases in both January and February?",
        "output": "SELECT DISTINCT o1.CustomerID FROM orders o1 INNER JOIN orders o2 ON o1.CustomerID = o2.CustomerID WHERE MONTH(o1.OrderDate) = 1 AND MONTH(o2.OrderDate) = 2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the best on-time delivery rate?",
        "output": "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END)::float / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the longest time since their last order.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY MAX(o.OrderDate) IS NULL DESC, MAX(o.OrderDate) ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country has the highest average order value?",
        "output": "SELECT ShipCountry, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier monthly?",
        "output": "SELECT products.SupplierID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID INNER JOIN products ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID, OrderMonth",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer has the highest total order value?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalValue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products with the highest inventory turnover ratio.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnover DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the percentage of discontinued products supplied?",
        "output": "SELECT (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(*)::DECIMAL) * 100 AS PercentageDiscontinued FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products that are discontinued but still have stock remaining.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not been ordered?",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are currently discontinued?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has fulfilled the most orders this month?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS FulfilledOrders FROM orders o WHERE o.ShippedDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE GROUP BY o.EmployeeID ORDER BY FulfilledOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total revenue from orders with a unit price above 100.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS HighPriceRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.UnitPrice > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region has the highest number of sales in 2023?",
        "output": "SELECT region.RegionDescription, COUNT(orders.OrderID) AS sales_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY region.RegionDescription ORDER BY sales_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been placed by each customer?",
        "output": "SELECT orders.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders with a delivery lead time greater than 10 days.",
        "output": "SELECT o.OrderID FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify products with zero units on order.",
        "output": "SELECT products.ProductName FROM products WHERE products.UnitsOnOrder = 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month has the highest on-time delivery percentage?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END)::DECIMAL / COUNT(*)::DECIMAL) * 100 AS OnTimeDeliveryPercentage FROM orders GROUP BY OrderMonth ORDER BY OnTimeDeliveryPercentage DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of shipped orders?",
        "output": "SELECT ShipCity, COUNT(*) AS TotalShipped FROM orders GROUP BY ShipCity ORDER BY TotalShipped DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the top 5 products with the highest stock levels.",
        "output": "SELECT ProductName, UnitsInStock FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the reorder level for each product, and how many are below this level?",
        "output": "SELECT ProductID, ProductName, ReorderLevel, UnitsInStock FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average time span between the order date and shipped date?",
        "output": "SELECT AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders have been shipped late and how does it change monthly?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given on all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with zero inventory and no pending orders.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What percentage of products are provided by each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) * 100.0 / (SELECT COUNT(*) FROM products) AS ProductShare FROM products INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine which products have not been ordered in the past six months.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the product count per order for the highest order by revenue?",
        "output": "SELECT od.OrderID, COUNT(DISTINCT od.ProductID) AS ProductCount FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID GROUP BY od.OrderID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for the past year?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders WHERE orders.ShippedDate IS NOT NULL AND orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped after the required date?",
        "output": "SELECT COUNT(*) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated from each product?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied on all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many distinct categories are in the products table?",
        "output": "SELECT COUNT(DISTINCT CategoryID) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales for each employee for the current month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average inventory level for each product category?",
        "output": "SELECT CategoryID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average supplier lead time for each supplier over the last month?",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping methods are used most frequently?",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS UsageCount FROM orders o GROUP BY o.ShipVia ORDER BY UsageCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the variance in order values each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, VAR_POP(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS OrderValueVariance FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 5 suppliers by average lead time.",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = (SELECT ProductID FROM [Order Details] WHERE orders.OrderID = [Order Details].OrderID) GROUP BY suppliers.SupplierID ORDER BY AverageLeadTime ASC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the customer retention rate for January 2023.",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount rate given on orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top three cities with the highest number of orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have a birthday this month.",
        "output": "SELECT EmployeeID, FirstName, LastName FROM employees WHERE MONTH(BirthDate) = MONTH(CURRENT_DATE) AND YEAR(BirthDate) != YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the difference between units in stock and reorder level for each product.",
        "output": "SELECT ProductID, ProductName, (UnitsInStock - ReorderLevel) AS StockDifference FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales by each product category in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest number of orders placed in 2022?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the product with the highest sales revenue to date.",
        "output": "SELECT TOP 1 products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for orders with freight costs above the monthly average?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the relationship between shipping cost and delivery speed?",
        "output": "SELECT AVG(Freight), AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products on order for each supplier?",
        "output": "SELECT suppliers.SupplierID, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost for each shipping country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS total_freight_cost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have the title 'Owner'?",
        "output": "SELECT COUNT(*) FROM customers WHERE ContactTitle = 'Owner';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify orders that have not been shipped within 30 days of the order date.",
        "output": "SELECT OrderID FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 30 AND ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time difference between order date and required date?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AvgOrderToRequiredDiff FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are out of stock for each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS OutOfStockCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average discount applied across all orders.",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many on-time deliveries were recorded in the first quarter of 2023?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_deliveries FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most commonly ordered product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order amount for each customer?",
        "output": "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderAmount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from each customer over time?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most common customer region by sales value in 2023?",
        "output": "SELECT customers.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.Region ORDER BY total_sales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the top 3 regions with the highest sales.",
        "output": "SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region ORDER BY TotalSales DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of items per order?",
        "output": "SELECT AVG(total_items) AS AverageItemsPerOrder FROM (SELECT SUM(od.Quantity) AS total_items FROM [Order Details] od GROUP BY od.OrderID) subquery;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For orders with a shipping cost higher than the average, what is the average fulfillment time?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have placed orders with a total freight value higher than $500 this year?",
        "output": "SELECT CustomerID FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY CustomerID HAVING SUM(Freight) > 500;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 products generating the highest revenue?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY Total_Revenue DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have handled orders with a shipping cost greater than a specified amount?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.Freight > ? GROUP BY e.EmployeeID, e.FirstName, e.LastName",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the most sales revenue in March 2023?",
        "output": "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers have more than three products discontinued?",
        "output": "SELECT SupplierID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY SupplierID HAVING COUNT(*) > 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers whose average delivery time is less than 5 days.",
        "output": "SELECT suppliers.SupplierID, CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) < 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the total units sold by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalUnitsSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have never been reordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee processed the most number of units in their orders?",
        "output": "SELECT E.EmployeeID, SUM(OD.Quantity) AS TotalUnits FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID ORDER BY TotalUnits DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handled the most orders last month?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders WHERE TO_CHAR(OrderDate, 'YYYY-MM') = TO_CHAR(CURRENT_DATE - INTERVAL '1 month', 'YYYY-MM') GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the order fulfillment time for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is most frequently used?",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has placed the most orders in 2023?",
        "output": "SELECT customers.City, COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.City ORDER BY total_orders DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have a reorder level that has been reached?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of products supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS TotalProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales by country?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the most ordered combinations of products?",
        "output": "SELECT od1.ProductID, od2.ProductID, COUNT(*) AS Count FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY Count DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most products discontinued?",
        "output": "SELECT products.SupplierID, COUNT(*) AS DiscontinuedCount FROM products WHERE products.Discontinued = 1 GROUP BY products.SupplierID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed but not yet shipped?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the relationship between freight cost and total order value?",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue, o.Freight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING o.Freight > (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) * 0.1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 3 products in terms of quantity sold.",
        "output": "SELECT ProductID, SUM(Quantity) AS QuantitySold FROM [Order Details] GROUP BY ProductID ORDER BY QuantitySold DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been sold at a discount?",
        "output": "SELECT DISTINCT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS PercentageOfOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders per shipping method?",
        "output": "SELECT orders.ShipVia, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY orders.ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique customers placed orders in the last year?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top five products with the highest sales volume.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSold DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the shipping method with the highest average cost.",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late each month?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS ShipMonth, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders delivered on or before the required date?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS on_time_delivery_rate FROM orders GROUP BY month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the products with stock levels below their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales in 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had a shipped date later than the required date?",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of unique customers served by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomers FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with the highest and lowest unit price.",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1; SELECT ProductName FROM products ORDER BY UnitPrice ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders have been shipped late?",
        "output": "SELECT orders.OrderID FROM orders WHERE orders.RequiredDate < orders.ShippedDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the average fulfillment time for orders by employee.",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees handled the most orders last month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the least ordered products over the last six months?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= ADD_MONTHS(CURRENT_DATE, -6) GROUP BY p.ProductName ORDER BY SUM(od.Quantity) ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the revenue contribution of each product relative to the total sales?",
        "output": "SELECT ProductName, 100.0 * SUM([Order Details].Quantity * [Order Details].UnitPrice) / (SELECT SUM(Quantity * UnitPrice) FROM [Order Details]) AS RevenueContribution FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue for each category of products?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have sold the most units?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalUnitsSold DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for each customer?",
        "output": "SELECT customers.CustomerID, SUM(orders.Freight) AS TotalFreight FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity ordered per order?",
        "output": "SELECT AVG(Quantity) AS AverageQuantityOrdered FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Analyze the trend of monthly sales by employee.",
        "output": "SELECT MONTH(orders.OrderDate) AS OrderMonth, employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY MONTH(orders.OrderDate), employees.EmployeeID, employees.FirstName, employees.LastName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products need to be reordered within the next month?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE (UnitsInStock + UnitsOnOrder) < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customers who have not placed an order in the last year.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < DATEADD(year, -1, CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country has the highest Total Sales revenue?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountryRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY CountryRevenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units are on order for each product?",
        "output": "SELECT ProductID, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product category?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the highest number of customers?",
        "output": "SELECT customers.City, COUNT(customers.CustomerID) AS customer_count FROM customers GROUP BY customers.City ORDER BY customer_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are there in each category?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier delivers the most variety of products?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS ProductVariety FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY ProductVariety DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given for all orders?",
        "output": "SELECT SUM(d.UnitPrice * d.Quantity * d.Discount) AS TotalDiscount FROM [Order Details] d;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers are providing products that need reordering?",
        "output": "SELECT SupplierID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders had a discount applied in Q2 2023?",
        "output": "SELECT COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' AND [Order Details].Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders placed in Q2 2023 used expedited shipping?",
        "output": "SELECT COUNT(OrderID) AS expedited_orders FROM orders WHERE ShipVia IN (SELECT ShipperID FROM shippers WHERE CompanyName LIKE '%Expedited%') AND OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for the previous quarter?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE OrderDate >= DATEADD(QUARTER, -1, DATE_TRUNC('QUARTER', CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated from orders last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN Orders ON [Order Details].OrderID = Orders.OrderID WHERE YEAR(Orders.OrderDate) = YEAR(GETDATE()) AND MONTH(Orders.OrderDate) = MONTH(GETDATE()) - 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the country that has the most number of suppliers.",
        "output": "SELECT s.Country, COUNT(*) AS SupplierCount FROM suppliers s GROUP BY s.Country ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top five countries by total sales revenue?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are below their reorder level and need restocking?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost by shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped but never reached the required date?",
        "output": "SELECT COUNT(*) AS NeverOnTime FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What was the total sales revenue for the month of January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each supplier this quarter?",
        "output": "SELECT s.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were delivered late each month?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How has the customer retention rate changed year-over-year?",
        "output": "SELECT (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE YEAR(o.OrderDate) = 2023) / NULLIF((SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE YEAR(o.OrderDate) = 2022), 0) AS retention_rate",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of each product are currently in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales amount generated by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have seen the most significant stock reduction in the last month?",
        "output": "SELECT ProductName, (UnitsInStock - (SELECT SUM(Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].ProductID = products.ProductID AND orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH))) as StockReduction FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the most number of high-value orders (orders over $10,000)?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.OrderID) AS HighValueOrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000 ORDER BY HighValueOrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders are delivered on time each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER(WHERE ShippedDate <= RequiredDate)::NUMERIC / NULLIF(COUNT(OrderID), 0) AS OnTimeRate FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers who have not shipped any orders in the past year.",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL OR o.ShippedDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(o.OrderID) = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly shipping cost per order in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping recipient received the most orders?",
        "output": "SELECT ShipName, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipName ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average unit price for their products?",
        "output": "SELECT s.SupplierID, s.CompanyName, AVG(p.UnitPrice) AS AvgUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers based on the total sales value of their products.",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered with a discount?",
        "output": "SELECT DISTINCT ProductID FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have been discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Compare the inventory turnover ratio between various products.",
        "output": "SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What percentage of products are discontinued?",
        "output": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had the highest discount applied, and what was the discount percentage?",
        "output": "SELECT o.OrderID, od.ProductID, od.Discount * 100 AS DiscountPercentage FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY DiscountPercentage DESC, o.OrderID LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest revenue but are discontinued?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * (od.UnitPrice - od.UnitPrice * od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductID, p.ProductName ORDER BY Revenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product category has the highest average unit price?",
        "output": "SELECT c.CategoryID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY AverageUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How long on average does it take to fulfill an order each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average reorder level by category.",
        "output": "SELECT p.CategoryID, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p GROUP BY p.CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost by shipping country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping country has the highest on-time delivery rate?",
        "output": "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were shipped after the required date?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate > RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS LateShipmentPercentage FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate from January to June?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2023-01-01' THEN o.CustomerID END), 0) * 100) AS RetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have received the highest total discounts.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalDiscount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many orders included at least one product with a discount?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS NumberOfOrdersWithDiscount FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers and the number of orders they placed.",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the effect of discount on the total sales quantity?",
        "output": "SELECT Discount, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY Discount;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products need to be reordered based on current inventory levels?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units were sold for each product last quarter?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered the most this month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE)) GROUP BY p.ProductName ORDER BY TotalOrdered DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most ordered product in terms of quantity.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide products with zero units in stock?",
        "output": "SELECT s.SupplierID, s.SupplierName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time by shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many orders include products that are currently discontinued?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscontinued FROM [Order Details] WHERE ProductID IN (SELECT ProductID FROM products WHERE Discontinued = 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the highest number of orders delayed beyond the required date?",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, COUNT(orders.OrderID) AS DelayedOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY DelayedOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are low on stock and need to be reordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the total freight cost for each country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the region with the highest average lead time for product delivery.",
        "output": "SELECT o.ShipRegion, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM orders o GROUP BY o.ShipRegion ORDER BY AverageLeadTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in the past month?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the product names with less stock than their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 10 products with the highest sales revenue.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY SalesRevenue DESC LIMIT 10",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of products on order for each supplier?",
        "output": "SELECT s.SupplierID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products have the highest total sales revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have not placed any orders in the last year.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < CURDATE() - INTERVAL 1 YEAR;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the unit price of products affect order quantity?",
        "output": "SELECT p.ProductID, p.ProductName, p.UnitPrice, SUM(od.Quantity) AS TotalOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName, p.UnitPrice ORDER BY TotalOrdered DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units ordered per product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed in the last quarter of each year?",
        "output": "SELECT YEAR(OrderDate) AS Year, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE QUARTER(OrderDate) = 4 GROUP BY YEAR(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a unit price greater than the average unit price of all products?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed orders in both Q1 and Q2 of 2023?",
        "output": "SELECT COUNT(*) AS common_customers FROM ( SELECT orders.CustomerID FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY orders.CustomerID HAVING COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN orders.OrderID END) > 0 AND COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' THEN orders.OrderID END) > 0 ) AS subquery",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the peak sales months for the entire team.",
        "output": "SELECT YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the most expensive products on average?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID ORDER BY AveragePrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most common ship region among all orders?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the highest average delivery delay?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.ProductID WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) > (SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders) GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped to a different country than the customer's?",
        "output": "SELECT COUNT(*) FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.ShipCountry <> c.Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the inventory turnover ratio for product categories in September 2023.",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average unit price of products ordered each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, AVG([Order Details].UnitPrice) AS AvgUnitPrice FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 customers by total sales revenue.",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated by each product.",
        "output": "SELECT ProductName, SUM([Order Details].UnitPrice * Quantity) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with low inventory turnover.",
        "output": "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) as InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY products.ProductID HAVING InventoryTurnover < 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country receives the most shipments?",
        "output": "SELECT ShipCountry, COUNT(*) AS ShipmentCount FROM orders GROUP BY ShipCountry ORDER BY ShipmentCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are there from each country?",
        "output": "SELECT Country, COUNT(DISTINCT CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by customers with 'Manager' in their contact title?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS ManagerOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE c.ContactTitle LIKE '%Manager%' GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the sales trends by region?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have more units on order than in stock?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique customers placed orders each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given on orders by product?",
        "output": "SELECT p.ProductID, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products need to be reordered based on their reorder level and current stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top three employees by number of orders handled over the past year?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 3 suppliers by the number of products supplied?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have made repeat purchases?",
        "output": "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.OrderID) > 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the percentage of discontinued products per supplier.",
        "output": "SELECT s.SupplierID, (SUM(CASE WHEN p.Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(p.ProductID) * 100.0) AS DiscontinuedPercentage FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer has the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many distinct suppliers are there for products with no units on order?",
        "output": "SELECT COUNT(DISTINCT p.SupplierID) FROM products p WHERE p.UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the most sales in 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total revenue for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many shipments were delayed beyond the required date?",
        "output": "SELECT COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How has the average employee salary changed over the past 5 years?",
        "output": "SELECT YEAR(CURDATE()) - INTERVAL (n-1) YEAR AS Year, AVG(Salary) AS AvgSalary FROM employees WHERE YEAR(HireDate) <= YEAR(CURDATE()) AND YEAR(HireDate) >= YEAR(CURDATE()) - 5 GROUP BY YEAR(CURDATE()) - INTERVAL (n-1) YEAR ORDER BY Year DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers supply the highest number of different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the month with the highest on-time delivery rate in the previous year.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 year') GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of customers returned in the last quarter?",
        "output": "SELECT (COUNT(DISTINCT o1.CustomerID) FILTER (WHERE o1.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'))::DOUBLE PRECISION / NULLIF(COUNT(DISTINCT o2.CustomerID) FILTER (WHERE o2.OrderDate < '2023-07-01'), 0) * 100 AS RetentionRate FROM orders o1 CROSS JOIN orders o2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were handled by each employee each year?",
        "output": "SELECT YEAR(OrderDate) AS Year, EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders GROUP BY YEAR(OrderDate), EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handles the most orders that require urgent shipping?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS UrgentOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.RequiredDate < DATEADD(DAY, 2, orders.OrderDate) GROUP BY employees.EmployeeID ORDER BY UrgentOrders DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly on-time delivery rate?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of freight costs for orders placed by customers in the 'North' region?",
        "output": "SELECT Freight, COUNT(*) FROM orders WHERE ShipRegion = 'North' GROUP BY Freight;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average number of products per order.",
        "output": "SELECT AVG(ProductCount) AS AvgProductsPerOrder FROM (SELECT OrderID, SUM(Quantity) AS ProductCount FROM [Order Details] GROUP BY OrderID) AS OrderProductCounts;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders by shipping city?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for each product category.",
        "output": "SELECT products.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For which month did the shipping cost per order exceed $50 on average?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month FROM orders GROUP BY DATE_TRUNC('month', OrderDate) HAVING AVG(Freight) > 50",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the percentage of orders with products from multiple suppliers?",
        "output": "SELECT (COUNT(DISTINCT od.OrderID) - COUNT(DISTINCT single_supplier_orders.OrderID)) * 100.0 / COUNT(DISTINCT od.OrderID) AS PercentageOfMultiSupplierOrders FROM [Order Details] od LEFT JOIN (SELECT OrderID FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY OrderID HAVING COUNT(DISTINCT products.SupplierID) = 1) single_supplier_orders ON od.OrderID = single_supplier_orders.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "For each product, what percentage of sales is at a discount?",
        "output": "SELECT ProductName, SUM(CASE WHEN Discount > 0 THEN [Order Details].Quantity ELSE 0 END) * 100.0 / SUM([Order Details].Quantity) AS DiscountSalesPercentage FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products with the highest inventory turnover ratio this month?",
        "output": "SELECT products.ProductID, products.ProductName, COALESCE(SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0), 0) AS InventoryTurnover FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE DATEPART(MONTH, [Order Details].OrderDate) = DATEPART(MONTH, CURRENT_DATE) AND DATEPART(YEAR, [Order Details].OrderDate) = DATEPART(YEAR, CURRENT_DATE) GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the difference in fulfillment time between two consecutive months?",
        "output": "SELECT (SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) FROM orders WHERE OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months') AND DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')) - (SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) FROM orders WHERE OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_TRUNC('month', CURRENT_DATE)) AS FulfillmentTimeDifference;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders placed each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee whose orders have encountered the most delays in shipping.",
        "output": "SELECT E.EmployeeID, COUNT(CASE WHEN O.RequiredDate < O.ShippedDate THEN 1 END) AS DelayedOrders FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID GROUP BY E.EmployeeID ORDER BY DelayedOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated by each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many days on average does it take to fulfill an order?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed more than one order in 2023?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.CustomerID HAVING COUNT(orders.OrderID) > 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 5 employees in terms of sales revenue?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly product performance for each product.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly trend of total sales for the past year.",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 year') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY DATE_TRUNC('month', o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of orders?",
        "output": "SELECT City, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY City ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers have placed the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the suppliers with products having a unit price above the average unit price.",
        "output": "SELECT CompanyName FROM suppliers WHERE SupplierID IN (SELECT SupplierID FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped by each employee each month?",
        "output": "SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, EXTRACT(MONTH FROM ShippedDate) AS Month, EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY Year, Month, EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total units ordered for each product this year.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee was responsible for the most expensive single order?",
        "output": "SELECT e.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, e.EmployeeID ORDER BY OrderValue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have failed to deliver products on time based on the required and shipped dates?",
        "output": "SELECT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.RequiredDate < o.ShippedDate GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given per product?",
        "output": "SELECT P.ProductName, SUM(OD.Discount * OD.Quantity * OD.UnitPrice) AS TotalDiscount FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry ORDER BY TotalFreightCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Lifetime Value for each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate Customer Retention Rate for the last quarter.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2023-07-01' AND '2023-09-30' THEN CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN OrderDate < '2023-07-01' THEN CustomerID END)) AS CustomerRetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the reorder level compare to the average units in stock for each product?",
        "output": "SELECT ProductName, ReorderLevel - AVG(UnitsInStock) OVER (PARTITION BY ProductID) AS ReorderDifference FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products in stock?",
        "output": "SELECT SUM(products.UnitsInStock) AS TotalUnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify any suppliers that have provided products with a zero discount.",
        "output": "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customer with the highest lifetime value.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in April 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the performance of products vary by month?",
        "output": "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(*) AS OrderCount, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped on the weekend?",
        "output": "SELECT COUNT(OrderID) AS WeekendOrders FROM orders WHERE EXTRACT(DOW FROM ShippedDate) IN (6, 0);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 products with the highest total sales.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top 5 employees with the highest sales for the last year.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does on-time delivery rate correlate with freight cost?",
        "output": "SELECT Freight, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID)) * 100 AS OnTimeRate FROM orders GROUP BY Freight;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees offer the highest average discount?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageDiscount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify any seasonal patterns in shipping times.",
        "output": "SELECT EXTRACT(MONTH FROM ShippedDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY Month ORDER BY AvgShippingTime DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products ordered each month?",
        "output": "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS year, EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].Quantity) AS total_quantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY year, month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which countries have the shortest average order fulfillment time?",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCountry ORDER BY AvgFulfillmentTime ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most number of products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders with a freight cost above the average freight cost.",
        "output": "SELECT OrderID, Freight FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly change in total units in stock for each product.",
        "output": "SELECT ProductName, SUM(UnitsInStock) AS TotalStock FROM products GROUP BY ProductName ORDER BY SUM(UnitsInStock) DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average reorder level for products in each category.",
        "output": "SELECT CategoryID, AVG(ReorderLevel) AS AvgReorderLevel FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee processes the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have stock levels below their reorder levels?",
        "output": "SELECT COUNT(ProductID) AS NumberOfProducts FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the top 5 cities with the highest order values.",
        "output": "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalOrderValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the most discontinued products?",
        "output": "SELECT s.SupplierID, COUNT(*) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average fulfillment time for orders shipped by each shipper?",
        "output": "SELECT shippers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify potential supply chain issues by analyzing delayed orders.",
        "output": "SELECT OrderID, DeliveryStatus FROM orders WHERE DeliveryStatus = 'Delayed';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by customer 'XYZ Company'?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.CompanyName = 'XYZ Company';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed but not shipped yet?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with no current stock but have pending orders.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock = 0 AND p.UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in the current year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE())",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How has the average order value changed over time?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average units in stock for all products?",
        "output": "SELECT AVG(UnitsInStock) AS AverageUnitsInStock FROM products",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the customer retention rate compare between the first and second half of 2023?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-07-01' AND '2023-12-31' THEN orders.CustomerID END) * 100.0 / COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN orders.CustomerID END)) AS retention_rate_comparison FROM orders",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost per supplier for orders they fulfill?",
        "output": "SELECT s.SupplierID, AVG(o.Freight) AS AvgFreightCost FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compare the sales performance between employees with different titles.",
        "output": "SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Title;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average time from order to shipping.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total quantity of products sold by each employee.",
        "output": "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders had a discount applied and what was the total discount amount?",
        "output": "SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] WHERE Discount > 0 GROUP BY OrderID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which cities have the most suppliers?",
        "output": "SELECT suppliers.City, COUNT(suppliers.SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY suppliers.City ORDER BY NumberOfSuppliers DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the trend in the average discount offered over the past year?",
        "output": "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, AVG(od.Discount) AS AverageDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average shipping cost per order?",
        "output": "SELECT AVG(Freight) AS average_freight_cost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have delivered products with an average lead time of greater than 10 days?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID HAVING AvgLeadTime > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the most ordered product in December 2023.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_orders FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_orders DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have the highest average shipping costs?",
        "output": "SELECT CustomerID, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY CustomerID ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How do shipment arrival times vary between domestic and international shipments?",
        "output": "SELECT ShipCountry = 'CompanyCountry' AS isDomestic, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY isDomestic;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide products that are currently out of stock?",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped for each shipping method?",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "In which region are most orders shipped?",
        "output": "SELECT o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the total number of units on order by product.",
        "output": "SELECT ProductID, SUM(UnitsOnOrder) AS total_units_on_order FROM products GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied to orders by country?",
        "output": "SELECT customers.Country, AVG([Order Details].Discount) AS AvgDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee manages the highest number of employees?",
        "output": "SELECT e1.EmployeeID, COUNT(e2.EmployeeID) AS ManagersCount FROM employees e1 LEFT JOIN employees e2 ON e1.EmployeeID = e2.ReportsTo GROUP BY e1.EmployeeID ORDER BY ManagersCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest reorder level and are currently low in stock?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > 0 AND UnitsInStock < ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders delivered to each city?",
        "output": "SELECT ShipCity, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCity;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost by shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the highest number of late deliveries?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY CustomerID ORDER BY LateDeliveries DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What titles of employees have the highest average sales?",
        "output": "SELECT Title, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Title ORDER BY AvgSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 customers by lifetime value?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value by month for 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier's products generate the most revenue?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders that were shipped after the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discounted value of all orders?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalDiscountedValue FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most frequently used shipping method.",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average employee sales for each title?",
        "output": "SELECT employees.Title, AVG(employee_sales) AS avg_employee_sales FROM (SELECT employees.Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, employees.Title) AS sales_by_employee GROUP BY employees.Title",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have the highest average unit price?",
        "output": "SELECT c.CategoryID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the most suppliers, and how many suppliers are located there?",
        "output": "SELECT s.City, COUNT(*) AS SupplierCount FROM suppliers s GROUP BY s.City ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products supplied by a specific supplier.",
        "output": "SELECT ProductID, ProductName FROM products WHERE SupplierID = YOUR_SUPPLIER_ID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have no discontinued products?",
        "output": "SELECT s.SupplierID FROM suppliers s WHERE NOT EXISTS (SELECT 1 FROM products p WHERE p.SupplierID = s.SupplierID AND p.Discontinued = 1);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped from each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest reorder level and how many units are currently on order?",
        "output": "SELECT ProductName, ReorderLevel, UnitsOnOrder FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average order value processed by employees.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the price difference between the highest and lowest priced products?",
        "output": "SELECT MAX(UnitPrice) - MIN(UnitPrice) AS PriceDifference FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products require reordering per supplier?",
        "output": "SELECT suppliers.CompanyName, SUM(CASE WHEN products.UnitsInStock < products.ReorderLevel THEN 1 ELSE 0 END) AS ReorderCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the highest sales revenue?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS Revenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY Revenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time per month?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 performing products based on sales quantity?",
        "output": "SELECT ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the most frequently reordered product in 2023.",
        "output": "SELECT products.ProductID, COUNT(orders.OrderID) AS reorder_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Quantity >= products.ReorderLevel AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY reorder_count DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average order value for each customer.",
        "output": "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been shipped but not yet delivered?",
        "output": "SELECT COUNT(OrderID) AS ShippedNotDelivered FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate < RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products with the highest inventory turnover ratio?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(NULLIF(p.UnitsInStock, 0)), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY InventoryTurnover DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue for products that are not discontinued?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 0",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer has placed the highest number of orders in the last year?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY o.CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have made repeat purchases?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have inventory levels below their reorder point?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How has the number of discontinued products changed over the past years?",
        "output": "SELECT YEAR(products.DiscontinuedDate) AS year, COUNT(*) AS discontinued_product_count FROM products WHERE products.Discontinued = 1 GROUP BY year",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the highest single order value recorded?",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average price of products per supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products with orders but no stock.",
        "output": "SELECT DISTINCT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What percentage of total sales does each employee account for?",
        "output": "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID)) * 100 AS SalesPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of all products in each category?",
        "output": "SELECT p.CategoryID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p GROUP BY p.CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value based on the current stock levels?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend in average order value over time?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY Month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers placed more than one order in the last year?",
        "output": "SELECT COUNT(CustomerID) FROM (SELECT CustomerID, COUNT(OrderID) as NumberOfOrders FROM orders WHERE OrderDate > (CURRENT_DATE - INTERVAL '1' YEAR) GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS FrequentCustomers;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for domestic vs. international shipments?",
        "output": "SELECT CASE WHEN ShipCountry = 'USA' THEN 'Domestic' ELSE 'International' END AS ShipmentType, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipmentType;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products supplied by each supplier?",
        "output": "SELECT p.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the correlation between units on order and sales.",
        "output": "SELECT CORR(p.UnitsOnOrder, SUM(od.Quantity)) AS Correlation FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average number of units ordered per product?",
        "output": "SELECT ProductID, AVG(Quantity) AS AverageUnitsOrdered FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the highest number of suppliers?",
        "output": "SELECT City, COUNT(SupplierID) AS NumSuppliers FROM suppliers GROUP BY City ORDER BY NumSuppliers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales in terms of quantity?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_quantity DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average product unit price by category?",
        "output": "SELECT c.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the on-time delivery rate for each month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What products have stock levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales for employees based on the city they work in?",
        "output": "SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales volume in 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY sales_volume DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the total discounts given to each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average inventory turnover ratio for each month?",
        "output": "SELECT DATE_FORMAT([Order Details].OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY DATE_FORMAT([Order Details].OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order on a monthly basis?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average price of products supplied by each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region has the most orders placed?",
        "output": "SELECT o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipRegion ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units are on order for each product category?",
        "output": "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with the highest sales volume over the past month.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) as TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY products.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders shipped using each method?",
        "output": "SELECT ShipVia, (COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders)) AS Percentage FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average sales per employee per region?",
        "output": "SELECT regions.RegionDescription, AVG(total_sales) AS average_sales FROM (SELECT regions.RegionDescription, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN regions ON territories.RegionID = regions.RegionID GROUP BY regions.RegionDescription, employees.EmployeeID) AS employee_sales_per_region GROUP BY regions.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average number of days between order date and required date?",
        "output": "SELECT AVG(DATEDIFF(orders.RequiredDate, orders.OrderDate)) AS AvgOrderToRequired FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders are delivered on or before the required date each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average revenue per unit for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity) / SUM([Order Details].Quantity) AS AverageRevenuePerUnit FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for orders placed by customers in the 'UK'?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'UK';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How has the on-time delivery rate changed over the last year?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN o.OrderID END) * 100.0 / COUNT(o.OrderID) AS OnTimeDeliveryRate FROM orders o WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate total revenue lost due to discounts.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscountLoss FROM [Order Details];",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for orders shipped via a specific shipping method?",
        "output": "SELECT o.ShipVia, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Sales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipVia = :specific_shipping_method GROUP BY o.ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value each month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products were ordered last year?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = 2022);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify any employees who have not processed any orders in the last six months.",
        "output": "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate IS NULL OR orders.OrderDate < (CURRENT_DATE - INTERVAL '6 MONTH') AND orders.OrderDate >= (CURRENT_DATE - INTERVAL '12 MONTH');",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest total sales quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have been ordered but are currently discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND ProductID IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the cost of unsold units in stock for each product?",
        "output": "SELECT ProductName, UnitsInStock * UnitPrice AS UnsoldCost FROM products WHERE UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find out how many units are currently on order for discontinued products.",
        "output": "SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders have the highest total discount applied?",
        "output": "SELECT orders.OrderID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY TotalDiscount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have the highest number of discontinued products?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance trend for each product over the last six months?",
        "output": "SELECT od.ProductID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS OrderMonth, SUM(od.Quantity) AS MonthlySales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, GETDATE()) GROUP BY od.ProductID, OrderMonth ORDER BY OrderMonth DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the yearly turnover rate of employees.",
        "output": "SELECT COUNT(EmployeeID) / (SELECT COUNT(EmployeeID) FROM employees) * 100 AS TurnoverRate FROM employees WHERE HireDate BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top-selling products for each employee?",
        "output": "SELECT e.EmployeeID, od.ProductID, SUM(od.Quantity) AS TotalSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID ORDER BY TotalSold DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How has the inventory turnover ratio changed monthly?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY order_month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the difference between employees\u2019 highest and lowest monthly sales?",
        "output": "SELECT EmployeeID, MAX(MonthlySales) - MIN(MonthlySales) AS SalesDifference FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate)) AS Sales GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average discount given by each employee on their sales.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not yet made a sale?",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the order with the highest shipping cost.",
        "output": "SELECT * FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 3 products sold by each employee based on quantity.",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, [Order Details].ProductID ORDER BY employees.EmployeeID, TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly trend of order fulfillment time over the past year?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= DATE_ADD('year', -1, CURRENT_DATE) GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which region hosts the most employees?",
        "output": "SELECT Region, COUNT(*) AS EmployeeCount FROM employees GROUP BY Region ORDER BY EmployeeCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which month had the highest Inventory Turnover Ratio?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time per shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the contribution of each product category to total sales.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer generated the highest revenue last year?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CustomerID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales quantity for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue generated by orders within the last financial quarter?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What percentage of total sales is contributed by employees with titles containing 'Manager'?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID) * 100 AS ManagerContributionPercentage FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.Title LIKE '%Manager%';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest total sales in the last quarter?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND o.OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method has the least freight cost on average?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia ORDER BY AvgFreightCost ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average time between order placement and shipping.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingDelay FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have never handled an order.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend of total sales over the past year?",
        "output": "SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY Year, Month ORDER BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the discount rate for each order in the [Order Details] table.",
        "output": "SELECT OrderID, ProductID, (Discount * 100) AS DiscountRate FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 3 products with the lowest stock levels.",
        "output": "SELECT ProductID, ProductName, UnitsInStock FROM products ORDER BY UnitsInStock ASC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by region?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products with a price higher than the average price of all products.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which country has the most suppliers?",
        "output": "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the current stock level of each product?",
        "output": "SELECT ProductID, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does employee performance correlate with their years of service?",
        "output": "",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers are providing the most expensive products?",
        "output": "SELECT products.SupplierID, suppliers.SupplierName, products.UnitPrice FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.UnitPrice = (SELECT MAX(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products that have been discontinued.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees are responsible for the top 25% of business revenue?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS EmployeeSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > (SELECT PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY sub_query.EmployeeSales) FROM (SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS EmployeeSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID) AS sub_query)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the proportion of orders that were shipped late by different employees.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) * 1.0 / (SELECT COUNT(*) FROM orders WHERE orders.EmployeeID = employees.EmployeeID) AS LateOrderProportion FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY LateOrderProportion DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers placed orders in the last month?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been fulfilled after the required date?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped per month per shipping company?",
        "output": "SELECT EXTRACT(YEAR_MONTH FROM ShippedDate) AS Month, ShipVia, COUNT(OrderID) AS OrdersShipped FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month, ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the total number of orders shipped via each shipping method.",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with the highest ratio of units on order to units in stock.",
        "output": "SELECT ProductName, UnitsOnOrder / NULLIF(UnitsInStock, 0) AS OrderToStockRatio FROM products ORDER BY OrderToStockRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest total sales?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductSales FROM [Order Details] GROUP BY ProductID ORDER BY ProductSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date, aggregated monthly?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY Year, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 best-selling products by quantity.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with average delivery times longer than 10 days.",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDeliveryDays FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID HAVING AvgDeliveryDays > 10",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the product performance for each month.",
        "output": "SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS ProductPerformance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many different products did each customer order last quarter?",
        "output": "SELECT c.CustomerID, COUNT(DISTINCT od.ProductID) AS ProductVariety FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('QUARTER', CURRENT_DATE) - INTERVAL '3 MONTH' AND o.OrderDate < DATE_TRUNC('QUARTER', CURRENT_DATE) GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied to orders for each customer?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the earliest hire date who also has a manager.",
        "output": "SELECT e.EmployeeID, e.HireDate FROM employees e WHERE e.HireDate = (SELECT MIN(HireDate) FROM employees WHERE ReportsTo IS NOT NULL) AND e.ReportsTo IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated per month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average time between order date and shipped date?",
        "output": "SELECT AVG(CAST(o.ShippedDate AS DATE) - CAST(o.OrderDate AS DATE)) AS AverageShippingTime FROM orders o WHERE o.ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Compare the average order fulfillment times by month in 2023.",
        "output": "SELECT MONTH(orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest total revenue from sales?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide discontinued products?",
        "output": "SELECT DISTINCT s.SupplierID, s.SupplierName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping delay for orders not delivered on time?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue from each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the difference in stock levels for products from last month to this month?",
        "output": "SELECT p.ProductID, p.ProductName, (p.UnitsInStock - COALESCE(l.UnitsInStock, 0)) AS StockDifference FROM products p LEFT JOIN (SELECT ProductID, UnitsInStock FROM products WHERE OrderDate = '2023-08-01') AS l ON p.ProductID = l.ProductID WHERE OrderDate = '2023-09-01';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 5 employees with the highest sales in the last year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What regions have the highest number of unique customers?",
        "output": "SELECT Region, COUNT(DISTINCT CustomerID) AS NumCustomers FROM customers GROUP BY Region ORDER BY NumCustomers DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders have incurred the highest freight cost?",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders along with their total value post discount.",
        "output": "SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 best-selling products based on quantity sold.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest inventory turnover ratio?",
        "output": "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS CategoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID ORDER BY CategoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most common customer demographic?",
        "output": "SELECT customerDemographics.CustomerDesc, COUNT(customerCustomerDemo.CustomerID) AS count FROM customerCustomerDemo JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc ORDER BY count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the median fulfillment time for orders?",
        "output": "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products need to be reordered based on the reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales in the first quarter of 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find categories with the highest number of discontinued products.",
        "output": "SELECT c.CategoryID, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method has been used most frequently?",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the average price of products relate to their sales performance?",
        "output": "SELECT P.ProductID, AVG(OD.UnitPrice) AS AvgPrice, SUM(OD.Quantity) AS TotalSold FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductID ORDER BY AvgPrice DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount provided on all orders, and how does it vary by supplier?",
        "output": "SELECT s.SupplierID, s.CompanyName, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON od.ProductID = p.ProductID GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average supplier lead time in May 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY products.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the monthly average freight cost?",
        "output": "SELECT DATE_PART('month', OrderDate) AS OrderMonth, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest total sales volume in 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What proportion of orders is delivered within three days of the order date?",
        "output": "SELECT COUNT(CASE WHEN DATEDIFF(ShippedDate, OrderDate) <= 3 THEN 1 END) * 100.0 / COUNT(*) AS ProportionWithinThreeDays FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the most frequently ordered product and its total order quantity.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were delivered on time?",
        "output": "SELECT COUNT(*) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employee titles within the company?",
        "output": "SELECT Title, COUNT(*) AS Count FROM employees GROUP BY Title;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders took the longest time to ship?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingTime FROM orders ORDER BY ShippingTime DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products sold by month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Quantity) AS TotalProductsSold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average freight cost per order for each employee?",
        "output": "SELECT employees.EmployeeID, AVG(orders.Freight) AS AverageFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names of discontinued products that have a stock level lower than the reorder level?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the median freight cost per order?",
        "output": "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Freight) AS MedianFreight FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify products with a discount greater than 10%.",
        "output": "SELECT DISTINCT ProductID FROM [Order Details] WHERE Discount > 0.10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify discontinued products that still have units in stock.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer placed the first order?",
        "output": "SELECT CustomerID FROM orders ORDER BY OrderDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have not placed any orders in the last year.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL OR orders.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName HAVING COUNT(orders.OrderID) = 0",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee's orders have the highest average discount?",
        "output": "SELECT e.FirstName, e.LastName, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.FirstName, e.LastName ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has the fastest average order fulfillment time?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers who made orders in January but not in February.",
        "output": "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' AND customers.CustomerID NOT IN (SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28')",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the current inventory turnover ratio for each month?",
        "output": "SELECT DATE_TRUNC('month', od.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY DATE_TRUNC('month', od.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the top 5 best-selling products based on quantity ordered.",
        "output": "SELECT P.ProductName FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName ORDER BY SUM(OD.Quantity) DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the highest salary paid to any employee?",
        "output": "SELECT MAX(Salary) FROM employees;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products in stock?",
        "output": "SELECT AVG(UnitPrice) FROM products WHERE UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which month had the lowest shipping cost per order in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate) ORDER BY avg_shipping_cost ASC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level that has been reached and need restocking?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has placed the most orders?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS TotalOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the top regions by total order revenue.",
        "output": "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY Region ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the total orders and average order value for each shipping country.",
        "output": "SELECT ShipCountry, COUNT(DISTINCT OrderID) AS TotalOrders, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the difference in average order value between different shipping methods?",
        "output": "SELECT ShipVia, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the variance in shipping costs per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the shipping cost per order by shipping company in 2023?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has the highest number of distinct customers?",
        "output": "SELECT Region, COUNT(DISTINCT CustomerID) AS DistinctCustomers FROM customers GROUP BY Region ORDER BY DistinctCustomers DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders did each employee handle?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What was the total quantity of products ordered last month?",
        "output": "SELECT SUM(Quantity) AS TotalQuantityOrderedLastMonth FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE order_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest turnover rate on a monthly basis?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS Turnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductID ORDER BY Turnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales this year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 3 employees who handle the most orders.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a unit price lower than their category's average unit price?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice < (SELECT AVG(UnitPrice) FROM products p2 WHERE p2.CategoryID = products.CategoryID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How do average order values compare across different months in a year?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "For each supplier, what is the total number of products they supply?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS TotalProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders delivered on or before the required date for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / NULLIF(COUNT(OrderID), 0) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount offered across all products?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have stock below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region generated the highest revenue?",
        "output": "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What percentage of products are above their reorder level?",
        "output": "SELECT (COUNT(*) FILTER(WHERE UnitsInStock > ReorderLevel) * 100.0 / COUNT(*)) AS PercentageAbove FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the employee responsible for the highest number of orders.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have not yet been shipped?",
        "output": "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is the fastest on average to fulfill an order?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by quantity ordered?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have been with the company for more than 5 years.",
        "output": "SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate < DATE_SUB(CURDATE(), INTERVAL 5 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 10 customers by total sales value.",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the peak order fulfillment speed?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentSpeed FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY FulfillmentSpeed ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for the first quarter of 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight cost for all orders in the last year.",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= (CURRENT_DATE - INTERVAL '1 year')",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top-selling products based on quantity ordered?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers are linked to the highest sales products?",
        "output": "SELECT suppliers.SupplierID FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated last quarter?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) MONTH), INTERVAL 3 MONTH) AND o.OrderDate < DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales per month.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have never been ordered?",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the lifetime value of the top three customers?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the regions covered by employees and the total sales in each.",
        "output": "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers have provided products with above average unit prices?",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total number of units sold per supplier.",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost associated with all orders to a specific country?",
        "output": "SELECT ShipCountry, SUM(Freight) FROM orders WHERE ShipCountry = 'specific_country' GROUP BY ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the largest difference between units in stock and units on order?",
        "output": "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS StockDifference FROM products ORDER BY StockDifference DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the longest average lead time?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY avg_lead_time DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products are discontinued and what is their total inventory value?",
        "output": "SELECT COUNT(products.ProductID) AS discontinued_count, SUM(products.UnitsInStock * products.UnitPrice) AS total_inventory_value FROM products WHERE products.Discontinued = 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders use each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS Percentage FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products with a reorder point higher than their units in stock.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees with the longest employment without managerial reports.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN employees m ON e.EmployeeID = m.ReportsTo WHERE m.ReportsTo IS NULL ORDER BY e.HireDate ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products generate the most revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per month for each shipping method?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY DATE_TRUNC('month', ShippedDate), ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TimesUsed FROM orders GROUP BY ShipVia ORDER BY TimesUsed DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top three suppliers with the quickest average delivery times.",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTime FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID ORDER BY AvgDeliveryTime ASC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales in terms of products supplied?",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have the highest total sales in each country?",
        "output": "SELECT employees.EmployeeID, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, orders.ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from orders that included a discount?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RevenueWithDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What percentage of products in stock are discontinued?",
        "output": "SELECT COUNT(ProductID) * 100.0 / NULLIF((SELECT COUNT(*) FROM products WHERE UnitsInStock > 0), 0) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time by each supplier this month?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY suppliers.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product generated the most sales revenue in January 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) = 1 GROUP BY products.ProductID ORDER BY product_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the highest revenue-generating product category?",
        "output": "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which orders had the largest discounts?",
        "output": "SELECT OrderID, SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after their required date?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee joined most recently and what has been their sales contribution so far?",
        "output": "SELECT e.FirstName, e.LastName, e.HireDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_contribution FROM [Order Details] JOIN orders o ON [Order Details].OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE e.HireDate = (SELECT MAX(HireDate) FROM employees) GROUP BY e.FirstName, e.LastName, e.HireDate",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the percentage of discontinued products relative to total products?",
        "output": "SELECT (CAST(SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS DiscontinuedPercentage FROM products;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average discount provided for each product.",
        "output": "SELECT ProductID, AVG(Discount) FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the highest total freight cost?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 5 products by sales revenue.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees with the highest sales in 2021.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2021 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total discount amount granted by each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average discount applied by each employee across all orders.",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are supplied by each supplier?",
        "output": "SELECT SupplierID, COUNT(*) FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount on products sold per category?",
        "output": "SELECT c.CategoryID, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most common quantity per unit for products in inventory?",
        "output": "SELECT QuantityPerUnit, COUNT(*) AS Count FROM products WHERE UnitsInStock > 0 GROUP BY QuantityPerUnit ORDER BY Count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee managed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers with more than 5 orders and an average discount of more than 10%.",
        "output": "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5 AND AVG([Order Details].Discount) > 0.10",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have been ordered more than 100 times?",
        "output": "SELECT COUNT(*) FROM (SELECT p.ProductID FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > 100) AS subquery;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products based on sales quantity?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total value of products in stock for each supplier?",
        "output": "SELECT s.SupplierName, SUM(p.UnitPrice * p.UnitsInStock) AS TotalStockValue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the city with the highest number of suppliers.",
        "output": "SELECT City, COUNT(*) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders shipped late for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(CASE WHEN ShippedDate > RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each shipping company?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee manages the most orders in terms of required delivery date?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate IS NOT NULL GROUP BY e.EmployeeID ORDER BY OrdersCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied across all products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on current stock levels?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were shipped late last quarter?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Lifetime Value for a specific customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE customers.CustomerID = 'specific_customer_id' GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date for January 2023?",
        "output": "SELECT ROUND(100.0 * SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID), 2) AS OnTime_Delivery_Rate FROM orders WHERE EXTRACT(YEAR FROM ShippedDate) = 2023 AND EXTRACT(MONTH FROM ShippedDate) = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top 5 products by sales revenue.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity on order for each product category?",
        "output": "SELECT c.CategoryID, SUM(po.UnitsOnOrder) AS TotalOrderQuantity FROM products po JOIN categories c ON po.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the average monthly sales of each employee compare across different regions?",
        "output": "SELECT e.Region, e.EmployeeID, e.FirstName, e.LastName, AVG(TotalSales) OVER (PARTITION BY e.Region) AS AvgMonthlySales FROM (SELECT e.EmployeeID, e.Region, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Region, e.FirstName, e.LastName, YEAR(o.OrderDate), MONTH(o.OrderDate)) AS MonthlySales;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 5 products with the highest sales quantity.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average unit price of all products supplied by each supplier.",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the highest number of discontinued products?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY DiscontinuedProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of discontinued products are still in stock?",
        "output": "SELECT SUM(p.UnitsInStock) AS TotalUnitsInStock FROM products p WHERE p.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered the most?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalOrdered DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products that have been sold at a discount of more than 20%.",
        "output": "SELECT DISTINCT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.20;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been shipped late?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have sales exceeding their reorder level?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > MAX(p.ReorderLevel);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the most frequent shipping method used.",
        "output": "SELECT ShipVia, COUNT(*) AS frequency FROM orders GROUP BY ShipVia ORDER BY frequency DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average discount given on all products.",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a stock level below their reorder level?",
        "output": "SELECT COUNT(ProductName) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the highest number of different products?",
        "output": "SELECT p.SupplierID, COUNT(DISTINCT p.ProductID) AS NumberOfProducts FROM products p GROUP BY p.SupplierID ORDER BY NumberOfProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer generated the highest total sales revenue?",
        "output": "SELECT CustomerID, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS TotalSales FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month had the highest sales revenue?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, EXTRACT(YEAR FROM OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Year, Month ORDER BY SalesRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products by sales revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost associated with each employee's sales?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are there from each city?",
        "output": "SELECT c.City, COUNT(DISTINCT c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.City;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top three customers based on their purchase volumes in 2023.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS purchase_volume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY purchase_volume DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer this year?",
        "output": "SELECT o.CustomerID, COUNT(*) AS OrderCount FROM orders o WHERE DATE_PART('year', o.OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY o.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount given per order?",
        "output": "SELECT orders.OrderID, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with units in stock less than the reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed with a discount greater than 10%?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0.1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many suppliers are located in each country?",
        "output": "SELECT suppliers.Country, COUNT(suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.Country ORDER BY SupplierCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products with the highest price variation between stock and order.",
        "output": "SELECT ProductName, (UnitsOnOrder - UnitsInStock) AS Variation FROM products ORDER BY Variation DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region accounts for the highest revenue?",
        "output": "SELECT Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Region ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top three products by revenue.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have not shipped any products in the last month?",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL OR o.ShippedDate < CURRENT_DATE - INTERVAL '1 MONTH' GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(o.OrderID) = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the variation in unit prices within each product category?",
        "output": "SELECT c.CategoryID, STDDEV(p.UnitPrice) FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped per shipping company each month?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month, ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products need to be reordered based on current inventory levels?",
        "output": "SELECT products.ProductName, products.ReorderLevel FROM products WHERE products.UnitsInStock + products.UnitsOnOrder <= products.ReorderLevel",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped more than a week late?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 7;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers are located in a specific region?",
        "output": "SELECT * FROM customers WHERE Region = 'SpecificRegion';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the order fulfillment time for orders shipped by ShipperID 1?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.ShipVia = 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 cities with the most orders?",
        "output": "SELECT ShipCity, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a unit price above the average unit price of all products?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped over the last month, grouped by shipping company?",
        "output": "SELECT ShipVia, COUNT(OrderID) FROM orders WHERE ShippedDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND ShippedDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a unit price above the average?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the variance in shipping costs per month.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, VAR_SAMP(Freight) AS FreightVariance FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of products ordered by each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].Quantity) AS TotalProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly growth rate of total orders shipped?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) - LAG(COUNT(OrderID), 1) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) AS Growth FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have sales revenue above the median?",
        "output": "WITH Sales AS (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID), MedianSales AS (SELECT TotalSales FROM Sales ORDER BY TotalSales LIMIT 1 OFFSET (SELECT COUNT(*) FROM Sales) / 2) SELECT COUNT(*) FROM Sales WHERE TotalSales > (SELECT * FROM MedianSales);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers by total order value.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which regions have the highest number of unique customers?",
        "output": "SELECT Region, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY Region ORDER BY UniqueCustomers DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the maximum average order value?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales per employee per region.",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, orders.ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName), orders.ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the distribution of suppliers per country?",
        "output": "SELECT Country, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly product performance based on sales volume?",
        "output": "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given for each product across all orders?",
        "output": "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who handles the largest order.",
        "output": "SELECT e.EmployeeID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for orders placed in December 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify orders that have a shipping delay greater than 7 days.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been processed by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have generated sales above $100,000 in the last year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY employees.EmployeeID HAVING total_sales > 100000",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have received a discount of more than 20% on any product.",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been discontinued and still have units in stock?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total count of unique customers who have made orders?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How does supplier lead time vary by city?",
        "output": "SELECT s.City, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to products ordered?",
        "output": "SELECT AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee for the month of June 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between freight cost and delivery time?",
        "output": "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are still pending shipment?",
        "output": "SELECT COUNT(*) AS pending_shipments FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the difference between units in stock and reorder level for each product?",
        "output": "SELECT ProductID, (UnitsInStock - ReorderLevel) AS Difference FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have not placed any orders.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories have the fastest inventory turnover?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY turnover DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for orders with a freight cost greater than $50?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE Freight > 50;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the average order value vary by shipping country?",
        "output": "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discount applied across all orders.",
        "output": "SELECT SUM(Quantity * UnitPrice * Discount) FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find out which month had the highest sales and which employees contributed to it.",
        "output": "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 employees who handled the most orders.",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS HandledOrders FROM orders o GROUP BY o.EmployeeID ORDER BY HandledOrders DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the product with the highest reorder level.",
        "output": "SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does employee Title affect average sales performance?",
        "output": "SELECT e.Title, AVG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest average unit price?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID ORDER BY AvgUnitPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue from all orders?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly product performance over the past year.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS MonthlyPerformance, EXTRACT(MONTH FROM o.OrderDate) AS Month FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY p.ProductName, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders were never shipped?",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders last quarter?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders WHERE OrderDate BETWEEN DATE_ADD(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER), INTERVAL 1 DAY) AND LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 DAY)) GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total number of distinct products ordered by each customer.",
        "output": "SELECT c.CustomerID, COUNT(DISTINCT od.ProductID) AS ProductCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have orders pending for more than a month?",
        "output": "SELECT e.EmployeeID, o.OrderID, DATEDIFF(CURDATE(), o.OrderDate) AS DaysPending FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate IS NOT NULL AND DATEDIFF(CURDATE(), o.OrderDate) > 30;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are currently below their reorder level?",
        "output": "SELECT COUNT(ProductID) AS BelowReorderLevelCount FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest sales revenue last quarter?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter') AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ProductID ORDER BY Sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Analyze the impact of employee birth years on their sales performance.",
        "output": "SELECT E.EmployeeID, (YEAR(CURDATE()) - YEAR(E.BirthDate)) AS Age, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID, Age ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How efficient is each supplier in terms of delivery time compared to their peers?",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS delivery_time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY delivery_time ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products in each category?",
        "output": "SELECT c.CategoryName, AVG(p.UnitPrice) AS AveragePrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed in each quarter of 2023?",
        "output": "SELECT CONCAT('Q', QUARTER(OrderDate), ' ', YEAR(OrderDate)) AS quarter, COUNT(*) AS order_count FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY quarter",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest average freight cost?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipCountry ORDER BY AverageFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has handled the most diverse range of products in their orders?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS ProductCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products that have the highest inventory turnover ratio?",
        "output": "SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 0 GROUP BY products.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the product performance vary by category on a monthly basis?",
        "output": "SELECT CategoryID, MONTH(OrderDate), SUM([Order Details].Quantity) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY CategoryID, MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales per category of products.",
        "output": "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest number of discontinued products?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY DiscontinuedProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which day of the week has the highest number of orders placed?",
        "output": "SELECT DAYNAME(orders.OrderDate) AS order_day, COUNT(orders.OrderID) AS total_orders FROM orders GROUP BY order_day ORDER BY total_orders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What products have never been sold?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a unit price above the average unit price of all products?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees whose orders have the largest average discount.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS LargestAvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY LargestAvgDiscount DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have returned to place an order more than once?",
        "output": "SELECT CustomerID, COUNT(OrderID) FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled on time in 2023?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND YEAR(orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given for each product?",
        "output": "SELECT ProductName, SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average order value per customer.",
        "output": "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the sales performance growth rate for each employee quarter over quarter.",
        "output": "SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(QUARTER FROM o.OrderDate) AS Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Sales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Year, Quarter;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped on time this quarter?",
        "output": "SELECT COUNT(o.OrderID) AS OnTimeOrders FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total quantity ordered for each product category.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customers who have not placed any orders.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the most units of products?",
        "output": "SELECT SupplierID, SUM(UnitsInStock + UnitsOnOrder) AS TotalUnits FROM products GROUP BY SupplierID ORDER BY TotalUnits DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average unit price of products ordered last month?",
        "output": "SELECT AVG(UnitPrice) AS AvgUnitPrice FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) AND MONTH(OrderDate) = MONTH(CURDATE()) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products that have been heavily discounted (more than 20%).",
        "output": "SELECT DISTINCT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue by country?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many employees handled orders for customers in a particular city this year?",
        "output": "SELECT COUNT(DISTINCT EmployeeID) FROM orders WHERE ShipCity = 'TargetCity' AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the discount applied most frequently across orders?",
        "output": "SELECT od.Discount, COUNT(*) AS Frequency FROM [Order Details] od GROUP BY od.Discount ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest sales revenue in the last year?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE '2022-01-01' AND o.OrderDate < DATE '2023-01-01' GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the most suppliers?",
        "output": "SELECT City, COUNT(SupplierID) AS Supplier_Count FROM suppliers GROUP BY City ORDER BY Supplier_Count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each customer in 2023?",
        "output": "SELECT c.CustomerID, AVG(order_value) AS avg_order_value FROM (SELECT o.CustomerID, od.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS order_value FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY o.CustomerID, od.OrderID) customer_orders GROUP BY c.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products ordered for each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company (ShipVia) has the best on-time delivery record?",
        "output": "SELECT ShipVia, COUNT(OrderID) * 100.0 / SUM(COUNT(OrderID)) OVER () AS OnTimePercentage FROM orders WHERE ShippedDate <= RequiredDate GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the retention rate of customers who placed orders last quarter?",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30') / NULLIF((SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-07-01'), 0) AS customer_retention_rate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have not been shipped yet?",
        "output": "SELECT COUNT(*) AS NotShippedOrders FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for March 2023?",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE OrderDate BETWEEN '2023-03-01' AND '2023-03-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied across all orders in December 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShipDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 cities in terms of total order revenue?",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CityRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY CityRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which territory had the highest sales increase compared to the previous quarter?",
        "output": "SELECT t.TerritoryDescription, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID JOIN employeeTerritories et ON orders.EmployeeID = et.EmployeeID JOIN territories t ON et.TerritoryID = t.TerritoryID WHERE orders.OrderDate BETWEEN 'start_date' AND 'end_date' GROUP BY t.TerritoryDescription ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the earliest hire date.",
        "output": "SELECT e.FirstName, e.LastName, e.HireDate FROM employees e ORDER BY e.HireDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest total freight cost for shipped orders?",
        "output": "SELECT ShipCity, SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY TotalFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the most delayed shipments, and what is the average delay?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS TotalDelays, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month ORDER BY TotalDelays DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were delivered on time this year?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(ShippedDate) = YEAR(CURRENT_DATE)",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used most frequently?",
        "output": "SELECT orders.ShipVia, COUNT(orders.OrderID) AS UsageCount FROM orders GROUP BY orders.ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the distribution of average order values across different shipping methods?",
        "output": "SELECT o.ShipVia, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM orders o JOIN [Order Details] ON o.OrderID = [Order Details].OrderID GROUP BY o.ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For each customer, what is the average fulfillment time of their orders?",
        "output": "SELECT CustomerID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the greatest number of discontinued products?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest sales volume?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od GROUP BY od.ProductID ORDER BY SalesVolume DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which territory has the best employee sales performance?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products from each supplier?",
        "output": "SELECT s.CompanyName, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the monthly sales performance for each product.",
        "output": "SELECT products.ProductID, EXTRACT(MONTH FROM [Order Details].OrderDate) AS SalesMonth, SUM([Order Details].Quantity) AS MonthlySales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, EXTRACT(MONTH FROM [Order Details].OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average number of units on order across products?",
        "output": "SELECT AVG(UnitsOnOrder) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired in each year?",
        "output": "SELECT YEAR(HireDate) AS HireYear, COUNT(EmployeeID) AS HiredEmployees FROM employees GROUP BY YEAR(HireDate)",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales for each month in 2022?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top three products by sales revenue?",
        "output": "SELECT OD.ProductID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalRevenue FROM [Order Details] OD GROUP BY OD.ProductID ORDER BY TotalRevenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top five suppliers by total sales revenue?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest average order quantity?",
        "output": "SELECT p.ProductName, AVG(od.Quantity) AS AverageOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AverageOrderQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the maximum total sales for their products?",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON od.ProductID = p.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products that have been ordered more than 100 times.",
        "output": "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, ProductName HAVING SUM([Order Details].Quantity) > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given per customer?",
        "output": "SELECT c.CustomerID, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average units in stock for products, grouped by category.",
        "output": "SELECT products.CategoryID, AVG(products.UnitsInStock) AS AverageUnitsInStock FROM products GROUP BY products.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales in the last quarter?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(QUARTER, -1, CURDATE()) AND o.OrderDate < CURDATE() GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost by country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue per month for each product category?",
        "output": "SELECT products.CategoryID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY products.CategoryID, OrderMonth",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most number of products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average age of employees who have the title 'Sales Representative'?",
        "output": "SELECT AVG(YEAR(CURRENT_DATE) - YEAR(e.BirthDate) - (DATE_FORMAT(CURRENT_DATE, '%m%d') < DATE_FORMAT(e.BirthDate, '%m%d'))) AS AverageAge FROM employees e WHERE e.Title = 'Sales Representative';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products were ordered each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, COUNT(DISTINCT [Order Details].ProductID) AS unique_products FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY month ORDER BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee processed the largest number of orders this year?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY OrdersCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees are responsible for orders with the highest shipping costs?",
        "output": "SELECT EmployeeID, SUM(Freight) AS TotalFreight FROM orders GROUP BY EmployeeID ORDER BY TotalFreight DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for orders shipped during weekends?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE EXTRACT(ISODOW FROM ShippedDate) IN (6, 7);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the ratio of discontinued to active products in stock?",
        "output": "SELECT COUNT(*) AS DiscontinuedCount, (SELECT COUNT(*) FROM products WHERE Discontinued = 0) AS ActiveCount FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names of all products currently in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products supplied by suppliers located in Germany.",
        "output": "SELECT ProductName FROM products INNER JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE suppliers.Country = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest average freight cost?",
        "output": "SELECT ShipCity, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCity ORDER BY AvgFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost managed by each employee?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreightCost FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders handled by each employee?",
        "output": "SELECT EmployeeID, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are fulfilled in less than a week?",
        "output": "SELECT COUNT(OrderID) AS QuickFulfillmentOrders FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) < 7;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most diverse range of products (different categories)?",
        "output": "SELECT s.SupplierID, COUNT(DISTINCT p.CategoryID) AS CategoryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY CategoryCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top five countries in terms of shipping costs.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY ShipCountry ORDER BY TotalShippingCost DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have been ordered the most by customers from Canada?",
        "output": "SELECT od.ProductID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.Country = 'Canada' GROUP BY od.ProductID ORDER BY SUM(od.Quantity) DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS Average_Unit_Price FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance ranking of products based on quantity sold?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have a title of 'Sales Representative'?",
        "output": "SELECT COUNT(*) AS NumSalesRepresentatives FROM employees WHERE Title = 'Sales Representative';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for orders shipped after the required date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products with stock levels below the reorder level.",
        "output": "SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Compute the difference in units between stock and order for each product.",
        "output": "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS StockOrderDifference FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top 5 employees with the highest number of sales?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped to each region?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipRegion ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month has the highest average order fulfillment time?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY AvgFulfillmentTime DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were shipped before the required date in 2023?",
        "output": "SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID)) AS on_time_delivery_percentage FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the longest tenure in the company?",
        "output": "SELECT EmployeeID, DATEDIFF(CURRENT_DATE, HireDate) AS TenureDays FROM employees ORDER BY TenureDays DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped within the same city they were ordered from?",
        "output": "SELECT COUNT(OrderID) AS SameCityOrders FROM orders WHERE ShipCity = ShipCity;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How is the order frequency distributed over the months of the year?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the sales revenue compare between different regions?",
        "output": "SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Sales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by each customer in the first quarter of 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders has each employee fulfilled that shipped on time?",
        "output": "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS OnTimeOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate <= o.RequiredDate GROUP BY e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 products by total sales revenue?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For each city, what is the average number of days an order takes from order date to ship date?",
        "output": "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDays FROM orders GROUP BY ShipCity;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by each customer in 2022?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE YEAR(o.OrderDate) = 2022 GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products sold this year?",
        "output": "SELECT SUM([Order Details].Quantity) FROM [Order Details] WHERE EXTRACT(YEAR FROM [Order Details].OrderID) = EXTRACT(YEAR FROM CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of orders?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after their required dates last quarter?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND QUARTER(OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many employees work in each region?",
        "output": "SELECT region.RegionDescription, COUNT(DISTINCT employees.EmployeeID) AS employee_count FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer ordered the highest quantity of a single product?",
        "output": "SELECT o.CustomerID, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID, od.ProductID ORDER BY TotalQuantity DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the longest tenure. How much sales have they generated?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, DATEDIFF(CURRENT_DATE, e.HireDate) AS TenureDays, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.HireDate ORDER BY TenureDays DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average shipping time for orders processed by each employee?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the impact of shipping cost on fulfillment time.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentTime, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on each product?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a discount higher than 10% on average?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING AVG(od.Discount) > 0.1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have generated sales in every month of 2023?",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID HAVING COUNT(DISTINCT EXTRACT(MONTH FROM o.OrderDate)) = 12;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the percentage of orders delivered on time in 2023?",
        "output": "SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Who are the top 3 suppliers by the number of active products supplied?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS ActiveProducts FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 0 GROUP BY s.SupplierID ORDER BY ActiveProducts DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer lifetime value for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the region with the highest average fulfillment time.",
        "output": "SELECT o.ShipRegion, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageFulfillmentTime FROM orders o GROUP BY o.ShipRegion ORDER BY AverageFulfillmentTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer received the most discounts on their orders?",
        "output": "SELECT c.CustomerID, SUM(od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average number of products per order?",
        "output": "SELECT AVG(ProductsPerOrder) FROM (SELECT SUM(d.Quantity) AS ProductsPerOrder FROM [Order Details] d GROUP BY d.OrderID) AS OrderQuantities;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with the highest reorder levels.",
        "output": "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders placed by each customer?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS TotalOrders FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has generated the highest total sales revenue?",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the most sales in the last quarter?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the shortest and longest lead times?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have yet to be ordered this year?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE DATEPART(YEAR, OrderDate) = DATEPART(YEAR, CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT products.ProductName, COUNT([Order Details].ProductID) AS order_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY order_count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers returned more than once in the last three months?",
        "output": "SELECT customers.CustomerID FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the top 10 best-selling products by sales revenue.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SalesRevenue DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average unit price of products supplied by each supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region has the longest delivery time on average?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipRegion ORDER BY AvgDeliveryTime DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by customers from a specific city?",
        "output": "SELECT COUNT(*) FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.City = 'Specific City';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee this month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied on orders?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the region with the highest customer lifetime value.",
        "output": "SELECT Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Region ORDER BY TotalLifetimeValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most diverse product category offering?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT CategoryID) AS NumberOfCategories FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY NumberOfCategories DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest total sales value?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSalesValue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSalesValue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers have the most products on order?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS ProductsOnOrder FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsOnOrder > 0 GROUP BY s.SupplierID ORDER BY ProductsOnOrder DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with stock levels below the reorder threshold.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee's orders have the highest average freight cost?",
        "output": "SELECT o.EmployeeID, AVG(o.Freight) AS AvgFreight FROM orders o GROUP BY o.EmployeeID ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average days between order placement and shipment for each employee.",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDays FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 3 regions by total number of orders?",
        "output": "SELECT o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipRegion ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the number of orders correlate with the employee's hire date?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders, MONTH(e.HireDate) AS HireMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, MONTH(e.HireDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with the highest number of units on order.",
        "output": "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping time for orders shipped within the same country as the company?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE ShipCountry = 'CompanyCountry';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product with the highest inventory turnover ratio.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee processed the most orders in the last quarter?",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 3 MONTH) GROUP BY employees.EmployeeID ORDER BY COUNT(orders.OrderID) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order size per employee in terms of revenue?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which month had the highest order fulfillment time in the past year?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY order_month ORDER BY avg_fulfillment_time DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is most frequently used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sales amount per order by each employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageSalesPerOrder FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales in March 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = 3 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Assess the overall performance of products based on sales volume and reorder frequency.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSalesVolume, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSalesVolume DESC, OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order for the last three months?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most extended period between hire date and first order?",
        "output": "SELECT e.EmployeeID, DATEDIFF(MIN(o.OrderDate), e.HireDate) AS HireToFirstOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY HireToFirstOrder DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method was used most frequently in Q1 of 2023?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS Order_Count FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(QUARTER FROM OrderDate) = 1 GROUP BY ShipVia ORDER BY Order_Count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average discount rate for each product.",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average age of employees in each city?",
        "output": "SELECT e.City, AVG(FLOOR(DATEDIFF(CURRENT_DATE, e.BirthDate) / 365.25)) AS AvgAge FROM employees e GROUP BY e.City",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are currently out of stock?",
        "output": "SELECT COUNT(*) AS OutOfStockProducts FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the impact of shipping costs on the sales of each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from orders in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have sales exceeding their reorder levels?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > p.ReorderLevel",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Are there any regions where the average order value is below average?",
        "output": "SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region HAVING AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) < (SELECT AVG(d.UnitPrice * d.Quantity * (1 - d.Discount)) FROM orders ord JOIN [Order Details] d ON ord.OrderID = d.OrderID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units are on order for each product?",
        "output": "SELECT ProductID, ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How much total sales revenue was generated last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product categories require the most reordering?",
        "output": "SELECT CategoryID, SUM(ReorderLevel) AS TotalReorders FROM products GROUP BY CategoryID ORDER BY TotalReorders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total discount given across all products in 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS total_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales value for each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total inventory value for each product.",
        "output": "SELECT p.ProductID, SUM(p.UnitPrice * p.UnitsInStock) AS InventoryValue FROM products p GROUP BY p.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city had the highest total sales?",
        "output": "SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on products across all orders?",
        "output": "SELECT AVG(od.Discount) * 100 AS AverageDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total inventory value of all products?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the ratio of shipped orders to required orders per employee?",
        "output": "SELECT employees.EmployeeID, SUM(CASE WHEN orders.ShippedDate IS NOT NULL THEN 1 ELSE 0 END) AS ShippedOrders, COUNT(orders.OrderID) AS TotalOrders, (SUM(CASE WHEN orders.ShippedDate IS NOT NULL THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS FLOAT)) AS ShippedToRequiredRatio FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount provided per order?",
        "output": "SELECT AVG(od.Discount) FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the supplier-wise average unit price of products?",
        "output": "SELECT s.SupplierID, s.SupplierName, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.SupplierName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List products with zero units in stock along with the supplier name.",
        "output": "SELECT ProductName, CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given on all orders?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount offered per supplier?",
        "output": "SELECT s.CompanyName, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product generated the highest total revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of orders shipped per customer each month?",
        "output": "SELECT CustomerID, DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) / COUNT(DISTINCT DATE_TRUNC('month', OrderDate)) AS AvgOrdersPerMonth FROM orders GROUP BY CustomerID, DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 cities with the highest number of late deliveries.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY LateDeliveries DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is most commonly used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS ShippingCount FROM orders GROUP BY ShipVia ORDER BY ShippingCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the breakdown of total sales by shipping country?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the monthly sales growth rate for each employee?",
        "output": "SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, ((SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) - LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY employees.EmployeeID ORDER BY EXTRACT(YEAR, MONTH FROM orders.OrderDate))) / NULLIF(LAG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY employees.EmployeeID ORDER BY EXTRACT(YEAR, MONTH FROM orders.OrderDate)), 0)) AS MonthlyGrowth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate), EXTRACT(MONTH FROM orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given on orders over the last six months?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of all products?",
        "output": "SELECT AVG(UnitPrice) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which order had the longest fulfillment time?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders ORDER BY FulfillmentTime DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order in each month of the year?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct products are ordered each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total revenue generated by each employee in the second quarter of 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify trends in customer retention rate over the past year.",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2022-01-01') AS retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value for each product category?",
        "output": "SELECT c.CategoryID, SUM(p.UnitsInStock * p.UnitPrice) AS TotalInventoryValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for February 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on products in the last quarter?",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] WHERE EXTRACT(QUARTER FROM CURRENT_DATE) - 1 = EXTRACT(QUARTER FROM TIMESTAMP '2023-01-01 00:00:00');",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost by shipping company?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers who supply more than 5 different categories.",
        "output": "SELECT SupplierID, COUNT(DISTINCT CategoryID) AS CategoryCount FROM products GROUP BY SupplierID HAVING CategoryCount > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the inventory turnover ratio compare across suppliers?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.UnitsInStock > 0 GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average freight cost per country.",
        "output": "SELECT orders.ShipCountry, AVG(orders.Freight) AS AvgFreight FROM orders GROUP BY orders.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 5 best-selling products by quantity.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of all products shipped to each country?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS Total_Quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the average quantities ordered for each product?",
        "output": "SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month has the highest number of late shipments?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY LateShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the maximum single order value and the supplier involved.",
        "output": "SELECT MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MaxOrderValue, s.CompanyName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.CompanyName ORDER BY MaxOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the monthly sales trend for each employee.",
        "output": "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders have the highest discount applied?",
        "output": "SELECT OrderID FROM [Order Details] WHERE Discount = (SELECT MAX(Discount) FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most popular shipping method?",
        "output": "SELECT ShipVia, COUNT(*) AS Shipments FROM orders GROUP BY ShipVia ORDER BY Shipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time difference between the required date and the shipped date for delayed orders?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred for each shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the most products that are currently not discontinued?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumProducts FROM products WHERE Discontinued = 0 GROUP BY SupplierID ORDER BY NumProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many suppliers have their contact details missing?",
        "output": "SELECT COUNT(*) AS MissingContacts FROM suppliers WHERE ContactName IS NULL OR Phone IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the trend of the number of orders over the months?",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(*) AS NumberOfOrders FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have been placed but not yet shipped?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which country has the most sales handled by an employee?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CountrySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry ORDER BY CountrySales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly product performance based on sales quantities.",
        "output": "SELECT P.ProductID, EXTRACT(YEAR FROM O.OrderDate) AS Year, EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.Quantity) AS MonthlyPerformance FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN orders O ON OD.OrderID = O.OrderID GROUP BY P.ProductID, Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount provided across all orders for a particular product?",
        "output": "SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with no discount offered at all times.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE Discount > 0);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales in terms of quantity in Q1 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products are ordered the most with a discount applied?",
        "output": "SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How often are different customer demographic segments purchasing?",
        "output": "SELECT customerDemographics.CustomerTypeID, COUNT(orders.OrderID) AS order_count FROM customerCustomerDemo JOIN orders ON customerCustomerDemo.CustomerID = orders.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerTypeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between order date and required date?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AvgDaysRequired FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time on a monthly basis?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories generated the highest sales in the last quarter?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY category_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales for each month?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM')",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product had the highest sales volume in the last month?",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 month') GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders are delivered late?",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate > RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID)) AS LatePercentage FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend of order volume over the past two years?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderVolume FROM orders WHERE OrderDate >= '2021-01-01' AND OrderDate < '2023-01-01' GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most expensive product?",
        "output": "SELECT p.ProductName, p.UnitPrice, p.SupplierID FROM products p ORDER BY p.UnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top three products by total revenue.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC FETCH FIRST 3 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipping costs across different regions?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country had the most on-time deliveries last year?",
        "output": "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipCountry ORDER BY OnTimeDeliveries DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum freight cost recorded for a single order?",
        "output": "SELECT MAX(Freight) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers who haven't supplied any products.",
        "output": "SELECT SupplierID FROM suppliers WHERE SupplierID NOT IN (SELECT DISTINCT SupplierID FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers who have not supplied any products.",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.ProductID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the most sales in January?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = 1 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated from sales this month?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity of units ordered per product?",
        "output": "SELECT products.ProductName, AVG([Order Details].Quantity) AS AverageQuantityOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped by each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 products by sales revenue in the last quarter.",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders did not have a shipped date, and thus could be delayed?",
        "output": "SELECT COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest total sales revenue?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-MM') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-MM') ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the most orders shipped to it in 2023?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY ShipCity ORDER BY order_count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total quantity of each product sold across all orders.",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has been with the company the longest?",
        "output": "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees ORDER BY HireDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the highest increase in sales compared to the previous year?",
        "output": "SELECT employees.EmployeeID, SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) AS SalesIncrease FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY SalesIncrease DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the median fulfillment time for orders shipped to each country?",
        "output": "SELECT ShipCountry, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders shipped within the same country?",
        "output": "SELECT SUM(CASE WHEN ShipCountry = 'YourCountry' THEN 1 ELSE 0 END) / COUNT(OrderID) AS SameCountryShippingRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees with orders exceeding $10,000 in total order value.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN (SELECT OrderID, SUM(UnitPrice * Quantity * (1 - Discount)) AS OrderValue FROM [Order Details] GROUP BY OrderID) ov ON o.OrderID = ov.OrderID WHERE ov.OrderValue > 10000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend in average shipping costs over time?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top three employees with the most orders completed in the last month.",
        "output": "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE MONTH(o.OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that are currently out of stock?",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average unit price of products by supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have been discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products in stock for each supplier?",
        "output": "SELECT p.SupplierID, SUM(p.UnitsInStock) AS TotalStock FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer received the most discounts?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average discount applied per order.",
        "output": "SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a sales quantity above their reorder level?",
        "output": "SELECT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName HAVING SUM([Order Details].Quantity) > products.ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time in April 2023?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2023-04-01' AND '2023-04-30';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have not made any sales in the last quarter.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Analyze the sales impact of employees who report to the same manager.",
        "output": "SELECT e.ReportsTo, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ManagerSalesImpact FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.ReportsTo IS NOT NULL GROUP BY e.ReportsTo;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify which products are frequently ordered together.",
        "output": "SELECT od1.ProductID, od2.ProductID, COUNT(*) as frequency FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID <> od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY frequency DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend in average freight cost over the past six months?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD('month', -6, CURRENT_DATE) GROUP BY Month ORDER BY Month DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory turnover ratio on a monthly basis?",
        "output": "SELECT EXTRACT(YEAR FROM od.OrderDate) AS Year, EXTRACT(MONTH FROM od.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock > 0 GROUP BY EXTRACT(YEAR FROM od.OrderDate), EXTRACT(MONTH FROM od.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total discounts provided by each employee annually.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscounts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the trend in monthly sales for each region?",
        "output": "SELECT MONTH(orders.OrderDate) AS OrderMonth, employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth, employees.Region",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top five most expensive products available?",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For which orders was the shipping time more than 7 days?",
        "output": "SELECT OrderID FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time by shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have managed the highest total order value without any discounts.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.Quantity * od.UnitPrice * od.Discount) = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify customers with the highest total order value this year.",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE) AND CURRENT_DATE GROUP BY o.CustomerID ORDER BY TotalOrderValue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 5 performing employees by sales volume?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total discount given to each customer by order.",
        "output": "SELECT o.CustomerID, od.OrderID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID, od.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date every month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END)::DECIMAL / COUNT(OrderID) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the most common shipping recipient name in the database.",
        "output": "SELECT ShipName, COUNT(*) AS Count FROM orders GROUP BY ShipName ORDER BY Count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the retention rate of customers acquired in 2022 in 2023?",
        "output": "(SELECT COUNT(DISTINCT o2023.CustomerID) FROM orders o2023 WHERE o2023.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND o2023.CustomerID IN (SELECT DISTINCT o2022.CustomerID FROM orders o2022 WHERE o2022.OrderDate BETWEEN '2022-01-01' AND '2022-12-31')) / (SELECT COUNT(DISTINCT o2022.CustomerID) FROM orders o2022 WHERE o2022.OrderDate BETWEEN '2022-01-01' AND '2022-12-31')",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many unique products are ordered each month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, COUNT(DISTINCT od.ProductID) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers by total sales.",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Does a higher freight cost correlate with faster delivery?",
        "output": "SELECT Freight, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY Freight ORDER BY Freight;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products that are below reorder level but have no pending orders.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total revenue generated by each category based on sales.",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the performance of each product based on sales quantity?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY total_quantity DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the [Order Details] table's contribution to the total revenue?",
        "output": "SELECT SUM(Quantity * UnitPrice) AS TotalOrderDetailsRevenue FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the product with the highest revenue from orders.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate by country?",
        "output": "SELECT ShipCountry, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS on_time_delivery_rate FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were shipped on time in the last quarter?",
        "output": "SELECT COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 END) * 100.0 / COUNT(o.OrderID) AS on_time_delivery_rate FROM orders o WHERE o.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many days on average does it take to fulfill an order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to all orders?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the most frequently ordered product for each supplier.",
        "output": "SELECT SupplierID, ProductID, MAX(OrderFrequency) AS MaxOrderFrequency FROM (SELECT p.SupplierID, od.ProductID, COUNT(*) AS OrderFrequency FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID, od.ProductID) AS ProductOrders GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city shipped the most orders last year?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumOrders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipCity ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have a shipping cost above the average for their shipping method?",
        "output": "SELECT COUNT(OrderID) FROM orders o1 WHERE Freight > (SELECT AVG(Freight) FROM orders o2 WHERE o2.ShipVia = o1.ShipVia);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per employee?",
        "output": "SELECT EmployeeID, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How much total discount has been given for each product?",
        "output": "SELECT ProductName, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscountGiven FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0 GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the typical quantity per unit across all products?",
        "output": "SELECT AVG(CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS DECIMAL)) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average discount given on all orders.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the most expensive shipping on average?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the inventory turnover ratio for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the seasonal trend of product sales over the last two years?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY month, products.ProductID ORDER BY month, sales_volume DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many products have never been ordered?",
        "output": "SELECT p.ProductID FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the lowest average product price.",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AveragePrice ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a stock below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees grouped by title?",
        "output": "SELECT Title, AVG(Salary) AS AvgSalary FROM employees GROUP BY Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine which shipping country has the lowest on-time delivery rate.",
        "output": "SELECT ShipCountry, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveryRate ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the largest order by value?",
        "output": "SELECT o.EmployeeID, o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID, o.OrderID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the highest average shipping cost in the last year?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the monthly sales quantities for each product in the past year?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, p.ProductName, SUM(od.Quantity) AS MonthlyQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month, p.ProductName ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped late?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does shipping cost correlate with order value in 2023?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the shipping cost vary by country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry ORDER BY AverageFreight;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price for products in each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with unit prices more than double their average category price.",
        "output": "SELECT p.ProductName FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.UnitPrice > 2 * (SELECT AVG(p1.UnitPrice) FROM products p1 WHERE p1.CategoryID = p.CategoryID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many different titles are held by employees, and what are they?",
        "output": "SELECT DISTINCT Title FROM employees;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percent of orders were delivered on time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the maximum, minimum, and average discount given on orders?",
        "output": "SELECT MAX(Discount) AS MaxDiscount, MIN(Discount) AS MinDiscount, AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find customers with orders that have been delayed more than a week.",
        "output": "SELECT c.CustomerID FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE DATEDIFF(DAY, RequiredDate, ShippedDate) > 7;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most ordered product by quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the lowest average lead time?",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName ORDER BY AvgLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify suppliers that provide the top-rated product.",
        "output": "SELECT SupplierID FROM products WHERE ProductID = (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handles orders with the maximum average freight cost?",
        "output": "SELECT e.EmployeeID, AVG(o.Freight) AS AvgFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are there with units in stock below reorder level?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping region had the most orders?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipRegion ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer last quarter?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost incurred by shipments handled by each employee?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders by shipment city?",
        "output": "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight cost by country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many shipments were sent to each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY ShipCountry",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 most ordered products?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS OrderQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY OrderQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month experienced the highest shipping cost?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS month, SUM(Freight) AS total_shipping_cost FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY total_shipping_cost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the highest number of orders shipped on time?",
        "output": "SELECT CustomerID, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeOrders FROM orders GROUP BY CustomerID ORDER BY OnTimeOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most number of different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country has the highest total sales revenue?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of orders shipped late?",
        "output": "SELECT ShipCity, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY LateOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the highest number of orders placed?",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY orders.ShipCity ORDER BY order_count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the product with the lowest inventory turnover ratio?",
        "output": "SELECT products.ProductID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID HAVING SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) IS NOT NULL ORDER BY SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in the year 2022?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered but are now discontinued?",
        "output": "SELECT DISTINCT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for June 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compare the total sales of employees who joined in the last year to those who have been with the company longer.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as RecentSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the number of orders managed by each employee.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per shipment method?",
        "output": "SELECT o.ShipVia, AVG(o.Freight) AS AverageFreight FROM orders o GROUP BY o.ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What percentage of orders were shipped late for each employee?",
        "output": "SELECT e.EmployeeID, COUNT(CASE WHEN o.ShippedDate > o.RequiredDate THEN o.OrderID END) AS LateOrders, (CAST(COUNT(CASE WHEN o.ShippedDate > o.RequiredDate THEN o.OrderID END) AS DECIMAL) / COUNT(o.OrderID)) * 100 AS LatePercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the highest single order value recorded?",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the percentage of discontinued products with sales in Q1 2023.",
        "output": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN products.Discontinued = 1 THEN [Order Details].ProductID END) / NULLIF(COUNT(DISTINCT [Order Details].ProductID), 0) AS discontinued_product_sales_percentage FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the retention rate of customers from January 2023 to December 2023.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN orders.CustomerID END) * 1.0 / COUNT(DISTINCT orders.CustomerID)) AS RetentionRate FROM orders WHERE orders.OrderDate < '2023-01-01' OR orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have products that are all discontinued?",
        "output": "SELECT c.CategoryID FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID HAVING SUM(CAST(p.Discontinued AS INT)) = COUNT(p.ProductID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which day of the week has the highest order volume?",
        "output": "SELECT EXTRACT(DOW FROM OrderDate) AS DayOfWeek, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DayOfWeek ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of products sold by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top three employees with the highest number of orders?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for each shipping method across all months?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped with each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units in stock for all products?",
        "output": "SELECT SUM(UnitsInStock) AS TotalUnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top-performing employees in terms of sales in each country?",
        "output": "SELECT e.EmployeeID, e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Country ORDER BY e.Country, TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest employee sales?",
        "output": "SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CitySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City ORDER BY CitySales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are sold at a price higher than their unit price in the order details?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.UnitPrice > p.UnitPrice",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are delivered on or before the required date each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which countries have the fastest-growing order volume trend?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderVolume FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY ShipCountry ORDER BY OrderVolume DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average order processing time for each employee.",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgProcessingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost per country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 3 suppliers based on their product sales.",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SupplierSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID ORDER BY SupplierSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the total quantity ordered for each supplier.",
        "output": "SELECT s.SupplierID, SUM(od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the peak order times during weekdays?",
        "output": "SELECT EXTRACT(HOUR FROM orders.OrderDate) AS hour, COUNT(orders.OrderID) as order_count FROM orders WHERE EXTRACT(DOW FROM orders.OrderDate) IN (1, 2, 3, 4, 5) GROUP BY hour ORDER BY order_count DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill an order each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS fulfillment_time FROM orders GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average time taken from order placement to shipping for each employee?",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee handle in the last month?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrdersLastMonth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled on-time during 2023?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.ShippedDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have reached their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the sales growth for each product category over the last year?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS sales_growth FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the inventory turnover ratio for each product category.",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM products JOIN categories ON products.CategoryID = categories.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost associated with orders handled by each employee?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value for each country?",
        "output": "SELECT o.ShipCountry, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the distribution of order fulfillment time by month?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o GROUP BY OrderYear, OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers who have not placed an order in the last year.",
        "output": "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees who have not met their sales targets in the last month.",
        "output": "SELECT employees.EmployeeID FROM employees LEFT JOIN (SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY EmployeeID) AS MonthlySalesData ON employees.EmployeeID = MonthlySalesData.EmployeeID WHERE MonthlySalesData.MonthlySales IS NULL OR MonthlySalesData.MonthlySales < 10000",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the highest number of unique products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS UniqueProducts FROM products GROUP BY SupplierID ORDER BY UniqueProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products that are on order?",
        "output": "SELECT AVG(UnitPrice) FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the average units in stock for each supplier?",
        "output": "SELECT SupplierID, AVG(UnitsInStock) AS AverageUnitsInStock FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost of all shipped orders?",
        "output": "SELECT SUM(orders.Freight) AS Total_Freight_Cost FROM orders WHERE orders.ShippedDate IS NOT NULL",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales for each month in 2023?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers whose products are consistently reordered (reorder level greater than 50).",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.ReorderLevel > 50 GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "For each manager, what is the total sales made by their subordinates?",
        "output": "SELECT m.EmployeeID AS ManagerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ManagerSales FROM employees m JOIN employees s ON m.EmployeeID = s.ReportsTo JOIN orders o ON s.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY m.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify suppliers with the most products that have been discontinued.",
        "output": "SELECT SupplierID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average time taken to ship orders processed by each employee?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have been reordered more than twice their reorder level.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > ReorderLevel * 2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products where reorder levels need to be increased, based on current stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of discontinued products supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest number of orders processed by employees?",
        "output": "SELECT employees.City, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City ORDER BY TotalOrders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 products by total sales?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the most units on order?",
        "output": "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID ORDER BY TotalUnitsOnOrder DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine which employee has served the most unique customers.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT o.CustomerID) as UniqueCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY UniqueCustomers DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped using each shipping method last quarter?",
        "output": "SELECT ShipVia, COUNT(orders.OrderID) AS number_of_orders FROM orders WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 3 MONTH) GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category of products has the highest average unit price?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY CategoryID ORDER BY AverageUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are currently below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products that have sales only during specific months.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING COUNT(DISTINCT EXTRACT(MONTH FROM od.OrderDate)) = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier delivers to the most diverse set of regions?",
        "output": "SELECT s.SupplierID, COUNT(DISTINCT o.ShipRegion) AS RegionCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY s.SupplierID ORDER BY RegionCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handled the most number of orders in the past year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top three products sold by the employee with the highest sales?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.EmployeeID = (SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1) GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total inventory value per supplier.",
        "output": "SELECT s.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products generated the highest sales volume in the last month?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY sales_volume DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total freight costs for each supplier's products.",
        "output": "SELECT p.SupplierID, SUM(o.Freight) AS TotalFreight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How much revenue is generated from orders placed in the last month?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) AS Revenue FROM [Order Details] od WHERE od.OrderID IN (SELECT o.OrderID FROM orders o WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time by shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the average order value differ across customer regions?",
        "output": "SELECT c.Region, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders o ON [Order Details].OrderID = o.OrderID JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY c.Region",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value for each product?",
        "output": "SELECT ProductName, UnitsInStock * UnitPrice AS InventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales last month?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 performing products in terms of quantity sold?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID ORDER BY TotalSold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated by each product category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the countries with the highest number of orders.",
        "output": "SELECT ShipCountry, COUNT(OrderID) FROM orders GROUP BY ShipCountry ORDER BY COUNT(OrderID) DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the on-time delivery rate vary between regions?",
        "output": "SELECT ShipRegion, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales by supplier?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have been ordered more than 1000 times?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS NumberOfProducts FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 1000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many discontinued products does each supplier have?",
        "output": "SELECT p.SupplierID, COUNT(*) AS DiscontinuedProductCount FROM products p WHERE p.Discontinued = 1 GROUP BY p.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier has the most products that are discontinued?",
        "output": "SELECT SupplierID, COUNT(*) FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the most different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders are shipped within the same country as the supplier?",
        "output": "SELECT COUNT(*) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.ShipCountry = s.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given on orders each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest average order value this year?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY AverageOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees had orders delayed beyond the required date?",
        "output": "SELECT e.FirstName, e.LastName, COUNT(o.OrderID) AS DelayedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the highest and lowest salary for employees in each city?",
        "output": "SELECT City, MAX(Salary) AS MaxSalary, MIN(Salary) AS MinSalary FROM employees GROUP BY City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the highest average unit price?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID ORDER BY AveragePrice DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the highest average freight cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia ORDER BY AverageFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have a discount of more than 20%?",
        "output": "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer demographics have the highest average order value?",
        "output": "SELECT customerDemographics.CustomerDesc, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc ORDER BY avg_order_value DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which territories have the highest sales performance?",
        "output": "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify categories with the highest number of discontinued products.",
        "output": "SELECT CategoryID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products ordered last month that are now discontinued.",
        "output": "SELECT p.ProductName FROM products p WHERE p.Discontinued = 1 AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od WHERE EXTRACT(MONTH FROM OrderID) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM OrderID) = EXTRACT(YEAR FROM CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied per order?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units ordered for each product with a discount greater than 10%?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE Discount > 0.1 GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which cities have the most sales attributed to each employee?",
        "output": "SELECT e.EmployeeID, o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipCity",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount applied to orders handled by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average salary of employees associated with high sales performance?",
        "output": "SELECT AVG(e.Salary) AS avg_salary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > (SELECT AVG(employee_sales) FROM (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) AS employee_sales FROM [Order Details] od2 JOIN orders o2 ON od2.OrderID = o2.OrderID JOIN employees e2 ON o2.EmployeeID = e2.EmployeeID GROUP BY e2.EmployeeID) AS subquery)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average discount given per product.",
        "output": "SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products by sales quantity?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the distribution of order quantities across different products?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the product names with zero units in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order during each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Year, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have sold the most this year?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductName ORDER BY TotalSold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most products out of stock?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0 GROUP BY suppliers.CompanyName ORDER BY COUNT(products.ProductID) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the products with the highest discount offered and which suppliers provide them.",
        "output": "SELECT p.ProductID, p.ProductName, s.SupplierID, s.CompanyName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]) ORDER BY od.Discount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were delivered on time in 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) AS on_time_orders FROM orders WHERE YEAR(orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have more than one order in the system?",
        "output": "SELECT COUNT(*) FROM (SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 1) subquery;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers based on lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 best-selling products last month.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to deliver orders across different regions?",
        "output": "SELECT region.RegionDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_delivery_time FROM orders JOIN region ON orders.ShipRegion = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by the team led by each manager?",
        "output": "SELECT m.EmployeeID AS ManagerID, COUNT(o.OrderID) FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY m.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have reached their reorder level and need restocking?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock <= p.ReorderLevel AND p.Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have products that are currently on order?",
        "output": "SELECT DISTINCT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have not had any orders this year?",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) != YEAR(CURRENT_DATE) OR orders.OrderID IS NULL GROUP BY suppliers.CompanyName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product is ordered the most by customers in Germany?",
        "output": "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'Germany' GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest number of units on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products ORDER BY UnitsOnOrder DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied per product?",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value per customer?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest reorder levels?",
        "output": "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the products with the greatest difference between units in stock and units on order.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock - UnitsOnOrder = (SELECT MAX(UnitsInStock - UnitsOnOrder) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee within a specific month?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2022-05' GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find products with zero units on order but high demand.",
        "output": "SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder = 0 AND UnitsInStock > 0 ORDER BY UnitsInStock DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the overall average discount applied across all sales?",
        "output": "SELECT AVG(Discount) AS OverallAvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping destination by city?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS DestCount FROM orders GROUP BY ShipCity ORDER BY DestCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much sales revenue did each employee generate in January 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the highest inventory turnover ratio.",
        "output": "SELECT ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(UnitsInStock), 0)) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for each shipping method in the current year?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE '2023-01-01' GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most common city for order shipment?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have exceeded their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "List all employees whose sales territories include New York and calculate their total sales.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE territories.TerritoryDescription LIKE '%New York%' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products by revenue in 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY revenue DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly performance of each product based on sales?",
        "output": "SELECT p.ProductID, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlyPerformance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductID, MONTH(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have orders that are consistently shipped late?",
        "output": "SELECT p.SupplierID, COUNT(*) AS LateOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate > o.RequiredDate GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio by category in the current year?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of total orders have been shipped by each shipping method?",
        "output": "SELECT ShipVia, COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS Percentage FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales per month for each employee?",
        "output": "SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been placed by customers in each country?",
        "output": "SELECT customers.Country, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What products have zero units on order?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have processed more than 100 orders.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING OrderCount > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate from Q1 to Q2 of 2023?",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer has the highest total sales?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY CustomerSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top 3 regions with the slowest average shipping times?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY ShipRegion ORDER BY AvgShippingTime DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales values for each product category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the cumulative sales by category for this year.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalCategorySales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discounted amount given across all products.",
        "output": "SELECT SUM((Discount * UnitPrice * Quantity)) AS TotalDiscountedAmount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide products with below-average units in stock?",
        "output": "SELECT p.SupplierID, p.ProductName FROM products p WHERE p.UnitsInStock < (SELECT AVG(UnitsInStock) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How much freight cost is incurred per supplier?",
        "output": "SELECT s.SupplierID, SUM(o.Freight) AS TotalFreight FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to each region?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the percentage of discontinued products in each category?",
        "output": "SELECT CategoryID, 100.0 * COUNT(CASE WHEN Discontinued = 1 THEN 1 END) / COUNT(*) AS DiscontinuedPercentage FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many different suppliers provide products in each category?",
        "output": "SELECT CategoryID, COUNT(DISTINCT SupplierID) AS NumberOfSuppliers FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the sales quantity variance month-over-month for each product.",
        "output": "SELECT ProductID, (SUM(CASE WHEN EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) THEN Quantity ELSE 0 END) - SUM(CASE WHEN EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 THEN Quantity ELSE 0 END)) AS SalesVariance FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which discontinued products have remaining stock?",
        "output": "SELECT ProductID, ProductName, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT products.ProductName, COUNT([Order Details].ProductID) AS Order_Count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY Order_Count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the impact of employee turnover on sales over the last three years.",
        "output": "SELECT e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.HireDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 YEAR) AND CURDATE() GROUP BY e.HireDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the monthly sales trend for each employee over the past year?",
        "output": "SELECT YEAR(o.OrderDate) AS OrderYear, MONTH(o.OrderDate) AS OrderMonth, e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE GROUP BY YEAR(o.OrderDate), MONTH(o.OrderDate), e.EmployeeID, e.FirstName, e.LastName ORDER BY OrderYear, OrderMonth",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the most frequently provided quantity per unit?",
        "output": "SELECT QuantityPerUnit, COUNT(*) AS Frequency FROM products GROUP BY QuantityPerUnit ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers have placed the most orders?",
        "output": "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the unit price of the most frequently ordered product?",
        "output": "SELECT p.ProductName, od.UnitPrice FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, od.UnitPrice ORDER BY COUNT(od.ProductID) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest shipping cost on average?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total sales revenue by each category of products.",
        "output": "SELECT categories.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total units ordered for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalUnitsOrdered FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which regions generated the most sales revenue?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were delivered on or before the required date each month?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_FORMAT(ShippedDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the 3 employees with the fastest average order fulfillment time.",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AvgFulfillmentTime ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average customer lifetime value?",
        "output": "SELECT AVG(customer_lifetime_value) FROM (SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID) AS customer_values",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the most orders?",
        "output": "SELECT CustomerID, COUNT(*) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount offered for each product?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the percentage of products that are currently discontinued?",
        "output": "SELECT (CAST(SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(ProductID)) * 100 AS DiscontinuedPercentage FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of delayed shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCity ORDER BY DelayedShipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average discount applied to products.",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have managed the most number of other employees.",
        "output": "SELECT e1.FirstName, e1.LastName, COUNT(e2.EmployeeID) AS ManageCount FROM employees e1 JOIN employees e2 ON e1.EmployeeID = e2.ReportsTo GROUP BY e1.EmployeeID ORDER BY ManageCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers who have not placed any orders in the last six months.",
        "output": "SELECT CustomerID, CompanyName FROM customers WHERE CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL '6 MONTH')",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the highest number of late shipments.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS LateShipments FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY LateShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee in the current year?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in the past year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY CustomerID ORDER BY TotalOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders did not have a shipped date?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the earliest and latest order date for each customer?",
        "output": "SELECT c.CustomerID, MIN(o.OrderDate) AS FirstOrder, MAX(o.OrderDate) AS LastOrder FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the fastest average lead time?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.SupplierID ORDER BY AvgLeadTime ASC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employees whose birth month is the current month.",
        "output": "SELECT e.EmployeeID FROM employees e WHERE MONTH(e.BirthDate) = MONTH(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who have never placed an order.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.CustomerID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the peak month for order placements.",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(*) AS NumberOfOrders FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate) ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each category?",
        "output": "SELECT c.CategoryID, c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID, c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most common shipping city for orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the best lead time for product delivery in 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID ORDER BY lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier to deliver their products?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM products p JOIN orders o ON p.SupplierID = o.OrderID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does employee sales performance vary by month for each sales territory?",
        "output": "SELECT territories.TerritoryDescription, employees.EmployeeID, EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY territories.TerritoryDescription, employees.EmployeeID, EXTRACT(MONTH FROM orders.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories are the most frequently ordered?",
        "output": "SELECT CategoryID, COUNT(*) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID ORDER BY OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were made with a discount in the past year?",
        "output": "SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 AND o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest number of units in stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock = (SELECT MAX(UnitsInStock) FROM products)",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the effect of discount on total sales revenue.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS RevenueWithDiscount, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS RevenueWithoutDiscount FROM [Order Details];",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for the past month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the revenue generated by each product category.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average unit price for products in each category.",
        "output": "SELECT CategoryID, AVG(UnitPrice) FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees work in multiple territories?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT employeeTerritories.TerritoryID) AS territories_count FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employees.EmployeeID HAVING territories_count > 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region had the highest number of orders?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipRegion ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipment times across different regions?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShipmentTime FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost for orders shipped to the USA?",
        "output": "SELECT AVG(Freight) AS AverageFreight FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find orders that have never been shipped.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products sold by each employee?",
        "output": "SELECT EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the largest discount applied to their orders?",
        "output": "SELECT employees.EmployeeID, [Order Details].Discount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount = (SELECT MAX([Order Details].Discount) FROM [Order Details]) LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the top-selling product in terms of quantity?",
        "output": "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee fulfilled the most orders in the last year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were shipped after the required date?",
        "output": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders)) AS LateOrderPercentage FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were processed by each employee?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month this year?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATE_PART('year', o.OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY DATE_TRUNC('month', o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly inventory turnover ratio for each product.",
        "output": "SELECT p.ProductID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month with the highest number of orders placed.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS OrderCount FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products based on sales quantity in the last quarter?",
        "output": "SELECT P.ProductID, P.ProductName, SUM(OD.Quantity) AS SalesQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE OD.OrderDate BETWEEN DATEADD(quarter, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY P.ProductID, P.ProductName ORDER BY SalesQuantity DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly product sales performance index.",
        "output": "SELECT p.ProductID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) as SalesPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, YEAR(o.OrderDate), MONTH(o.OrderDate) ORDER BY SalesPerformance DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the most frequent late deliveries.",
        "output": "SELECT suppliers.CompanyName, COUNT(*) AS LateDeliveries FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY suppliers.CompanyName ORDER BY LateDeliveries DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of orders per country?",
        "output": "SELECT Country, AVG(OrderCount) AS AvgOrders FROM (SELECT o.CustomerID, c.Country, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country, o.CustomerID) AS subquery GROUP BY Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were fulfilled by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for each month in 2023?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers from a specific region along with their contact names.",
        "output": "SELECT suppliers.CompanyName, suppliers.ContactName FROM suppliers WHERE suppliers.Region = 'specific region'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before their required dates for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(*)) * 100 AS OnTimeRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have been discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the longest tenure in the company.",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS FullName, DATEDIFF(CURDATE(), employees.HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common city among shipping addresses?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products have been discontinued and what was their total sales performance?",
        "output": "SELECT COUNT(DISTINCT products.ProductID) AS discontinued_products_count, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most frequently ordered product for each customer.",
        "output": "SELECT c.CustomerID, od.ProductID, COUNT(od.ProductID) AS Frequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID, od.ProductID HAVING COUNT(od.ProductID) = (SELECT MAX(Freq) FROM (SELECT od2.ProductID, COUNT(od2.ProductID) AS Freq FROM orders o2 JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID WHERE o2.CustomerID = c.CustomerID GROUP BY od2.ProductID) AS Temp) ORDER BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in May 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = '2023-05'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month with the highest sales revenue.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were canceled or modified?",
        "output": "SELECT COUNT(OrderID) AS CanceledOrModifiedOrders FROM orders WHERE (RequiredDate IS NULL OR ShippedDate <> RequiredDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the distribution of order quantities?",
        "output": "SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine which employees have given the highest average discount.",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find all suppliers located in a specified city and list their contact details.",
        "output": "SELECT ContactName, ContactTitle, Phone FROM suppliers WHERE City = 'specified city';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What product has the highest sales but is discontinued?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1 GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the countries with the most suppliers.",
        "output": "SELECT Country, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products are discontinued, and what is their total inventory value?",
        "output": "SELECT COUNT(products.ProductID) AS discontinued_products_count, SUM(products.UnitsInStock * products.UnitPrice) AS total_inventory_value FROM products WHERE products.Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales volume in 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the monthly sales growth for each employee over the past 6 months.",
        "output": "SELECT employees.EmployeeID, YEAR(orders.OrderDate) AS Year, MONTH(orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE) GROUP BY employees.EmployeeID, YEAR(orders.OrderDate), MONTH(orders.OrderDate) ORDER BY employees.EmployeeID, Year, Month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of total sales is attributed to each product?",
        "output": "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details]) * 100 AS PercentageOfSales FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales for each product this month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderID) = YEAR(CURRENT_DATE) AND MONTH(od.OrderID) = MONTH(CURRENT_DATE) GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the frequency of orders shipped versus not shipped by month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(*) FILTER (WHERE ShippedDate IS NOT NULL) AS Shipped, COUNT(*) FILTER (WHERE ShippedDate IS NULL) AS NotShipped FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the product with the highest unit price that is still active.",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 0 ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between the freight cost and the fulfillment time?",
        "output": "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the top 3 categories by total sales revenue.",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most ordered product by quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each month in 2022?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for each product for the current month.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE MONTH(CURRENT_DATE) = EXTRACT(MONTH FROM od.OrderDate) AND YEAR(CURRENT_DATE) = EXTRACT(YEAR FROM od.OrderDate) GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have made the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY CustomerID ORDER BY NumOrders DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend in order fulfillment time over the past year?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY MONTH(orders.OrderDate) ORDER BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated each month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the average number of products per order.",
        "output": "SELECT AVG(Count) FROM (SELECT COUNT(ProductID) AS Count FROM [Order Details] GROUP BY OrderID) AS ProductCounts;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have never received a discounted product?",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(CASE WHEN od.Discount > 0 THEN 1 ELSE 0 END) = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many unique products did each employee sell?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the top 5 products by sales quantity.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify orders with the highest discount applied.",
        "output": "SELECT od.OrderID, od.Discount FROM [Order Details] od WHERE od.Discount = (SELECT MAX(od2.Discount) FROM [Order Details] od2) ORDER BY od.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have sales exceeding $10,000 in total?",
        "output": "SELECT COUNT(*) FROM (SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 10000) AS subquery;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the inventory turnover ratio vary by product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the hire dates of employees who have achieved the highest sales.",
        "output": "SELECT employees.HireDate FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.HireDate, employees.EmployeeID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What's the performance of each product based on sales quantity this month?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSalesQuantity FROM [Order Details] WHERE EXTRACT(YEAR FROM CURRENT_DATE) = EXTRACT(YEAR FROM OrderDate) AND EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM OrderDate) GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders?",
        "output": "SELECT orders.CustomerID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY orders.CustomerID ORDER BY NumberOfOrders DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average product price?",
        "output": "SELECT s.CompanyName, AVG(p.UnitPrice) AS AvgPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY AvgPrice DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 3 products by sales revenue.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with the highest discrepancy between units in stock and units on order.",
        "output": "SELECT ProductID, ABS(UnitsInStock - UnitsOnOrder) AS Discrepancy FROM products ORDER BY Discrepancy DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 products by sales quantity.",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers based on the number of orders they placed.",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the number of orders placed each month this year.",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY MONTH(OrderDate)",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount offered per order?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by customers from each country?",
        "output": "SELECT c.Country, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees report to each manager?",
        "output": "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS ReportCount FROM employees e WHERE e.ReportsTo IS NOT NULL GROUP BY e.ReportsTo;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products whose reorder level is higher than the number of units in stock.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which countries have the highest number of customers?",
        "output": "SELECT Country, COUNT(*) AS CustomerCount FROM customers GROUP BY Country ORDER BY CustomerCount DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the supplier with the longest average lead time for a specific product.",
        "output": "SELECT p.SupplierID, p.ProductID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID, p.ProductID ORDER BY AvgLeadTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many returning customers did we have in the first half of 2023?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' AND orders.CustomerID IN (SELECT DISTINCT orders.CustomerID FROM orders WHERE orders.OrderDate < '2023-01-01')",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product have been sold in the current month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the turnover rate of inventory for each product category?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 3 employees based on the total number of units sold?",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY SUM(od.Quantity) DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest stock units and what is its supplier?",
        "output": "SELECT products.ProductName, suppliers.CompanyName, products.UnitsInStock FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID ORDER BY products.UnitsInStock DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the discount rate affect total sales revenue?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSalesRevenue, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that need reordering where units in stock are below reorder level.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average reorder level for products provided by each supplier?",
        "output": "SELECT p.SupplierID, AVG(p.ReorderLevel) AS AverageReorderLevel FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per order in the database?",
        "output": "SELECT AVG(Freight) AS AverageFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of orders per month per customer?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) / COUNT(DISTINCT EXTRACT(YEAR FROM o.OrderDate) || '-' || EXTRACT(MONTH FROM o.OrderDate)) AS AvgOrdersPerMonth FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the highest total freight cost over all their orders?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the difference in sales between the current and previous month?",
        "output": "SELECT (SUM(CASE WHEN MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END)) AS SalesDifference FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue generated from orders that included a discount?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employees whose orders have the shortest shipping time.",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgShippingTime ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the discontinued products that still have inventory.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the number of distinct countries suppliers are located in.",
        "output": "SELECT COUNT(DISTINCT Country) AS NumberOfCountries FROM suppliers;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the three categories with the most products.",
        "output": "SELECT c.CategoryName, COUNT(p.ProductID) AS ProductCount FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName ORDER BY ProductCount DESC FETCH FIRST 3 ROWS ONLY;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total discount given to each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the sales growth rate by employee for each month?",
        "output": "SELECT E.EmployeeID, DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, (SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) - LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount))) OVER (PARTITION BY E.EmployeeID ORDER BY DATE_FORMAT(O.OrderDate, '%Y-%m'))) / NULLIF(LAG(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount))) OVER (PARTITION BY E.EmployeeID ORDER BY DATE_FORMAT(O.OrderDate, '%Y-%m')), 0) AS GrowthRate FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID, DATE_FORMAT(O.OrderDate, '%Y-%m') ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers whose products have not been discontinued.",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly inventory turnover ratio for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have generated the most sales in their respective territories?",
        "output": "SELECT e.EmployeeID, t.TerritoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders o ON [Order Details].OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID JOIN employeeTerritories et ON e.EmployeeID = et.EmployeeID JOIN territories t ON et.TerritoryID = t.TerritoryID GROUP BY e.EmployeeID, t.TerritoryID ORDER BY total_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales quantity in the last quarter?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_quantity DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the least profitable products based on sales minus discounts.",
        "output": "SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice * (1 - OD.Discount)) AS Profit FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductName ORDER BY Profit ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders have a shipping cost over $100 this month?",
        "output": "SELECT COUNT(CASE WHEN Freight > 100 THEN 1 END) * 100.0 / COUNT(OrderID) AS PercentageOver100 FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 countries with the highest order volume.",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderVolume FROM orders o GROUP BY o.ShipCountry ORDER BY OrderVolume DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handled the most orders last year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OrdersHandled DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discounts given on all orders.",
        "output": "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscounts FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees manage the most valuable orders (by total sales amount)?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost for orders shipped to Germany?",
        "output": "SELECT AVG(Freight) FROM orders WHERE ShipCountry = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sales per employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the overall customer lifetime value for each region?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company had the highest number of on-time deliveries?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS on_time_deliveries FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY shippers.CompanyName ORDER BY on_time_deliveries DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which country receives the most shipments?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCountry ORDER BY ShipmentCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have unit prices above the average price?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which order had the highest freight cost and what was the destination country?",
        "output": "SELECT o.OrderID, o.Freight, o.ShipCountry FROM orders o ORDER BY o.Freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the monthly trend of total sales over the past year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top-performing products by sales revenue.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in the year 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many suppliers are based in each country?",
        "output": "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between order size and shipping time for last month's orders?",
        "output": "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders WHERE TO_CHAR(OrderDate, 'YYYY-MM') = TO_CHAR(CURRENT_DATE - INTERVAL '1 month', 'YYYY-MM');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have seen a growth trend in their sales over the last year.",
        "output": "SELECT employees.EmployeeID FROM (SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS YearlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Year) subquery WHERE YearlySales > LAG(YearlySales, 1) OVER (PARTITION BY EmployeeID ORDER BY Year);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the longest order fulfillment time recorded?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend of the average order value over the last year?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS average_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY month ORDER BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handled the most orders in a given month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the freight cost correlation to total order value.",
        "output": "SELECT CORR(order_values.total_order_value, orders.Freight) AS correlation FROM (SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID) AS order_values JOIN orders ON order_values.OrderID = orders.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average order value across all customers.",
        "output": "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees whose sales have increased by more than 20% compared to the previous month.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate) HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1) OVER (PARTITION BY e.EmployeeID ORDER BY MONTH(o.OrderDate)) > 1.2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How much freight was paid per shipping method last quarter?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each customer this month?",
        "output": "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURDATE()) AND EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURDATE()) GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS order_count FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total lifetime value of each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly product performance for each product.",
        "output": "SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS Performance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the total quantity of products ordered by each employee.",
        "output": "SELECT o.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of all products sold in the last month?",
        "output": "SELECT SUM(Quantity) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate > DATEADD(MONTH, -1, CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products with the highest discounts applied.",
        "output": "SELECT p.ProductName, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID ORDER BY od.Discount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders shipped to different countries?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company is used most frequently?",
        "output": "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have not placed any orders in the last year?",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL OR o.OrderDate >= CURRENT_DATE - INTERVAL '1 year';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders shipped late in the last three months?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders handled by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of products per order?",
        "output": "SELECT AVG(Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of products that are discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average unit price for all sold products?",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM [Order Details] WHERE Quantity > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the fastest average order fulfillment time?",
        "output": "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AverageFulfillmentTime ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month had the highest number of orders placed?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY OrderMonth ORDER BY TotalOrders DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products ordered by country?",
        "output": "SELECT o.ShipCountry, SUM(od.Quantity) AS TotalProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on the reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount per order?",
        "output": "SELECT OrderID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 customers by total order value?",
        "output": "SELECT c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN \"Order Details\" od ON o.OrderID = od.OrderID GROUP BY c.CompanyName ORDER BY TotalOrderValue DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Get the monthly sales trend for the past year.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many discontinued products exist, and who are their suppliers?",
        "output": "SELECT p.ProductID, p.ProductName, s.SupplierID, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders has each customer placed in the last year?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total revenue generated from all orders in the year 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the highest number of delayed deliveries?",
        "output": "SELECT ShipRegion, COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY DelayedOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most ordered product per supplier?",
        "output": "SELECT s.CompanyName, p.ProductName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, p.ProductID ORDER BY SUM(od.Quantity) DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend in average shipping cost over the last year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate > CURRENT_DATE - INTERVAL 1 YEAR GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company delivers the most to a specific country?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders WHERE ShipCountry = 'Specific Country' GROUP BY ShipVia ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine which employee has handled the most orders.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which orders had the highest total discount applied?",
        "output": "SELECT OrderID, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders in March 2023?",
        "output": "SELECT AVG(CAST(orders.ShippedDate AS DATE) - CAST(orders.OrderDate AS DATE)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) = 3",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the percentage of discontinued products in the inventory?",
        "output": "SELECT (COUNT(CASE WHEN products.Discontinued = 1 THEN 1 END) * 100.0) / COUNT(products.ProductID) AS discontinued_percentage FROM products",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total number of discontinued products.",
        "output": "SELECT COUNT(*) AS TotalDiscontinued FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees whose sales performance has declined over the last year.",
        "output": "SELECT EmployeeID FROM (SELECT e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AnnualSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, EXTRACT(YEAR FROM o.OrderDate)) AS Performance WHERE AnnualSales < LAG(AnnualSales) OVER (PARTITION BY EmployeeID ORDER BY Year);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find all orders shipped by a specific carrier within a certain date range.",
        "output": "SELECT * FROM orders WHERE ShipVia = ? AND ShippedDate BETWEEN ? AND ?;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the most products on order?",
        "output": "SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalUnitsOnOrder DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend of the average shipping cost over the last year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURDATE()) GROUP BY Month ORDER BY Month DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales volume?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_quantity DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest stock-to-order ratio?",
        "output": "SELECT ProductName, (UnitsInStock / NULLIF(UnitsOnOrder, 0)) AS StockToOrderRatio FROM products ORDER BY StockToOrderRatio DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend of shipping costs over the last six months?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are frequently bought together based on order history?",
        "output": "SELECT o1.ProductID, o2.ProductID, COUNT(*) AS frequency FROM [Order Details] o1 JOIN [Order Details] o2 ON o1.OrderID = o2.OrderID AND o1.ProductID <> o2.ProductID GROUP BY o1.ProductID, o2.ProductID ORDER BY frequency DESC LIMIT 10",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the region with the highest on-time delivery rate.",
        "output": "SELECT ShipRegion, COUNT(OrderID) FILTER(WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify any employee under direct supervision and their total sales contributions.",
        "output": "SELECT e1.EmployeeID, e1.ReportsTo, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees e1 INNER JOIN orders ON e1.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE e1.ReportsTo IS NOT NULL GROUP BY e1.EmployeeID, e1.ReportsTo;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend of total sales over the past six months?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order across all shipping companies?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total units on order for each supplier?",
        "output": "SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products with zero units in stock and not discontinued.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have stock levels below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have the highest total sales revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed but not yet shipped?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate IS NULL AND o.OrderDate <= CURRENT_DATE;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders included a discount?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity ordered for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products by supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders per shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories have the highest total order quantity?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS TotalOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalOrderQuantity DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order per month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount offered on products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the longest time it took for an order to be fulfilled in the last quarter?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '1 quarter') AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in 2022?",
        "output": "SELECT COUNT(*) FROM orders WHERE YEAR(OrderDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders include a discount and what is the average discount rate?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS OrderCount, AVG(Discount) AS AverageDiscount FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much freight cost has been incurred for each shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the fastest average lead time?",
        "output": "SELECT s.SupplierID, s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY AvgLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the most common discount rate applied to product sales.",
        "output": "SELECT Discount, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Discount ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers are associated with the discontinued products?",
        "output": "SELECT SupplierID FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the least units in stock?",
        "output": "SELECT ProductID, ProductName FROM products ORDER BY UnitsInStock ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total discount given across all orders.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products with the highest order quantities?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrdered DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on their current stock and reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the reorder level for products with the highest sales last month?",
        "output": "SELECT ProductID, ReorderLevel FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] WHERE DATE_FORMAT(CURDATE(), '%Y-%m') = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m') GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost for shipped orders?",
        "output": "SELECT AVG(Freight) AS AverageFreight FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest inventory turnover ratio?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY turnover_ratio DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer placed the highest number of orders?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time by month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total revenue generated by products that are currently discontinued?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value per month for the current year?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been fulfilled on time this month?",
        "output": "SELECT COUNT(o.OrderID) AS OnTimeOrders FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE) AND CURRENT_DATE;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a unit price greater than the average unit price of all products?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest number of units sold?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY total_units_sold DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the lifetime value of customers from Germany?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'Germany' GROUP BY customers.CustomerID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in the last month?",
        "output": "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the employee count by title?",
        "output": "SELECT Title, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Title;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of products supplied by each supplier?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average fulfillment time for orders by country.",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Retention Rate for the last quarter?",
        "output": "SELECT (COUNT(DISTINCT o1.CustomerID) * 1.0 / COUNT(DISTINCT o2.CustomerID)) AS RetentionRate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE AND o2.OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees with the highest number of orders handled.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee handle last month?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH) AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY e.EmployeeID, e.FirstName, e.LastName",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers placed orders during a specific month?",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE EXTRACT(MONTH FROM o.OrderDate) = 6 AND EXTRACT(YEAR FROM o.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time for orders grouped by region?",
        "output": "SELECT region.RegionDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have stock levels below the reorder level?",
        "output": "SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For each country, what is the average shipping cost per order?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the difference between units in stock and units on order for each product.",
        "output": "SELECT ProductID, ProductName, (UnitsInStock - UnitsOnOrder) AS StockDifference FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What proportion of customers returned for a purchase within six months?",
        "output": "(SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE CustomerID IN (SELECT CustomerID FROM orders WHERE OrderDate < '2023-01-01') AND OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-01-01') AS return_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest average discount for orders handled?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been discontinued and are always in stock?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 0 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders received a discount greater than 10%?",
        "output": "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 products by sales revenue?",
        "output": "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product generates the most revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity sold per category?",
        "output": "SELECT p.CategoryID, SUM(od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost by shipping country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been delayed beyond the required date?",
        "output": "SELECT COUNT(OrderID) AS DelayedCount FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units ordered for each supplier?",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the correlation between freight cost and order sales value?",
        "output": "SELECT CORR(Freight, TotalSales) AS FreightSalesCorrelation FROM ( SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, o.Freight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID );",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What percentage of total sales does each employee contribute?",
        "output": "SELECT employees.EmployeeID, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / TotalSales.TotalSales) * 100 AS SalesPercentage FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID, (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID) AS TotalSales GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average freight cost per shipping method over the last six months.",
        "output": "SELECT o.ShipVia, AVG(o.Freight) AS AvgFreightCost FROM orders o WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY o.ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify suppliers with the most products.",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per country each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month, ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the median order fulfillment time across all orders?",
        "output": "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(DAY, OrderDate, ShippedDate)) AS MedianFulfillmentTime FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of current inventory?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the sales to salary ratio for each employee.",
        "output": "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / e.Salary) AS SalesToSalaryRatio FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the average order quantity for discontinued products.",
        "output": "SELECT AVG([Order Details].Quantity) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products from each supplier are currently discontinued?",
        "output": "SELECT s.CompanyName, COUNT(*) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find low-performing products based on sales and stock levels.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales, p.UnitsInStock FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName, p.UnitsInStock HAVING SUM(od.Quantity) < p.UnitsInStock",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average unit price of products in each category.",
        "output": "SELECT CategoryID, AVG(UnitPrice) FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the longest lead time for any supplier, and for which product was it?",
        "output": "SELECT p.ProductID, o.SupplierID, MAX(DATEDIFF(o.ShippedDate, o.OrderDate)) AS LongestLeadTime FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID INNER JOIN products p ON od.ProductID = p.ProductID WHERE o.ShippedDate IS NOT NULL GROUP BY p.ProductID, o.SupplierID ORDER BY LongestLeadTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the contribution of each category to total sales.",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF((SELECT SUM(Quantity * UnitPrice) FROM [Order Details]), 0) * 100 AS CategoryContribution FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of each product sold in 2023?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantitySold FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023) GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped by each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for the first half of 2023?",
        "output": "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_rate_h1_2023 FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the order ID of the order with the lowest freight cost?",
        "output": "SELECT OrderID FROM orders ORDER BY Freight ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units are on order but not yet shipped for each product?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS UnitsOnOrderNotShipped FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.ShippedDate IS NULL GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value for all products that are not discontinued?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) FROM products WHERE Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have placed an order in each city?",
        "output": "SELECT c.City, COUNT(DISTINCT o.CustomerID) AS NumberOfCustomers FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each customer?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customer with the longest gap between two orders.",
        "output": "SELECT t.CustomerID, MAX(t.Gap) AS MaxGap FROM (SELECT CustomerID, DATEDIFF(day, OrderDate, LAG(OrderDate) OVER(PARTITION BY CustomerID ORDER BY OrderDate)) AS Gap FROM orders) AS t GROUP BY t.CustomerID ORDER BY MaxGap DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have reorder levels below their current stock levels?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ReorderLevel < UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have generated the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify trends in total sales by region.",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN territories ON customers.Region = territories.RegionID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city receives the highest number of orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the distribution of customer locations by region?",
        "output": "SELECT Region, COUNT(CustomerID) AS customer_count FROM customers GROUP BY Region",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the percentage of orders for each shipping method in the last month.",
        "output": "SELECT ShipVia, COUNT(OrderID) * 100.0 / SUM(COUNT(OrderID)) OVER() AS Percentage FROM orders WHERE DATE_PART('month', OrderDate) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_PART('year', OrderDate) = DATE_PART('year', CURRENT_DATE - INTERVAL '1 month') GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the percentage of total sales for each product.",
        "output": "SELECT p.ProductID, p.ProductName, (SUM(od.Quantity * od.UnitPrice) / (SELECT SUM(od1.Quantity * od1.UnitPrice) FROM [Order Details] od1)) * 100 AS PercentageOfTotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were made by customers from Germany?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShipCountry = 'Germany'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 best-selling products by quantity?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscountPerOrder FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average delivery time for orders shipped after the required date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have units in stock less than their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What percentage of products are below reorder level?",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products) AS PercentageBelowReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were made by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS total_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the percentage of orders shipped late for each region.",
        "output": "SELECT ShipRegion, COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate) * 100.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the percentage of discontinued products in the inventory.",
        "output": "SELECT SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(ProductID) * 100.0 AS percentage FROM products",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time over the past year?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageFulfillmentTime FROM orders o WHERE o.OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND o.OrderDate < DATE_TRUNC('year', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the difference between required and shipped dates on average.",
        "output": "SELECT AVG(CAST(JULIANDAY(ShippedDate) - JULIANDAY(RequiredDate) AS INTEGER)) AS AverageDelay FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum freight cost incurred for a single order?",
        "output": "SELECT MAX(Freight) AS MaxFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between the order fulfillment time and shipping cost?",
        "output": "SELECT CORR(DATEDIFF(ShippedDate, OrderDate), Freight) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for orders in the first half of 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Analyze the trend in the number of orders shipped each month.",
        "output": "SELECT EXTRACT(YEAR FROM ShippedDate) AS ShipYear, EXTRACT(MONTH FROM ShippedDate) AS ShipMonth, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipYear, ShipMonth ORDER BY ShipYear, ShipMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total cost of units currently on order for each product.",
        "output": "SELECT ProductName, SUM(UnitPrice * UnitsOnOrder) AS TotalCostOnOrder FROM products GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average Order Fulfillment Time by shipper?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillTime FROM orders GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for the first quarter of 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average freight cost for orders shipped to each country.",
        "output": "SELECT o.ShipCountry, AVG(o.Freight) AS AverageFreight FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have managed orders with a total value over $10,000?",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 10000",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the highest discount applied to any product in the past year?",
        "output": "SELECT MAX(Discount) FROM [Order Details] WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has received the highest number of shipments this year?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS ShipmentsCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY ShipCity ORDER BY ShipmentsCount DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for orders shipped to the USA?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE ShipCountry = 'USA'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average inventory turnover ratio for the last three months.",
        "output": "SELECT AVG(turnover) AS AvgInventoryTurnover FROM (SELECT SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS turnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderID IN (SELECT DISTINCT OrderID FROM [Order Details] WHERE MONTH(CURRENT_DATE) - MONTH(OrderDate) BETWEEN 1 AND 3) GROUP BY MONTH(OrderDate)) AS monthly_turnover;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late in the last quarter?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND QUARTER(OrderDate) = QUARTER(CURDATE()) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How much revenue has each product generated, excluding discounts?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the trend of total sales for each employee month-by-month?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, EXTRACT(YEAR_MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, OrderMonth, e.FirstName, e.LastName ORDER BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between order fulfillment time and shipping cost?",
        "output": "SELECT CORR(DATEDIFF(ShippedDate, OrderDate), Freight) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all the products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value per customer in 2023?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of discontinued products?",
        "output": "SELECT COUNT(*) AS discontinued_product_count FROM products WHERE Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the suppliers for products frequently ordered by top customers in 2023?",
        "output": "SELECT DISTINCT suppliers.SupplierID, suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.CustomerID IN (SELECT CustomerID FROM (SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_spending FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY CustomerID ORDER BY customer_spending DESC LIMIT 10) AS top_customers_table)",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 5 customers by revenue and what is their total spending?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_spending FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY total_spending DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time by shipping company?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest number of unique customer orders?",
        "output": "SELECT p.ProductID, COUNT(DISTINCT od.OrderID) AS UniqueOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY UniqueOrders DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders included products with a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Discount > 0.2;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales amount per product, including applicable discounts?",
        "output": "SELECT od.ProductID, SUM(od.Quantity * (od.UnitPrice * (1 - od.Discount))) AS TotalSalesAmount FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled by each shipping company in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.ShippedDate) = 2023 GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the performance of discontinued products compared to active ones?",
        "output": "SELECT products.ProductName, products.Discontinued, SUM([Order Details].Quantity) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued IN (0, 1) GROUP BY products.ProductName, products.Discontinued ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who manage other employees and their respective reports.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, r.FirstName AS ReportFirstName, r.LastName AS ReportLastName FROM employees e JOIN employees r ON e.EmployeeID = r.ReportsTo;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total stock value of all products combined?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest total sales revenue?",
        "output": "SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM categories INNER JOIN products ON categories.CategoryID = products.CategoryID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total sales for each shipping method.",
        "output": "SELECT ShipVia, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were delivered on time each month?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the overall percentage of discontinued products for each supplier?",
        "output": "SELECT p.SupplierID, (COUNT(CASE WHEN p.Discontinued = 1 THEN 1 END) / COUNT(*)::FLOAT) * 100 AS DiscontinuedPercentage FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who were hired before 2010.",
        "output": "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees WHERE HireDate < '2010-01-01';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per shipping company each year?",
        "output": "SELECT ShipVia, YEAR(OrderDate) AS Year, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia, YEAR(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly trend in order quantities for each product?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrderQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate), p.ProductID, p.ProductName ORDER BY DATE_TRUNC('month', o.OrderDate), TotalOrderQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does on-time delivery rate vary by shipping method?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for each shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the monthly sales performance of products change over time?",
        "output": "SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of discontinued products?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have not made any sales in the past 6 months.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) WHERE o.OrderID IS NULL GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost by shipping country?",
        "output": "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer placed the earliest order and when?",
        "output": "SELECT CustomerID, OrderDate AS EarliestOrderDate FROM orders WHERE OrderDate = (SELECT MIN(OrderDate) FROM orders);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Discover the most frequently reordered product.",
        "output": "SELECT ProductID, COUNT(*) AS ReorderCount FROM products WHERE UnitsOnOrder > ReorderLevel GROUP BY ProductID ORDER BY ReorderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers with the highest unit price products.",
        "output": "SELECT suppliers.CompanyName, MAX(products.UnitPrice) AS MaxUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY MaxUnitPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders shipped within 3 days of the order date?",
        "output": "SELECT (COUNT(*) FILTER (WHERE ShippedDate <= DATE_ADD(OrderDate, INTERVAL 3 DAY)) * 100.0 / COUNT(*)) AS PercentageShippedWithin3Days FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify seasonal trends in employee sales over the years.",
        "output": "SELECT YEAR(orders.OrderDate) AS OrderYear, MONTH(orders.OrderDate) AS OrderMonth, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY YEAR(orders.OrderDate), MONTH(orders.OrderDate), employees.EmployeeID ORDER BY OrderYear, OrderMonth, employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 5 most ordered products by quantity.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 customers based on total sales revenue.",
        "output": "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY CustomerID ORDER BY CustomerRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by employees in each country?",
        "output": "SELECT employees.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Country",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much did each supplier contribute to the total sales revenue?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_contribution FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have served a certain region but have no orders in other regions.",
        "output": "SELECT e1.EmployeeID, e1.FirstName, e1.LastName FROM employees e1 JOIN orders o ON e1.EmployeeID = o.EmployeeID GROUP BY e1.EmployeeID, e1.FirstName, e1.LastName HAVING COUNT(DISTINCT o.ShipRegion) = 1 AND MAX(e1.Region) = 'X'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units sold for each product?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped with 'ShipVia' method 1?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShipVia = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the average number of orders processed by employees each month.",
        "output": "SELECT e.EmployeeID, AVG(OrderCount) AS AvgOrders FROM (SELECT EmployeeID, EXTRACT(YEAR FROM OrderDate) AS OrderYear, EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID, OrderYear, OrderMonth) AS MonthlyOrders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 products with the highest inventory turnover ratio.",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / CASE WHEN AVG(p.UnitsInStock) = 0 THEN NULL ELSE AVG(p.UnitsInStock) END AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnover DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time between order placement and the required date?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageTimeToRequired FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month in 2022 had the highest sales?",
        "output": "SELECT MONTH(OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = 2022 GROUP BY MONTH(OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top 10 highest earning employees based on their sales performance.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalEarnings FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalEarnings DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average shipping cost compare between two specific countries?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageFreightCost FROM orders WHERE ShipCountry IN ('Country1', 'Country2') GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the percentage of total orders delivered after the required date.",
        "output": "SELECT COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS LatePercentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the number of returning customers each month in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS order_month, COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the supplier with the highest average product price.",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AveragePrice DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find out which products are below their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier in delivering products?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID INNER JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders did each customer place in the last quarter?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrdersLastQuarter FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter' AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is the most frequently used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compare sales performances between employees working in different regions.",
        "output": "SELECT e.FirstName, e.LastName, e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.FirstName, e.LastName, e.Region ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the reorder status of each product based on current stock?",
        "output": "SELECT ProductID, (UnitsInStock - ReorderLevel) AS ReorderStatus FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the longest average lead time?",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY AverageLeadTime DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied on all orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount provided across all orders?",
        "output": "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost incurred for orders managed by each employee?",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers with the highest average discount per order.",
        "output": "SELECT c.CustomerID, AVG(od.Discount) AS AverageDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY AverageDiscount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category has the highest number of products in stock?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalStock FROM products GROUP BY CategoryID ORDER BY TotalStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average discount provided per supplier.",
        "output": "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the ratio of on-order units to in-stock units per product.",
        "output": "SELECT ProductName, (UnitsOnOrder / UnitsInStock) AS OnOrderToStockRatio FROM products WHERE UnitsInStock > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days taken to ship an order after it's required date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgLateDays FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average discount given per order for each supplier.",
        "output": "SELECT s.CompanyName, AVG(d.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] d ON p.ProductID = d.ProductID JOIN orders o ON o.OrderID = d.OrderID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders placed by each customer in 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the products that have never been ordered.",
        "output": "SELECT ProductName FROM products LEFT JOIN \"Order Details\" ON products.ProductID = \"Order Details\".ProductID WHERE \"Order Details\".OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the average order value for each month this year.",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue contribution of employees grouped by their title?",
        "output": "SELECT e.Title, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title ORDER BY Revenue DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the three most expensive orders based on total value.",
        "output": "SELECT o.OrderID, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS OrderValue FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY o.OrderID ORDER BY OrderValue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(LAST_DAY(CURDATE()), INTERVAL 1 MONTH) + INTERVAL 1 DAY AND o.OrderDate <= LAST_DAY(CURDATE() - INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 customers by order volume.",
        "output": "SELECT customers.CompanyName, COUNT(orders.OrderID) AS OrderVolume FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CompanyName ORDER BY OrderVolume DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the effect of discounts on total sales revenue.",
        "output": "SELECT SUM(Quantity * UnitPrice * (1 - Discount)) AS TotalSalesRevenueWithDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost per shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products ordered, grouped by supplier?",
        "output": "SELECT SupplierID, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "For which employees are sales concentrated in a single region?",
        "output": "SELECT e.FirstName, e.LastName, o.ShipRegion FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName, o.ShipRegion HAVING COUNT(DISTINCT o.ShipRegion) = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find all products with a unit price greater than the average.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees along with the total freight costs they managed in 2023.",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the regions with the highest number of orders.",
        "output": "SELECT ShipRegion, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipRegion ORDER BY NumberOfOrders DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped within 2 days of the order date?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee works under the highest number of managers?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT employees.ReportsTo) AS Managers FROM employees WHERE employees.ReportsTo IS NOT NULL GROUP BY employees.EmployeeID ORDER BY Managers DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does each employee's sales compare to their average order discount?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are discontinued from each supplier?",
        "output": "SELECT SupplierID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Evaluate if there is a correlation between discount percentage and sales volume.",
        "output": "SELECT CORR(od.Discount, od.Quantity) AS DiscountSalesCorrelation FROM [Order Details] od;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers who shipped orders later than the required date.",
        "output": "SELECT suppliers.CompanyName, orders.OrderID FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per city?",
        "output": "SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the total freight costs incurred per month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the percentage of orders delivered on time each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders GROUP BY DATE_TRUNC('month', orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Lifetime Value (CLV) for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CLV FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders shipped via each shipping method?",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped within the last quarter?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the most and least expensive products in stock.",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0 AND UnitPrice = (SELECT MAX(UnitPrice) FROM products WHERE UnitsInStock > 0) UNION SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0 AND UnitPrice = (SELECT MIN(UnitPrice) FROM products WHERE UnitsInStock > 0);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top three products by quantity sold per month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, [Order Details].ProductID, SUM([Order Details].Quantity) AS QuantitySold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m'), [Order Details].ProductID ORDER BY Month, QuantitySold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have more units on order than in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest revenue in the last year?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND o.OrderDate < DATE_TRUNC('year', CURRENT_DATE) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total quantity of products ordered by each customer.",
        "output": "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does sales performance fluctuate by employee age group?",
        "output": "SELECT e.EmployeeID, FLOOR(DATEDIFF(CURDATE(), e.BirthDate)/365) AS AgeGroup, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, AgeGroup;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time per month for 2023?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgFulfillmentTime FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products had the highest sales last year?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY od.ProductID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the monthly revenue trend?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the correlation between the hire date and sales performance of employees?",
        "output": "SELECT employees.EmployeeID, employees.HireDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.HireDate ORDER BY employees.HireDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "For each region, which employee has the highest total sales?",
        "output": "SELECT Region, EmployeeID, MAX(TotalSales) AS HighestTotalSales FROM (SELECT Region, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE Region IS NOT NULL GROUP BY Region, employees.EmployeeID) AS RegionalSales GROUP BY Region, EmployeeID ORDER BY Region, HighestTotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value handled by each employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List orders that were not shipped by the required date.",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the suppliers and the total orders they are associated with.",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT o.OrderID) AS TotalOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the supplier with the highest number of discontinued products.",
        "output": "SELECT s.CompanyName, COUNT(*) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were delayed beyond the required date?",
        "output": "SELECT COUNT(OrderID) AS delayed_orders FROM orders WHERE ShippedDate > RequiredDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with the highest inventory turnover ratio.",
        "output": "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(UnitsInStock), 0) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY InventoryTurnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the shipping cost compare between different shipping methods?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many unique products does each supplier provide?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS UniqueProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total value of all products currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the most frequently ordered product this year.",
        "output": "SELECT p.ProductID, COUNT(od.OrderID) AS OrderFrequency FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(CURDATE()) = YEAR(CURDATE()) GROUP BY p.ProductID ORDER BY OrderFrequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 products by sales volume this year.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalVolume FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ProductID ORDER BY TotalVolume DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How long do suppliers take on average to deliver products in May 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY products.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value for each supplier?",
        "output": "SELECT p.SupplierID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have not placed an order this year.",
        "output": "SELECT c.CustomerID, c.CompanyName FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR YEAR(o.OrderDate) <> YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compile a list of employees and their average order quantity per transaction.",
        "output": "SELECT e.EmployeeID, AVG(od.Quantity) AS AverageOrderQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales generated by each employee for March 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the most frequently ordered product.",
        "output": "SELECT ProductID, COUNT(ProductID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories have the highest total sales?",
        "output": "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average freight cost per country.",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products ordered per supplier?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalQuantityOrdered FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped on weekends?",
        "output": "SELECT COUNT(OrderID) AS WeekendOrders FROM orders WHERE EXTRACT(DOW FROM ShippedDate) IN (0, 6);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method delivers the highest number of on-time shipments?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS on_time_count FROM orders WHERE ShippedDate <= RequiredDate GROUP BY ShipVia ORDER BY on_time_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has generated the highest sales revenue in the last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Who is the employee with the most on-time deliveries last year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY EmployeeID ORDER BY OnTimeDeliveries DESC FETCH FIRST 1 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest reorder level?",
        "output": "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of products that are currently on backorder?",
        "output": "SELECT COUNT(ProductID) AS backorder_count FROM products WHERE UnitsOnOrder > UnitsInStock",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not been ordered yet?",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the shipping patterns (frequency) for each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products that are currently on order but discontinued.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have been discontinued by their suppliers?",
        "output": "SELECT p.ProductName, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has delivered the highest average lead time for orders?",
        "output": "SELECT suppliers.SupplierID, CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName ORDER BY AvgLeadTime DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How do employees' sales compare to their salary expenditures?",
        "output": "SELECT E.EmployeeID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales, E.Salary FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID, E.Salary ORDER BY (SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) - E.Salary) DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units sold for products that are not discontinued?",
        "output": "SELECT SUM(od.Quantity) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the percentage of orders shipped on time versus late?",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0) / COUNT(*) AS OnTimePercentage FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the earliest hire date?",
        "output": "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees ORDER BY HireDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each customer segment?",
        "output": "SELECT customerCustomerDemo.CustomerTypeID, AVG(total_order_value) AS avg_order_value FROM (SELECT orders.CustomerID, customerCustomerDemo.CustomerTypeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customerCustomerDemo ON orders.CustomerID = customerCustomerDemo.CustomerID GROUP BY orders.CustomerID, customerCustomerDemo.CustomerTypeID) subquery GROUP BY customerCustomerDemo.CustomerTypeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the employee who fulfilled the most orders last month.",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS NumOrders FROM orders o WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY o.EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total order quantity for each product in January 2023?",
        "output": "SELECT ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping country for orders?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who report to a manager located in the same city.",
        "output": "SELECT e1.EmployeeID, e1.FirstName, e2.FirstName AS ManagerName FROM employees e1 JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID WHERE e1.City = e2.City;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How do employees' birth months correlate to their sales success?",
        "output": "SELECT EXTRACT(MONTH FROM e.BirthDate) AS BirthMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY BirthMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average salary for employees grouped by city.",
        "output": "SELECT City, AVG(Salary) AS AvgSalary FROM employees GROUP BY City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who have handled orders shipped to a specific country.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShipCountry = ? GROUP BY e.EmployeeID, e.FirstName, e.LastName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the most frequently ordered product.",
        "output": "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost per shipping country?",
        "output": "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products exceeded the reorder point most frequently this year?",
        "output": "SELECT ProductID, ProductName, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY ProductID, ProductName ORDER BY ReorderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the highest total sales last month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average number of products per order.",
        "output": "SELECT AVG(TotalQuantity) AS AvgProductsPerOrder FROM (SELECT OrderID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY OrderID) AS OrderSummary;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a stock level higher than their reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock > ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days an order takes from required date to shipped date for late deliveries?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgLateDays FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top performers based on the sales generated in the last quarter?",
        "output": "SELECT E.EmployeeID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate >= DATE_TRUNC('quarter', CURDATE()) - INTERVAL '3 month' AND O.OrderDate < DATE_TRUNC('quarter', CURDATE()) GROUP BY E.EmployeeID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for orders placed this year?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURDATE())",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by customers in each country?",
        "output": "SELECT c.Country, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest average discount applied?",
        "output": "SELECT ProductName, AVG(Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY AvgDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest total sales revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products received the highest total discounts?",
        "output": "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalDiscount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the revenue generated per region.",
        "output": "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify which employees handle the most orders.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are at risk of going out of stock and need reordering soon?",
        "output": "SELECT p.ProductName, p.UnitsInStock - p.UnitsOnOrder AS stock_risk FROM products p WHERE p.UnitsInStock - p.UnitsOnOrder < p.ReorderLevel",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product generated the most revenue last month?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < CURDATE() GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the greatest sales increase compared to the previous month?",
        "output": "SELECT EmployeeID, SalesIncrease FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) - LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1, 0) OVER (PARTITION BY e.EmployeeID ORDER BY YEAR(o.OrderDate), MONTH(o.OrderDate)) AS SalesIncrease FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate)) AS MonthlySales ORDER BY SalesIncrease DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees in each city?",
        "output": "SELECT City, AVG(Salary) AS AvgSalary FROM employees GROUP BY City;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated from all products?",
        "output": "SELECT SUM(Quantity * UnitPrice) AS TotalRevenue FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated without any discounts?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity) FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the highest unit price and its supplier.",
        "output": "SELECT products.ProductName, products.SupplierID FROM products ORDER BY products.UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the highest revenue.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * ([Order Details].UnitPrice * (1 - [Order Details].Discount))) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the Average Discount applied to orders last month?",
        "output": "SELECT AVG(Discount) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) AND MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1)",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders have been delivered on time in the last month?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.ShippedDate BETWEEN '2023-08-01' AND '2023-08-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders exceed a freight cost of $100?",
        "output": "SELECT COUNT(*) AS OrdersOver100 FROM orders WHERE Freight > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier delivers the most frequently ordered product?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.ProductID = (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer has placed the most orders?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS TotalOrders FROM orders o GROUP BY o.CustomerID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products that are not discontinued but have zero units in stock.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 0 AND UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have less than the reorder level in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List suppliers who have not had any products ordered in the last year.",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate IS NULL OR orders.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order by country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the highest single order value?",
        "output": "SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales for each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped using each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the lifetime value for each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the earliest and latest shipping dates for each customer.",
        "output": "SELECT CustomerID, MIN(ShippedDate) AS Earliest, MAX(ShippedDate) AS Latest FROM orders GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the relationship between order discounts and total sales?",
        "output": "SELECT orders.OrderID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS total_discounts, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify any outliers in employee sales performance.",
        "output": "SELECT e.EmployeeID, TotalSales FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, AVG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER () AS AverageSales, STDDEV_SAMP(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER () AS SalesSTD FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS SalesSummary WHERE ABS(TotalSales - AverageSales) > 2 * SalesSTD;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for each shipping company?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top 5 employees in terms of sales in the current year.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the products with stock levels below reorder levels?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average quantity of products ordered per order?",
        "output": "SELECT AVG(TotalQuantity) AS AvgQuantityPerOrder FROM (SELECT OrderID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY OrderID) AS OrderQuantities;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products are currently in the inventory?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY Total_Sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products has each customer ordered?",
        "output": "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductsOrdered FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is preferred by most customers?",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipVia ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are currently out of stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product categories result in the highest sales revenue?",
        "output": "SELECT c.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID GROUP BY c.CategoryID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products were ordered last month?",
        "output": "SELECT COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1' MONTH) AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1' DAY;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region has the highest average order value?",
        "output": "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late by each shipping method?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateShipments FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the suppliers with an average delivery lead time greater than 10 days.",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON od.ProductID = p.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE o.ShippedDate IS NOT NULL GROUP BY s.SupplierID HAVING AvgLeadTime > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category has the highest average units on order?",
        "output": "SELECT CategoryID, AVG(UnitsOnOrder) AS AverageOnOrder FROM products GROUP BY CategoryID ORDER BY AverageOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been discontinued and still have stock remaining?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales quantity for products that are discontinued?",
        "output": "SELECT SUM(od.Quantity) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with more units on order than in stock.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales by product category in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales amount for each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most common postal code among suppliers?",
        "output": "SELECT PostalCode, COUNT(*) AS PostalCodeCount FROM suppliers GROUP BY PostalCode ORDER BY PostalCodeCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the highest average unit price?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID ORDER BY AvgUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with zero units in stock but have pending orders.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for each shipping method?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.ShipperID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest profit margin?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * (od.UnitPrice - od.Discount)) - SUM(od.Quantity * p.UnitPrice) AS ProfitMargin FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY ProfitMargin DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used most frequently in 2023?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipVia ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total sales revenue by supplier.",
        "output": "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the inventory level compare from month to month?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(p.UnitsInStock) AS InventoryLevel FROM products p JOIN orders o ON p.ProductID = o.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were handled by each employee in the last month?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed by each customer during the last quarter?",
        "output": "SELECT orders.CustomerID, COUNT(orders.OrderID) AS Order_Count FROM orders WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - IF(QUARTER(CURRENT_DATE) = 1, 1, 0) GROUP BY orders.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have stock levels below their reorder points?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for customers in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a decreasing trend in sales over the last six months?",
        "output": "WITH MonthlySales AS (\n    SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS TotalQuantity \n    FROM [Order Details] od \n    JOIN orders o ON od.OrderID = o.OrderID \n    GROUP BY Year, Month, od.ProductID\n), \nSalesTrend AS (\n    SELECT ProductID, \n    TotalQuantity, \n    LAG(TotalQuantity, 1) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS PreviousMonthQuantity, \n    LAG(TotalQuantity, 2) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS TwoMonthsAgoQuantity, \n    LAG(TotalQuantity, 3) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS ThreeMonthsAgoQuantity, \n    LAG(TotalQuantity, 4) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS FourMonthsAgoQuantity, \n    LAG(TotalQuantity, 5) OVER (PARTITION BY ProductID ORDER BY Year, Month) AS FiveMonthsAgoQuantity\n    FROM MonthlySales\n)\nSELECT DISTINCT ProductID \nFROM SalesTrend \nWHERE TotalQuantity < PreviousMonthQuantity AND PreviousMonthQuantity < TwoMonthsAgoQuantity AND \n      TwoMonthsAgoQuantity < ThreeMonthsAgoQuantity AND ThreeMonthsAgoQuantity < FourMonthsAgoQuantity AND \n      FourMonthsAgoQuantity < FiveMonthsAgoQuantity;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Compute the average discount applied across all orders.",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the trend of total sales over each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest unit price?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the products that have been discontinued but had the highest number of orders previously.",
        "output": "SELECT p.ProductName, COUNT(od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that are priced above the average unit price.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How long does it take on average to fulfill an order?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has the highest total freight cost?",
        "output": "SELECT ShipRegion, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipRegion ORDER BY TotalFreightCost DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to ship orders after the required date when they are late?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers who haven\u2019t placed any orders in the last year.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate IS NULL OR o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY c.CustomerID HAVING MAX(o.OrderDate) < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) OR MAX(o.OrderDate) IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired within the last year?",
        "output": "SELECT COUNT(EmployeeID) AS NewHires FROM employees WHERE HireDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were managed by employees in each country?",
        "output": "SELECT employees.Country, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.Country",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many orders include more than 100 units of products?",
        "output": "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Quantity > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers have ordered more than 20 times?",
        "output": "SELECT COUNT(CustomerID) FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING OrderCount > 20) AS CustomerOrders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the month with the highest average shipping cost.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the correlation between employee salary and sales performance?",
        "output": "SELECT e.EmployeeID, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN \"Order Details\" od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Salary;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest value order last year?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY o.CustomerID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee is handling the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the average quantity of products ordered per order last year.",
        "output": "SELECT AVG(od.Quantity) AS AverageQuantity FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 day';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to orders each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were made by each customer country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which customers placed orders for products from the most suppliers?",
        "output": "SELECT CustomerID, COUNT(DISTINCT suppliers.SupplierID) AS UniqueSuppliers FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY CustomerID ORDER BY UniqueSuppliers DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Are there any products that have never been ordered?",
        "output": "SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were delivered on or before the required date in the last month?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND OrderDate < DATE_TRUNC('month', CURRENT_DATE)",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the most frequently ordered product by each customer.",
        "output": "SELECT customers.CustomerID, products.ProductName, COUNT([Order Details].ProductID) AS product_count FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY customers.CustomerID, products.ProductName ORDER BY product_count DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average order amount by customer region.",
        "output": "SELECT c.Region, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderAmount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Analyze the sales trend per month for each supplier.",
        "output": "SELECT s.SupplierID, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN \"Order Details\" od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID, OrderYear, OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the inventory turnover ratios for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales in the last year?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.ProductName ORDER BY product_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the on-time delivery rate for each shipping method.",
        "output": "SELECT ShipVia, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the total sales revenue compare between Q1 and Q2 of 2023?",
        "output": "SELECT 'Q1' AS quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' UNION ALL SELECT 'Q2', SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers with more than 5 orders.",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales per country for 2023?",
        "output": "SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.Country",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest revenue over the past six months?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Revenue FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(month, -6, CURRENT_DATE)) GROUP BY ProductID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average shipping time for orders handled by each employee?",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products sold each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalProductsSold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order quantity for orders placed in 2023?",
        "output": "SELECT AVG(Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders by suppliers from a specific region.",
        "output": "SELECT o.OrderID, s.CompanyName FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE s.Region = 'SpecificRegion';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees with a managerial role and their direct subordinates.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, r.FirstName AS SubFirstName, r.LastName AS SubLastName, r.Title FROM employees e JOIN employees r ON e.EmployeeID = r.ReportsTo WHERE e.Title LIKE '%Manager%';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales for each product in the last month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY p.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most significant number of orders that include discounts?",
        "output": "SELECT e.EmployeeID, COUNT(*) AS DiscountedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY e.EmployeeID ORDER BY DiscountedOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for July 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have a stock level below their reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders in each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly sales revenue for each product?",
        "output": "SELECT products.ProductID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS MonthlyRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average fulfillment time for the top 3 products in sales in 2023?",
        "output": "SELECT p.ProductID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_fulfillment_time FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY p.ProductID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find orders with a shipping cost over $100.",
        "output": "SELECT OrderID FROM orders WHERE Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many unique customers has each employee served?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomers FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How much total revenue has been generated from orders in the past month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What percentage of products are discontinued?",
        "output": "SELECT (COUNT(*) FILTER (WHERE Discontinued = 1) / COUNT(*)) * 100 AS DiscontinuedPercentage FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have a 'Manager' title and calculate their total sales.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.Title LIKE '%Manager%' GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has the highest sales revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY SalesRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 3 customers based on purchase volume this year.",
        "output": "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS total_purchase_volume FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY customers.CustomerID, customers.CompanyName ORDER BY total_purchase_volume DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the most units in stock?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) as TotalUnitsInStock FROM products GROUP BY CategoryID ORDER BY TotalUnitsInStock DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which order had the highest applied discount percentage?",
        "output": "SELECT OrderID FROM [Order Details] WHERE Discount = (SELECT MAX(Discount) FROM [Order Details]) LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How has the average shipping cost per order changed over the last year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales amount generated by each employee for the current year?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 products sold by quantity.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How much time on average does it take to fulfill an order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have shipped their orders past the required date?",
        "output": "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders are shipped via the most expensive method?",
        "output": "SELECT COUNT(o.OrderID) * 1.0 / (SELECT COUNT(*) FROM orders) AS ExpensiveShippingRate FROM orders o WHERE o.ShipVia = (SELECT ShipVia FROM (SELECT ShipVia, AVG(Freight) AS avg_freight FROM orders GROUP BY ShipVia ORDER BY avg_freight DESC LIMIT 1) AS expensive_method);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the highest unit price.",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders has each employee handled in the past quarter?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') AND CURRENT_DATE GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique shipping recipients are there in the dataset?",
        "output": "SELECT COUNT(DISTINCT ShipName) AS UniqueRecipients FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the relationship between freight cost and sales revenue?",
        "output": "SELECT CORR(orders.Freight, [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average price of products supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AveragePrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the most common shipping region for orders exceeding $500.",
        "output": "SELECT ShipRegion FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 500 ORDER BY COUNT(orders.OrderID) DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who achieved more than a stipulated sales target last month.",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID HAVING TotalSales > 10000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many discontinued products are there for each supplier?",
        "output": "SELECT p.SupplierID, COUNT(*) AS DiscontinuedProducts FROM products p WHERE p.Discontinued = 1 GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most orders with discounts applied?",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(DISTINCT od.OrderID) AS DiscountedOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0 GROUP BY s.SupplierID ORDER BY DiscountedOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average quantity of products per order.",
        "output": "SELECT AVG(Quantity) AS AverageQuantity FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrdersHandled FROM orders GROUP BY EmployeeID ORDER BY OrdersHandled DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total sales amount for each product, considering discounts.",
        "output": "SELECT od.ProductID, SUM(od.Quantity * (od.UnitPrice - od.UnitPrice * od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied per order?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the top 5 customers by total spending in the past year.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_spending FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2022-10-24' AND '2023-10-24' GROUP BY customers.CustomerID ORDER BY total_spending DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How has the customer retention rate changed quarter over quarter in 2023?",
        "output": "SELECT CONCAT(YEAR(OrderDate), '-Q', CEIL(MONTH(OrderDate) / 3)) AS quarter, (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2023-01-01' THEN CustomerID END), 0)) AS customer_retention_rate FROM orders WHERE OrderDate < '2023-12-31' GROUP BY YEAR(OrderDate), CEIL(MONTH(OrderDate) / 3)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the top five suppliers based on the total units of products supplied?",
        "output": "SELECT s.CompanyName, SUM(p.UnitsInStock + p.UnitsOnOrder) AS TotalUnitsSupplied FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY TotalUnitsSupplied DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the month with the most number of orders placed.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(*) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the revenue contribution percentage of each product to the total sales.",
        "output": "SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / (SELECT SUM(Quantity * UnitPrice) FROM [Order Details])) * 100 AS RevenuePercentage FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by new customers in 2023?",
        "output": "SELECT COUNT(DISTINCT orders.OrderID) AS new_customer_orders FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND orders.CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < '2023-01-01')",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for each product per month?",
        "output": "SELECT p.ProductID, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are being ordered at a rate that suggests they should be reordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock < ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Analyze the trend in on-time delivery rate over the past year.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales revenue in the current year?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average freight cost per order.",
        "output": "SELECT AVG(Freight) AS AvgFreight FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied across all order details?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has handled the most orders successfully delivered on time?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total number of orders placed by each region.",
        "output": "SELECT Region, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the lowest average shipping cost per order?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY avg_shipping_cost ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest average order value?",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which countries have the highest average customer lifetime value?",
        "output": "SELECT customers.Country, AVG(customer_lifetime_value) AS avg_lifetime_value FROM (SELECT customers.CustomerID, customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, customers.Country) AS customer_values GROUP BY customers.Country ORDER BY avg_lifetime_value DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average quantity ordered per order for the top product?",
        "output": "SELECT AVG(OD.Quantity) FROM [Order Details] OD JOIN (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(UnitPrice * Quantity * (1 - Discount)) DESC LIMIT 1) AS TopProduct ON OD.ProductID = TopProduct.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were delayed beyond the required date?",
        "output": "SELECT COUNT(o.OrderID) AS DelayedOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average order value per customer.",
        "output": "SELECT orders.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine if any products are being sold at a discount greater than 20%.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.2;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the product with the highest order quantity in the last month?",
        "output": "SELECT od.ProductID, p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE) GROUP BY od.ProductID, p.ProductName ORDER BY TotalOrdered DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most diverse product range (based on product categories)?",
        "output": "SELECT s.CompanyName, COUNT(DISTINCT p.CategoryID) AS NumberOfCategories FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY NumberOfCategories DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the highest number of shipments and total shipment volume?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS NumShipments, SUM(od.Quantity) AS TotalVolume FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY NumShipments DESC, TotalVolume DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales for each supplier.",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What day of the week are most orders placed?",
        "output": "SELECT DAYNAME(orders.OrderDate) AS day_of_week, COUNT(orders.OrderID) AS num_orders FROM orders GROUP BY DAYNAME(orders.OrderDate) ORDER BY num_orders DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have never been associated with a discontinued product?",
        "output": "SELECT suppliers.CompanyName FROM suppliers WHERE suppliers.SupplierID NOT IN (SELECT DISTINCT products.SupplierID FROM products WHERE products.Discontinued = 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders that were delivered on or before the required date each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category has the highest average unit price?",
        "output": "SELECT CategoryID, AVG(UnitPrice) FROM products GROUP BY CategoryID ORDER BY AVG(UnitPrice) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How did customer retention rate change between 2022 and 2023?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN orders.CustomerID END)) AS retention_change_rate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the difference between required and shipped dates for each order.",
        "output": "SELECT OrderID, DATEDIFF(orders.RequiredDate, orders.ShippedDate) AS DateDifference FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the reorder level for each product category?",
        "output": "SELECT products.CategoryID, AVG(products.ReorderLevel) AS AvgReorderLevel FROM products GROUP BY products.CategoryID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a high quantity per unit but low turnover ratio?",
        "output": "SELECT p.ProductName, p.QuantityPerUnit FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName, p.QuantityPerUnit HAVING (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) < 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average unit price of all products.",
        "output": "SELECT AVG(UnitPrice) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the monthly sales performance for each product.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with the highest variance in monthly sales.",
        "output": "SELECT ProductID, STDDEV(SUM([Order Details].Quantity) OVER (PARTITION BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate))) AS SalesVariance FROM [Order Details] GROUP BY ProductID ORDER BY SalesVariance DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the most orders shipped to it?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipCity ORDER BY OrdersCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total revenue generated by orders that were shipped after the required date.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LateShipmentRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have zero units on order?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products need reordering based on current stock levels?",
        "output": "SELECT products.ProductName, products.UnitsInStock, products.ReorderLevel FROM products WHERE products.UnitsInStock < products.ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have not handled any orders yet.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with sales quantities exceeding their stock levels.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > MAX(p.UnitsInStock);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales revenue and average discount for each product?",
        "output": "SELECT p.ProductID, SUM(od.UnitPrice * od.Quantity) AS TotalRevenue, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the least number of orders shipped?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with a retention period between two specific dates.",
        "output": "SELECT DISTINCT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate BETWEEN 'start_date' AND 'end_date';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the lowest on-time delivery rate?",
        "output": "SELECT ShipCountry, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeRate ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products sold with more than 20% discount.",
        "output": "SELECT ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE Discount > 0.20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provided the highest number of products that have been discontinued?",
        "output": "SELECT s.CompanyName, COUNT(p.ProductID) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 3 most purchased products in terms of quantity?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to products in order details?",
        "output": "SELECT AVG([Order Details].Discount) AS Average_Discount FROM [Order Details]",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have the least sales performance this year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY employee_sales ASC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products with the lowest sales performance last month.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(od.OrderID) = MONTH(CURRENT_DATE) - 1 AND YEAR(od.OrderID) = YEAR(CURRENT_DATE) GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) = (SELECT MIN(total_quantity) FROM (SELECT ProductID, SUM(Quantity) as total_quantity FROM [Order Details] WHERE MONTH(OrderID) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderID) = YEAR(CURRENT_DATE) GROUP BY ProductID) AS subquery);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total discounts given by each employee.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average discount rate for each product.",
        "output": "SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the relationship between unit price and sales quantities?",
        "output": "SELECT ProductName, (SUM(od.Quantity * od.UnitPrice) / SUM(od.Quantity)) AS AverageSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY AverageSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee processed the most diverse range of products?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT [Order Details].ProductID) AS ProductCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many distinct products were ordered in the last month?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS distinct_products FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURDATE())",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 cities with the highest number of shipped orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY NumShippedOrders DESC LIMIT 3",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were made from each country?",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to orders by each supplier?",
        "output": "SELECT products.SupplierID, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(*) AS TotalOrders FROM orders GROUP BY ShipCountry ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of all products supplied by each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled within 7 days?",
        "output": "SELECT COUNT(orders.OrderID) AS fulfilled_orders FROM orders WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) <= 7",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers have products nearing their reorder level?",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Track monthly customer retention rates over the past year.",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS month, (COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate BETWEEN '2021-01-01' AND '2021-12-31'))::float / NULLIF(COUNT(DISTINCT o.CustomerID) FILTER (WHERE o.OrderDate < '2021-01-01'), 0) AS RetentionRate FROM orders o WHERE o.OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY month ORDER BY month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of late deliveries in the last five years?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate) / COUNT(OrderID)::FLOAT) * 100 AS LateDeliveryRate FROM orders WHERE YEAR(OrderDate) >= YEAR(CURRENT_DATE) - 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the average discount applied affect total sales per employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the reorder level for each product that is currently out of stock?",
        "output": "SELECT ProductName, ReorderLevel FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight cost for each employee's orders.",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred by each shipping method for the month of March 2023?",
        "output": "SELECT ShipVia, SUM(Freight) AS Total_Freight FROM orders WHERE EXTRACT(YEAR FROM ShippedDate) = 2023 AND EXTRACT(MONTH FROM ShippedDate) = 3 GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each supplier?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What was the product performance for discontinued products?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1 GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the impact of discounts on sales performance for each employee.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSalesWithoutDiscount, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSalesWithDiscount, (SUM([Order Details].Quantity * [Order Details].UnitPrice) - SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount))) AS DiscountImpact FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in the first quarter of 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category has the highest number of products on order?",
        "output": "SELECT c.CategoryName, SUM(p.UnitsOnOrder) AS TotalOnOrder FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName ORDER BY TotalOnOrder DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are ordered but not yet delivered?",
        "output": "SELECT COUNT(ProductID) AS NumberOfProducts FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the overall customer retention rate for 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total sales amount for each product category.",
        "output": "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has fulfilled the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which regions have the highest sales in 2023?",
        "output": "SELECT regions.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN territories ON customers.Region = territories.RegionID JOIN region ON territories.RegionID = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY regions.RegionDescription ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the effect of discounts on overall sales revenue.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS discount_effect FROM [Order Details]",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the country with the highest number of suppliers and their average lead time.",
        "output": "SELECT s.Country, COUNT(DISTINCT s.SupplierID) AS NumSuppliers, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.Country ORDER BY NumSuppliers DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order amount per employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderAmount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SupplierRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the highest shipping expenditure?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY CustomerID ORDER BY TotalShippingCost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are located in each region?",
        "output": "SELECT Region, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Region;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the orders with the highest freight cost.",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost for all shipped orders.",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average delivery time for products in each region?",
        "output": "SELECT suppliers.Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of unique products ordered?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS UniqueProductsOrdered FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have not made any sales this year.",
        "output": "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND YEAR(orders.OrderDate) = YEAR(CURDATE()) WHERE orders.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top three products by sales revenue last month?",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductName ORDER BY SalesRevenue DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a discount greater than 0.2 applied?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the variance in unit prices for each category of products.",
        "output": "SELECT c.CategoryName, VARIANCE(p.UnitPrice) FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 5 products with the highest inventory turnover ratio.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) as InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY InventoryTurnoverRatio DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Who are the top 5 customers by total order value?",
        "output": "SELECT C.CustomerID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalOrderValue FROM customers C JOIN orders O ON C.CustomerID = O.CustomerID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY C.CustomerID ORDER BY TotalOrderValue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest quantity in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products ORDER BY UnitsInStock DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have increased their sales compared to the previous month?",
        "output": "SELECT e.EmployeeID, (SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN MONTH(o.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS SalesIncrease FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories had the best performance in sales in January 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY total_quantity DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have been discontinued but still have stock?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Are certain employees consistently involved with late shipments?",
        "output": "SELECT EmployeeID, COUNT(*) AS late_shipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID HAVING COUNT(*) > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were not shipped by the required date for each employee?",
        "output": "SELECT e.EmployeeID, COUNT(*) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in the last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 3 cities by total sales and the corresponding managing employees.",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, employees.EmployeeID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY ShipCity, employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed each month in the last year?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 year' GROUP BY Year, Month ORDER BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the shipping method used for the order with the largest delay from required date.",
        "output": "SELECT ShipVia FROM orders ORDER BY DATEDIFF(ShippedDate, RequiredDate) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the month with the highest sales.",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY MonthlySales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue generated by orders shipped after the required date.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly trend of orders shipped late?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(ShippedDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have never had a product ordered?",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the shipping performance vary between different shipping methods?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipVia ORDER BY AvgDeliveryTime ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the most sales last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount provided on orders by product category?",
        "output": "SELECT categories.CategoryName, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG([Order Details].Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers placed orders in the last year?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the total number of products sold per month.",
        "output": "SELECT TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, SUM(od.Quantity) AS TotalProductsSold FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY TO_CHAR(o.OrderDate, 'YYYY-MM')",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee with the most significant increase in sales year-over-year.",
        "output": "SELECT e.EmployeeID, YEAR(o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by total quantity sold?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time between order placement and shipment for each supplier?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_shipping_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many days on average does it take for an order to be shipped by each employee?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between freight cost and shipping time?",
        "output": "SELECT CORR(Freight, DATE_PART('day', ShippedDate - OrderDate)) AS CorrFreightShipTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total discount given on all orders for each employee.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not been reordered past their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount given by each employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order, aggregated monthly?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Year, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the monthly Inventory Turnover Ratio.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= CURDATE() - INTERVAL '1' MONTH;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which countries have the highest number of suppliers?",
        "output": "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest discount applied across all orders?",
        "output": "SELECT p.ProductID, p.ProductName, od.Discount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID ORDER BY od.Discount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products supplied by suppliers from the USA?",
        "output": "SELECT s.Country, AVG(p.UnitPrice) AS AveragePrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE s.Country = 'USA' GROUP BY s.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value placed by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipments among different countries last quarter?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS Shipments FROM orders WHERE OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) GROUP BY ShipCountry ORDER BY Shipments DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum order fulfillment time recorded?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS MaxFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total number of orders for each product category.",
        "output": "SELECT c.CategoryID, COUNT(DISTINCT o.OrderID) AS TotalOrders FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most common shipping method used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS MethodCount FROM orders GROUP BY ShipVia ORDER BY MethodCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which months had the highest on-time delivery rate?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeRate FROM orders GROUP BY Month ORDER BY OnTimeRate DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What was the on-time delivery rate for the past six months?",
        "output": "SELECT COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that are not discontinued but have zero units in stock.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 0 AND UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many unique customers placed orders in June 2023?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) = 6;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average discount per order.",
        "output": "SELECT AVG(Discount) AS AverageDiscountPerOrder FROM (SELECT OrderID, AVG(Discount) AS Discount FROM [Order Details] GROUP BY OrderID) AS OrderDiscounts;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average discount given per product in the last year.",
        "output": "SELECT products.ProductID, products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped within two days of the order date?",
        "output": "SELECT COUNT(OrderID) AS OrdersWithinTwoDays FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped to 'USA'?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied on each product?",
        "output": "SELECT ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category of products generates the most revenue?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average order fulfillment time each month.",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time FROM orders GROUP BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has generated the most revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with stock levels below the average stock level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < (SELECT AVG(UnitsInStock) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given across all orders?",
        "output": "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscountGiven FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total sales for employees who report to a specific manager.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.ReportsTo = ? GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products where reorder level is more than double the units in stock.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > 2 * UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Retention Rate for the past quarter.",
        "output": "SELECT (COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate BETWEEN CURRENT_DATE - INTERVAL '3 MONTH' AND CURRENT_DATE)) / NULLIF(COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate < CURRENT_DATE - INTERVAL '3 MONTH'), 0) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount given per order by each employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the average sales per employee for last month?",
        "output": "SELECT e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the variance in shipping costs for each region?",
        "output": "SELECT ShipRegion, VARIANCE(Freight) AS FreightVariance FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month experiences the most delayed shipments?",
        "output": "SELECT DATE_FORMAT(RequiredDate, '%Y-%m') AS Month, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY DATE_FORMAT(RequiredDate, '%Y-%m') ORDER BY DelayedShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the monthly trends in total sales for the past year?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the average order fulfillment time for each employee.",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by each territory?",
        "output": "SELECT territories.TerritoryDescription, COUNT(orders.OrderID) AS order_count FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units have been ordered by product category?",
        "output": "SELECT products.CategoryID, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average order value for each employee.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed orders in more than two different months in 2023?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS customer_count FROM (SELECT CustomerID, COUNT(DISTINCT EXTRACT(MONTH FROM OrderDate)) as months_ordered FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY CustomerID) AS subquery WHERE months_ordered > 2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total sales for each product.",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "For each product, what was the highest recorded order quantity in a single transaction?",
        "output": "SELECT ProductName, MAX(Quantity) AS MaxOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were shipped late each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(OrderID) - COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END)) * 100.0 / COUNT(OrderID) AS LateDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country has the highest number of on-time deliveries?",
        "output": "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) AS OnTimeDeliveries FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveries DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers who have delivered orders with a lead time over a week.",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = [Order Details].ProductID AND orders.OrderID = [Order Details].OrderID WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) > 7 GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the product with the highest difference between units in stock and units on order.",
        "output": "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS Difference FROM products ORDER BY Difference DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who have not placed any orders.",
        "output": "SELECT c.CompanyName FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with a sales price lower than their current order price.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitPrice < od.UnitPrice;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of orders placed?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average discount given in orders handled by each department.",
        "output": "SELECT e.Title, AVG(od.Discount) as AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Title;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have both low units in stock and high units on order.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < 10 AND UnitsOnOrder > 20;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "For each employee, what is the total sales generated from their orders?",
        "output": "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total stock value for each product?",
        "output": "SELECT p.ProductName, (p.UnitPrice * p.UnitsInStock) AS StockValue FROM products p;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred by each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers along with their total number of orders.",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many customers placed orders during a promotion?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN 'promotion_start_date' AND 'promotion_end_date';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue generated in December 2022.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 12 AND YEAR(o.OrderDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 products by revenue.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What was the total sales for each customer demographic group?",
        "output": "SELECT customerDemographics.CustomerDesc, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 products by sales in the last quarter.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest average discount?",
        "output": "SELECT [Order Details].ProductID, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company incurs the highest average shipping cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed by each customer monthly?",
        "output": "SELECT orders.CustomerID, EXTRACT(YEAR FROM orders.OrderDate) AS OrderYear, EXTRACT(MONTH FROM orders.OrderDate) AS OrderMonth, COUNT(orders.OrderID) AS TotalOrders FROM orders GROUP BY orders.CustomerID, OrderYear, OrderMonth",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average discount received on product sales.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for orders shipped by each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employees achieved the best on-time delivery rates?",
        "output": "SELECT EmployeeID, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY EmployeeID ORDER BY OnTimeRate DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the most common product categories sold by each employee?",
        "output": "SELECT employees.EmployeeID, ProductID, COUNT(ProductID) AS ProductCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, ProductID ORDER BY ProductCount DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the correlation between order quantity and discount rate.",
        "output": "SELECT CORR(od.Quantity, od.Discount) AS Correlation FROM [Order Details] od;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify any orders with an unusually high discount (more than 50%).",
        "output": "SELECT * FROM [Order Details] WHERE Discount > 0.5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend of average freight cost over the past year?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreightCost FROM orders WHERE OrderDate >= NOW() - INTERVAL '1 year' GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given by each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For each region, what is the average number of days between order and shipping?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDaysToShip FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value_2023 FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales revenue for each product?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify orders with freight cost greater than $100.",
        "output": "SELECT OrderID, Freight FROM orders WHERE Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all discontinued products and their remaining stock.",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees with the highest number of unique customers.",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY UniqueCustomers DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping method used?",
        "output": "SELECT ShipVia, COUNT(ShipVia) AS Count FROM orders GROUP BY ShipVia ORDER BY Count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of each product sold?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the trend in total sales for each quarter of 2023?",
        "output": "SELECT CONCAT(EXTRACT(YEAR FROM OrderDate), '-Q', EXTRACT(QUARTER FROM OrderDate)) AS quarter, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(QUARTER FROM OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders are placed but not yet shipped?",
        "output": "SELECT COUNT(o.OrderID) AS UnshippedOrders FROM orders o WHERE o.ShippedDate IS NULL",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Compare the average shipping cost between two specific regions.",
        "output": "SELECT ShipRegion, AVG(Freight) AS AverageFreight FROM orders WHERE ShipRegion IN ('Region1', 'Region2') GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have the highest discount rate on average?",
        "output": "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AvgDiscount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top 5 employees by total sales in the last quarter.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product with the highest difference between unit price and reorder level.",
        "output": "SELECT ProductName, (UnitPrice - ReorderLevel) AS PriceReorderDifference FROM products ORDER BY PriceReorderDifference DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the most products at reorder level?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS Count FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the total freight cost per country.",
        "output": "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company delivered the most orders in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY order_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the relationship between unit price and sales quantity.",
        "output": "SELECT p.ProductName, p.UnitPrice, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, p.UnitPrice ORDER BY SUM(od.Quantity);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest total order value?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average shipping time by country.",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average time suppliers take to deliver products?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify all products that need to be reordered.",
        "output": "SELECT ProductID, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average unit price for products with a quantity greater than 50?",
        "output": "SELECT AVG(UnitPrice) FROM [Order Details] WHERE Quantity > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping city?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify regions with the fastest order fulfillment time.",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS FastestFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY FastestFulfillmentTime ASC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the Inventory Turnover Ratio for the current month?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(CURRENT_DATE) = MONTH(od.OrderDate) AND YEAR(CURRENT_DATE) = YEAR(od.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order value per supplier?",
        "output": "SELECT s.SupplierID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the highest unit price for their products?",
        "output": "SELECT suppliers.SupplierID, products.UnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitPrice = (SELECT MAX(UnitPrice) FROM products) ORDER BY products.UnitPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have sold the most units in the last quarter?",
        "output": "SELECT P.ProductName, SUM(OD.Quantity) AS QuantitySold FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID WHERE QUARTER(OD.OrderID) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(OD.OrderID) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) GROUP BY P.ProductName ORDER BY QuantitySold DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 3 products by sales revenue that is still in stock.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock > 0 GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top five products in terms of total revenue.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders per month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have generated more than $50,000 in sales?",
        "output": "SELECT COUNT(*) FROM (SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 50000) AS employee_sales;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the reorder frequency for each product?",
        "output": "SELECT ProductName, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock < ReorderLevel GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are currently on order from each supplier?",
        "output": "SELECT p.SupplierID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the top 3 performing products based on sales volume.",
        "output": "SELECT ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY TotalQuantity DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value for each employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has delivered the highest number of products?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been placed with a quantity greater than 5?",
        "output": "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Quantity > 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the highest average shipping cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "In which countries are the majority of orders shipped?",
        "output": "SELECT orders.ShipCountry, COUNT(orders.OrderID) AS order_count FROM orders GROUP BY orders.ShipCountry ORDER BY order_count DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest number of backorders?",
        "output": "SELECT p.SupplierID, SUM(p.UnitsOnOrder) AS TotalBackorders FROM products p GROUP BY p.SupplierID ORDER BY TotalBackorders DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the average sales per employee per month?",
        "output": "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the top 5 customers with the highest total freight costs.",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the most frequently applied discount rate.",
        "output": "SELECT Discount, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Discount ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average stock level for each product category?",
        "output": "SELECT c.CategoryName, AVG(p.UnitsInStock) AS AvgStock FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have not been used in any orders in the past year?",
        "output": "SELECT SupplierID, CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT products.SupplierID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate > CURRENT_DATE - INTERVAL '1 YEAR');",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of inventory currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have a birthday this month?",
        "output": "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS FullName FROM employees WHERE MONTH(BirthDate) = MONTH(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped after the required date?",
        "output": "SELECT AVG(Freight) AS AvgFreight FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average shipping time by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost per city?",
        "output": "SELECT ShipCity, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCity;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped using the fastest shipper in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS total_orders FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.ShippedDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY MIN(DATEDIFF(orders.ShippedDate, orders.OrderDate)) ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average number of products per order for each employee.",
        "output": "SELECT e.FirstName, e.LastName, AVG(od.Quantity) AS AvgProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipping costs across different countries?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average turnover ratio across all products?",
        "output": "SELECT AVG(SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS AverageTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value per month for 2023?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average reorder level for products by each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(products.ReorderLevel) FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of on-time deliveries each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have the highest sales in the last month.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the trend of inventory turnover ratio over the past six months.",
        "output": "SELECT MONTH(OrderDate), (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATEADD(MONTH, -6, GETDATE()) GROUP BY MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories have the highest inventory turnover ratio?",
        "output": "SELECT CategoryID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID ORDER BY InventoryTurnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS UsageCount FROM orders o GROUP BY o.ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region has the highest employee sales?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription ORDER BY sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who have never been a manager.",
        "output": "SELECT EmployeeID, LastName, FirstName FROM employees WHERE EmployeeID NOT IN (SELECT DISTINCT ReportsTo FROM employees WHERE ReportsTo IS NOT NULL)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer regions have the highest number of orders?",
        "output": "SELECT Region, COUNT(OrderID) AS NumberOfOrders FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY Region ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(Freight) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were not shipped by the required date each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateOrders FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount rate applied to orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most common city for customer addresses.",
        "output": "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of customers?",
        "output": "SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly total sales revenue for the year 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most expensive product sold?",
        "output": "SELECT products.ProductName FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID ORDER BY [Order Details].UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category of products has the highest average discount applied?",
        "output": "SELECT products.CategoryID, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the total number of days taken to fulfill orders this month.",
        "output": "SELECT SUM(DATEDIFF(day, OrderDate, ShippedDate)) FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the most profitable supplier based on total revenue.",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the relationship between employee tenure and sales performance?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(CURRENT_DATE, e.HireDate) / 365.25) AS tenure_years, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_performance FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] ON o.OrderID = [Order Details].OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest inventory turnover ratio?",
        "output": "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much sales did each employee generate in Q1 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How do on-time delivery rates vary by shipping city and region?",
        "output": "SELECT ShipCity, ShipRegion, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCity, ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products have been ordered by each customer?",
        "output": "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time for deliveries from each supplier in March 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the most expensive single order?",
        "output": "SELECT employees.EmployeeID, orders.OrderID, MAX([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MaxSingleOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID, employees.EmployeeID ORDER BY MaxSingleOrderValue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersProcessed FROM orders GROUP BY EmployeeID ORDER BY OrdersProcessed DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have a reorder level less than their units in stock?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel < UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the Customer Lifetime Value for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost per order per month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS month, AVG(Freight) AS avg_freight_cost FROM orders GROUP BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the total sales for each employee?",
        "output": "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees report to whom?",
        "output": "SELECT ReportsTo, GROUP_CONCAT(CONCAT(FirstName, ' ', LastName) SEPARATOR ', ') AS Employees FROM employees GROUP BY ReportsTo;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has made the most sales this year?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders have a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT [Order Details].OrderID) AS discount_orders FROM [Order Details] WHERE [Order Details].Discount > 0.20",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in April 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have placed the highest number of orders this quarter?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS order_count FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY c.CustomerID ORDER BY order_count DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for the current month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the distribution of customer demographics for the top revenue-generating customers?",
        "output": "SELECT customerDemographics.CustomerDesc, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM customerCustomerDemo JOIN customers ON customerCustomerDemo.CustomerID = customers.CustomerID JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID GROUP BY customerDemographics.CustomerDesc ORDER BY total_revenue DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order across all regions in November 2023?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-11-01' AND '2023-11-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest order volume?",
        "output": "SELECT ShipCity, COUNT(*) AS OrderVolume FROM orders GROUP BY ShipCity ORDER BY OrderVolume DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest frequency of orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY CustomerID ORDER BY OrderFrequency DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost to each region?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipRegion",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 customers by total sales revenue.",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed by each customer in the last quarter?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Provide a list of employees who have a birthday in the current month.",
        "output": "SELECT FirstName, LastName FROM employees WHERE MONTH(BirthDate) = MONTH(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total number of orders placed in each region.",
        "output": "SELECT o.ShipRegion, COUNT(o.OrderID) AS NumOrders FROM orders o GROUP BY o.ShipRegion;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify which products have a reorder level higher than their current units in stock.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the monthly order fulfillment times, and how do they correlate with customer satisfaction?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by each customer in 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS num_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders are shipped via each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 customers based on the total revenue they generated this year.",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY o.CustomerID ORDER BY CustomerRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the number of orders per employee vary by month?",
        "output": "SELECT employees.EmployeeID, MONTH(orders.OrderDate) AS OrderMonth, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, MONTH(orders.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee manages the most sales in the United States?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS US_Sales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipCountry = 'United States' GROUP BY e.EmployeeID ORDER BY US_Sales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier has the most diverse product range?",
        "output": "SELECT s.SupplierID, s.SupplierName, COUNT(DISTINCT p.CategoryID) AS CategoryCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.SupplierName ORDER BY CategoryCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to the USA?",
        "output": "SELECT AVG(Freight) AS AverageFreightToUSA FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest reorder levels?",
        "output": "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with an average delivery lead time greater than 30 days.",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 30;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products have been sold monthly?",
        "output": "SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].Quantity) AS total_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, DATE_TRUNC('month', orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which orders have been delayed beyond their required date?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total sales for each supplier per month?",
        "output": "SELECT suppliers.CompanyName, TO_CHAR(orders.OrderDate, 'YYYY-MM') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName, OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the greatest variance in monthly sales?",
        "output": "SELECT p.ProductName, VARIANCE(od.Quantity) AS SalesVariance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SalesVariance DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the trend in total sales over the last four quarters.",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY OrderMonth ORDER BY OrderMonth DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total revenue generated in each month of the current year.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATE_PART('year', OrderDate) = DATE_PART('year', CURRENT_DATE) GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers supply products that have never been ordered?",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL AND p.ProductID IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with no reorder level set.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for all orders delivered on time this month?",
        "output": "SELECT SUM(Freight) FROM orders WHERE ShippedDate <= RequiredDate AND MONTH(ShippedDate) = MONTH(CURRENT_DATE) AND YEAR(ShippedDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many different products are discontinued?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have managed orders with the longest shipping distances?",
        "output": "SELECT employees.EmployeeID, MAX(orders.ShipCountry), MAX(orders.ShipPostalCode) FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average quantity per unit for products in each category.",
        "output": "SELECT CategoryID, AVG(CAST(QuantityPerUnit AS DECIMAL)) AS AverageQuantityPerUnit FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total value of orders for each shipping country.",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the suppliers with the highest average unit price for their products.",
        "output": "SELECT p.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p GROUP BY p.SupplierID ORDER BY AvgUnitPrice DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the region with the highest number of orders.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS number_of_orders FROM orders GROUP BY ShipRegion ORDER BY number_of_orders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all discontinued products along with their supplier names.",
        "output": "SELECT ProductName, CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped to a postal code starting with 'XYZ'?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShipPostalCode LIKE 'XYZ%';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders last year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost incurred for all orders?",
        "output": "SELECT SUM(Freight) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the peak month for order shipments?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS ShipmentMonth, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipmentMonth ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed orders in more than one month in 2023?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM (SELECT CustomerID, COUNT(DISTINCT EXTRACT(MONTH FROM OrderDate)) AS months_count FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY CustomerID) AS monthly_orders WHERE months_count > 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month in 2023 had the highest number of orders?",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY OrderMonth ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the total sales in December 2023 compare to December 2022?",
        "output": "SELECT SUM(CASE WHEN EXTRACT(MONTH FROM orders.OrderDate) = 12 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) / NULLIF(SUM(CASE WHEN EXTRACT(MONTH FROM orders.OrderDate) = 12 AND EXTRACT(YEAR FROM orders.OrderDate) = 2022 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END), 0) AS sales_growth_december FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders placed each month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY DATE_TRUNC('month', o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many days on average do orders ship after the required date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelayAfterRequired FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of discontinued products?",
        "output": "SELECT AVG(UnitPrice) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many unique products does each employee typically handle in their orders?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total value of products on backorder for each supplier?",
        "output": "SELECT p.SupplierID, SUM(p.UnitPrice * p.UnitsOnOrder) AS BackorderValue FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total unit price for each product that is currently discontinued?",
        "output": "SELECT ProductName, SUM(UnitPrice) FROM products WHERE Discontinued = 1 GROUP BY ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped before the required date?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate < RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What percentage of products from each supplier are currently discontinued?",
        "output": "SELECT s.SupplierID, COUNT(CASE WHEN p.Discontinued = 1 THEN p.ProductID END) * 100.0 / COUNT(p.ProductID) AS DiscontinuedPercentage FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who is the top-performing employee in terms of sales?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What products have a reorder level greater than their current stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List suppliers with more than three discontinued products.",
        "output": "SELECT SupplierID FROM products WHERE Discontinued = 1 GROUP BY SupplierID HAVING COUNT(*) > 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have faced shipping delays?",
        "output": "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the percentage of discontinued products per category?",
        "output": "SELECT categories.CategoryName, COUNT(*) * 100.0 / NULLIF(COUNT(products.ProductID), 0) AS discontinued_rate FROM products JOIN categories ON products.CategoryID = categories.CategoryID WHERE products.Discontinued = 1 GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of products in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of unique products ordered this year?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were shipped late last month?",
        "output": "SELECT (COUNT(o.OrderID) FILTER (WHERE o.ShippedDate > o.RequiredDate) * 100.0 / COUNT(o.OrderID)) AS LateOrderPercentage FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of order fulfillment time across different regions?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for all shipped orders per country?",
        "output": "SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders WHERE orders.ShippedDate IS NOT NULL GROUP BY orders.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of years of experience for all employees?",
        "output": "SELECT SUM(TIMESTAMPDIFF(YEAR, employees.HireDate, CURDATE())) AS TotalYearsExperience FROM employees",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between shipping cost and delivery time?",
        "output": "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS CorrelationCostTime FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total value of products currently in stock.",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month in the past year?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY OrderYear, OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of shipped orders per month?",
        "output": "SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(OrderID) AS ShippedOrders FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify all employees hired in the last year and their initial sales performance.",
        "output": "SELECT employees.EmployeeID, CONCAT(FirstName, ' ', LastName) AS FullName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS InitialSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY employees.EmployeeID, FullName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have completed sales across multiple countries?",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) > 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales by each supplier in 2023?",
        "output": "SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average units on order for each supplier.",
        "output": "SELECT p.SupplierID, AVG(p.UnitsOnOrder) AS AvgUnitsOnOrder FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What was the average discount applied to orders in 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Rank employees based on the total value of discounts provided in their orders.",
        "output": "SELECT E.EmployeeID, SUM(OD.UnitPrice * OD.Quantity * OD.Discount) AS TotalDiscountValue FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY E.EmployeeID ORDER BY TotalDiscountValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have a freight cost above $50?",
        "output": "SELECT COUNT(*) FROM orders WHERE Freight > 50",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders for each shipping method used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify orders with the highest discounts.",
        "output": "SELECT OrderID, Discount FROM [Order Details] ORDER BY Discount DESC LIMIT 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are currently on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average product price for each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for orders shipped using each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 3 suppliers based on the number of products supplied.",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has placed the highest number of orders?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total stock value for each product.",
        "output": "SELECT ProductName, (UnitPrice * UnitsInStock) AS StockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who has handled the most orders for the product with the highest selling price.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].ProductID = (SELECT ProductID FROM [Order Details] ORDER BY UnitPrice DESC LIMIT 1) GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have been ordered the most across all customers?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the lowest average lead time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue for products that are not discontinued?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees based on sales performance for the previous quarter.",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS EmployeeName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER)) AND YEAR(orders.OrderDate) = YEAR(DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER)) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of products on order for each supplier?",
        "output": "SELECT suppliers.CompanyName, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated from discontinued products?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late in the last year?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = 2022;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have the highest sales performance this year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped to a specific country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders WHERE ShipCountry = 'Specific Country' GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products per category?",
        "output": "SELECT c.CategoryName, AVG(p.UnitPrice) AS AveragePrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are from each country?",
        "output": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest number of units sold in July 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY products.ProductID, products.ProductName ORDER BY total_sold DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders had a shipping cost above $100?",
        "output": "SELECT COUNT(CASE WHEN Freight > 100 THEN 1 END) * 100.0 / COUNT(OrderID) AS PercentageAbove100 FROM orders",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest lifetime value?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CLV FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY CLV DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the average price of products vary by category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the most orders in a given year.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY employees.EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders that included a discount?",
        "output": "SELECT COUNT(CASE WHEN Discount > 0 THEN 1 END) * 100.0 / COUNT(*) AS PercentageWithDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between the required date and the actual shipped date for late orders?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageLateDays FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping region has the highest order volume?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY ShipRegion ORDER BY OrderVolume DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List orders shipped after the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the lowest total units in stock.",
        "output": "SELECT s.SupplierID, s.CompanyName, SUM(p.UnitsInStock) AS TotalUnitsInStock FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID, s.CompanyName ORDER BY TotalUnitsInStock ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total units on order for each supplier.",
        "output": "SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique customers placed orders last month?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month') AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 month');",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much sales revenue was generated by each employee in Q1 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with average lead times above the overall average lead time.",
        "output": "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID = o.OrderID GROUP BY s.CompanyName HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > (SELECT AVG(DATEDIFF(o2.ShippedDate, o2.OrderDate)) FROM orders o2);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend of shipping costs over the past six months?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the proportion of discontinued products to total products available.",
        "output": "SELECT (COUNT(*) FILTER (WHERE Discontinued = 1) * 1.0 / COUNT(*)) AS DiscontinuedProportion FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier for the delivery of products?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM products JOIN orders ON products.ProductID = orders.OrderID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total order quantity for orders shipped by different freight companies?",
        "output": "SELECT ShipVia, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees with the longest tenure at the company.",
        "output": "SELECT employees.EmployeeID, (CURDATE() - employees.HireDate) / 365 AS YearsAtCompany FROM employees ORDER BY YearsAtCompany DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee reports to the highest number of orders?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the category with the highest total sales revenue.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * (od.UnitPrice * (1 - od.Discount))) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with below-average stock levels compared to their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most expensive product supplied by each supplier?",
        "output": "SELECT s.SupplierID, s.CompanyName, p.ProductName, p.UnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitPrice = (SELECT MAX(p2.UnitPrice) FROM products p2 WHERE p2.SupplierID = s.SupplierID);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend of total sales over the past five years?",
        "output": "SELECT DATE_TRUNC('year', OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('year', OrderDate) ORDER BY Year;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost per order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied on orders for each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total units sold for each product category?",
        "output": "SELECT categories.CategoryID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM categories JOIN products ON categories.CategoryID = products.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units are currently on order for each product?",
        "output": "SELECT ProductID, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight cost per country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for the last month?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.sale_date) = YEAR(CURRENT_DATE) AND MONTH(od.sale_date) = MONTH(CURRENT_DATE) - 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 3 suppliers by total number of units delivered.",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest unit price?",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE UnitPrice = (SELECT MAX(UnitPrice) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped late each month?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many returning customers are there each month?",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(DISTINCT CASE WHEN OrderDate < DATEADD(MONTH, -1, OrderDate) THEN CustomerID ELSE NULL END) AS ReturningCustomers FROM orders GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the total sales by employees who were hired last year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(employees.HireDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time last month?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL '1' MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL '1' MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top 3 cities by total sales revenue.",
        "output": "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average price of products that are not discontinued?",
        "output": "SELECT AVG(p.UnitPrice) AS AveragePrice FROM products p WHERE p.Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total value of the current inventory for each product.",
        "output": "SELECT ProductName, (UnitPrice * UnitsInStock) AS TotalValue FROM products;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the highest average order value?",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY AvgOrderValue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount offered on orders in March 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 3 AND YEAR(orders.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 5 products sold by quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top three categories by total sales revenue.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY Revenue DESC FETCH FIRST 3 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late compared to their required date?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each category of products?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have incurred a freight cost over $100?",
        "output": "SELECT COUNT(OrderID) AS HighFreightOrders FROM orders WHERE Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the highest number of orders placed?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average number of days between the order date and the required date for orders?",
        "output": "SELECT AVG(DATEDIFF(o.RequiredDate, o.OrderDate)) AS AvgDays FROM orders o;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with zero sales this year.",
        "output": "SELECT p.ProductName FROM products p WHERE p.ProductID NOT IN (SELECT od.ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE));",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products are still in inventory?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock > 0 AND Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest number of different products supplied?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average quantity of products per order?",
        "output": "SELECT AVG(quantity_per_order) AS AverageQuantityPerOrder FROM (SELECT OrderID, SUM(Quantity) AS quantity_per_order FROM [Order Details] GROUP BY OrderID) AS order_quantities;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the Inventory Turnover Ratio for each product.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier on a monthly basis?",
        "output": "SELECT products.SupplierID, MONTH(orders.OrderDate) AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.ShippedDate IS NOT NULL GROUP BY products.SupplierID, MONTH(orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many employees have sales exceeding $100,000 in Q3 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY employees.EmployeeID HAVING total_sales > 100000",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products by each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the most common customer demographics for high-value customers in 2023?",
        "output": "SELECT customerDemographics.CustomerDesc, COUNT(DISTINCT customers.CustomerID) AS customer_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND orders.OrderID IN (SELECT DISTINCT orders.OrderID FROM [Order Details] WHERE [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) > (SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details])) GROUP BY customerDemographics.CustomerDesc ORDER BY customer_count DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the net profit margin for each product type?",
        "output": "SELECT ProductID, ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) - SUM([Order Details].Quantity * products.UnitPrice)) / NULLIF(SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)), 0) AS NetProfitMargin FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the product performance compare across product categories?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find suppliers with the lowest product prices.",
        "output": "SELECT suppliers.SupplierID, suppliers.SupplierName, MIN(products.UnitPrice) AS LowestPrice FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.SupplierName ORDER BY LowestPrice;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly average shipping cost per order?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given in all orders?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the relationship between unit price and sales quantity?",
        "output": "SELECT CORR(UnitPrice, Quantity) AS Correlation FROM [Order Details];",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most expensive product by unit price?",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of discontinued products by category?",
        "output": "SELECT CategoryID, COUNT(*) AS TotalDiscontinued FROM products WHERE Discontinued = 1 GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total discount given on all orders.",
        "output": "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for each shipping country?",
        "output": "SELECT orders.ShipCountry, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY orders.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly sales trend of each product for the last year.",
        "output": "SELECT p.ProductName, MONTH(o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY p.ProductName, MONTH(o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top-selling products based on total sales quantity?",
        "output": "SELECT [Order Details].ProductID, p.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID GROUP BY [Order Details].ProductID, p.ProductName ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the product with the highest unit price for each supplier?",
        "output": "SELECT p.SupplierID, p.ProductName, p.UnitPrice FROM products p JOIN (SELECT SupplierID, MAX(UnitPrice) AS MaxPrice FROM products GROUP BY SupplierID) mp ON p.SupplierID = mp.SupplierID AND p.UnitPrice = mp.MaxPrice;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders has each employee handled?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products with the highest inventory levels?",
        "output": "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average shipping delay for all orders.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingDelay FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products with zero units in stock and not on order.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with an average lead time greater than 10 days.",
        "output": "SELECT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product were sold last quarter?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS UnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATEPART(QUARTER, od.OrderDate) = DATEPART(QUARTER, GETDATE()) - 1 AND DATEPART(YEAR, od.OrderDate) = DATEPART(YEAR, GETDATE()) GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the most profitable product category in 2023.",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 territories with the most sales in 2023?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY territories.TerritoryDescription ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee achieved the highest sales in the last quarter?",
        "output": "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN {start_date} AND {end_date} GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many active employees are there by country?",
        "output": "SELECT Country, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the countries with the highest number of orders placed this year.",
        "output": "SELECT customers.Country, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY customers.Country ORDER BY number_of_orders DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 5 cities by number of orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipCity ORDER BY NumOrders DESC LIMIT 5",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees along with their managers and total sales.",
        "output": "SELECT e1.EmployeeID AS EmployeeID, CONCAT(e1.FirstName, ' ', e1.LastName) AS EmployeeName, CONCAT(e2.FirstName, ' ', e2.LastName) AS ManagerName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees e1 LEFT JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID JOIN orders ON e1.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY e1.EmployeeID, e1.FirstName, e1.LastName, e2.FirstName, e2.LastName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in the last quarter?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the most products currently in stock.",
        "output": "SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalUnitsInStock DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of total revenue comes from repeat customers?",
        "output": "SELECT (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount) * CASE WHEN num_orders > 1 THEN 1 ELSE 0 END) / SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) AS RepeatRevenuePercentage FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN (SELECT CustomerID, COUNT(OrderID) as num_orders FROM orders GROUP BY CustomerID) repeat_customers ON o.CustomerID = repeat_customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount amount provided to each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied to orders by each customer?",
        "output": "SELECT c.CustomerID, AVG(od.Discount) AS AverageDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average reorder level for products from each supplier?",
        "output": "SELECT p.SupplierID, AVG(p.ReorderLevel) AS AvgReorderLevel FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How much revenue was generated from orders with no discount?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity) AS NoDiscountRevenue FROM [Order Details] od WHERE od.Discount = 0",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has placed the largest number of orders this year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrdersCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID ORDER BY OrdersCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have a shipping delay?",
        "output": "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the stock level of products change month over month?",
        "output": "SELECT MONTH(CAST(CURRENT_TIMESTAMP AS DATE)) AS Month, SUM(UnitsInStock) AS MonthlyStock FROM products GROUP BY MONTH(CAST(CURRENT_TIMESTAMP AS DATE))",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend of order placements over the past year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been shipped, but not yet delivered?",
        "output": "SELECT COUNT(o.OrderID) AS ShippedNotDelivered FROM orders o WHERE o.ShippedDate IS NOT NULL AND o.RequiredDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products with stock below their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with unit prices above the average unit price.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier supplies the most products, and what are those products?",
        "output": "SELECT s.SupplierID, s.CompanyName, p.ProductID, p.ProductName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE s.SupplierID = (SELECT SupplierID FROM (SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1) subquery);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products that have not been ordered in the past 6 months.",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL OR od.OrderDate < DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which cities have customers with the highest customer lifetime value?",
        "output": "SELECT c.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.City ORDER BY CustomerLifetimeValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find all products that have never been discounted.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(CASE WHEN od.Discount > 0 THEN 1 ELSE 0 END) = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order quantity per product?",
        "output": "SELECT ProductID, AVG(Quantity) AS AvgQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the employee who has handled the most orders.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue per employee?",
        "output": "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total revenue for each category.",
        "output": "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(CAST(p.UnitsInStock AS FLOAT)), 0) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with above-average sales performance.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > (SELECT AVG(total_sales) FROM (SELECT SUM(Quantity) AS total_sales FROM [Order Details] GROUP BY ProductID) AS subquery);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the largest deficit based on reorder level vs current stock?",
        "output": "SELECT products.ProductID, products.ReorderLevel - products.UnitsInStock AS deficit FROM products WHERE products.ReorderLevel > products.UnitsInStock ORDER BY deficit DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered and who are their suppliers?",
        "output": "SELECT p.ProductName, s.SupplierName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock <= p.ReorderLevel",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have both no stock and no orders?",
        "output": "SELECT COUNT(ProductID) AS NumberOfProducts FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the highest number of late shipments?",
        "output": "SELECT employees.EmployeeID, COUNT(*) AS LateShipmentCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE DATEDIFF(orders.ShippedDate, orders.RequiredDate) > 0 GROUP BY employees.EmployeeID ORDER BY LateShipmentCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders for each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the return rate of customers from the previous year?",
        "output": "SELECT (COUNT(DISTINCT orders.CustomerID) WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2021-01-01' AND '2021-12-31') AS customer_return_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many different products are supplied by each supplier?",
        "output": "SELECT s.SupplierName, COUNT(DISTINCT p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the product performance comparison between Q1 and Q2 of 2023?",
        "output": "SELECT TO_CHAR(orders.OrderDate, 'YYYY-Q') AS quarter, products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY TO_CHAR(orders.OrderDate, 'YYYY-Q'), products.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the most common shipped city for each employee.",
        "output": "SELECT employees.EmployeeID, orders.ShipCity, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, orders.ShipCity ORDER BY employees.EmployeeID, OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value across all products?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the highest shipping cost recorded in the last month?",
        "output": "SELECT MAX(Freight) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest total sales last year?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] WHERE YEAR(OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1)) GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales quantity last month?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and stock levels of products that need to be reordered?",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product were sold on average per month?",
        "output": "SELECT p.ProductName, AVG(od.Quantity) AS AverageMonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the distribution of order quantities for each product?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct products have been ordered in the last six months?",
        "output": "SELECT COUNT(DISTINCT od.ProductID) AS DistinctProductsOrdered FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '6 months'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average unit price of products ordered in the first quarter?",
        "output": "SELECT AVG(od.UnitPrice) AS AvgUnitPrice FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(QUARTER FROM o.OrderDate) = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the product with the highest inventory turnover ratio.",
        "output": "SELECT TOP 1 p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnoverRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products in terms of sales performance this month?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the best delivery performance in terms of lead time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Avg_Lead_Time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY Avg_Lead_Time ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate between 2022 and 2023?",
        "output": "SELECT (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total units ordered for products that are not discontinued.",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalUnitsOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region has the highest customer retention rate in 2023?",
        "output": "SELECT regions.RegionDescription, COUNT(DISTINCT orders.CustomerID) / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = 2022) AS retention_rate FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN regions ON customers.Region = regions.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY regions.RegionDescription ORDER BY retention_rate DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has delivered the highest revenue during the past year?",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY s.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given across all orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the revenue generated for each product category?",
        "output": "SELECT c.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are below their reorder level as of now?",
        "output": "SELECT products.ProductID, products.ProductName, products.UnitsInStock, products.ReorderLevel FROM products WHERE products.UnitsInStock < products.ReorderLevel",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Compute the average order quantity for each product.",
        "output": "SELECT products.ProductName, AVG([Order Details].Quantity) AS AverageOrderQuantity FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Lifetime Value for each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE ShippedDate IS NOT NULL GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the revenue generated by each product category.",
        "output": "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are below their reorder level?",
        "output": "SELECT COUNT(ProductName) AS NumberOfProducts FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the most frequent orders.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderFrequency FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderFrequency DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest total quantity sold?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the total freight cost by shipping company.",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the country with the highest number of orders.",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer last year?",
        "output": "SELECT CustomerID, COUNT(OrderID) FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with a declining trend in sales over the past year.",
        "output": "SELECT ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(year, -1, GETDATE()) GROUP BY ProductName HAVING SUM(CASE WHEN YEAR(od.OrderDate) = YEAR(GETDATE()) THEN od.Quantity ELSE 0 END) < SUM(CASE WHEN YEAR(od.OrderDate) = YEAR(GETDATE()) - 1 THEN od.Quantity ELSE 0 END);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders include a discount?",
        "output": "SELECT COUNT(DISTINCT OrderID) FILTER(WHERE Discount > 0) / COUNT(DISTINCT OrderID) * 100.0 AS DiscountedOrdersPercentage FROM [Order Details]",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 5 suppliers based on total sales revenue.",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a stock level below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue per country?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with low performance metrics.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS SalesQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) < 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time for delivering products?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the shortest delivery time?",
        "output": "SELECT suppliers.CompanyName, MIN(AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate))) AS ShortestLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate IS NOT NULL AND orders.OrderDate IS NOT NULL GROUP BY suppliers.CompanyName ORDER BY ShortestLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the financial impact of discounts on total sales?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS DiscountImpact FROM [Order Details] od;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped in 2022?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE YEAR(ShippedDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the most units in stock?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID ORDER BY TotalUnitsInStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been delayed in shipment past their required date?",
        "output": "SELECT COUNT(OrderID) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly distribution of late deliveries?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateDeliveries FROM orders GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which region has the fastest average supplier lead time?",
        "output": "SELECT suppliers.Region, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.Region ORDER BY AvgLeadTime ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales figure broken down by employee countries?",
        "output": "SELECT employees.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest reorder levels?",
        "output": "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have achieved the top sales in the last six months?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product brought the highest revenue last year?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY od.ProductID ORDER BY ProductRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the highest total sales value?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Analyze the sales trend and predict the next quarter's sales for top products.",
        "output": "WITH SalesTrend AS (SELECT p.ProductID, MONTH(OrderDate) AS Month, SUM(od.Quantity) AS MonthlySales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, MONTH(OrderDate)) SELECT p.ProductName, st.CurrentQuarterSales, st.NextQuarterPrediction FROM products p JOIN (SELECT ProductID, SUM(CASE WHEN Month BETWEEN 1 AND 3 THEN MonthlySales ELSE 0 END) AS CurrentQuarterSales, SUM(CASE WHEN Month BETWEEN 4 AND 6 THEN MonthlySales ELSE 0 END) AS NextQuarterPrediction FROM SalesTrend GROUP BY ProductID) st ON p.ProductID = st.ProductID ORDER BY st.CurrentQuarterSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed orders in all available regions?",
        "output": "SELECT c.CustomerID FROM customers c WHERE NOT EXISTS (SELECT 1 FROM (SELECT DISTINCT Region FROM orders) r WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE o.CustomerID = c.CustomerID AND o.ShipRegion = r.Region));",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders in Q1 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the order volume differ between new and returning customers?",
        "output": "SELECT (SELECT COUNT(DISTINCT o1.CustomerID) FROM orders o1 WHERE NOT EXISTS (SELECT 1 FROM orders o2 WHERE o2.CustomerID = o1.CustomerID AND o2.OrderDate < '2023-01-01')) AS new_customers, (SELECT COUNT(DISTINCT o3.CustomerID) FROM orders o3 WHERE EXISTS (SELECT 1 FROM orders o4 WHERE o4.CustomerID = o3.CustomerID AND o4.OrderDate < '2023-01-01') AND o3.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AS returning_customers",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most orders pending shipment?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS PendingOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NULL GROUP BY employees.EmployeeID ORDER BY PendingOrders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given across all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How long, on average, does it take to fulfill an order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the percentage of discontinued products in relation to total products.",
        "output": "SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0) / COUNT(*) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify peak ordering days of the week.",
        "output": "SELECT DAYOFWEEK(OrderDate) AS DayOfWeek, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DAYOFWEEK(OrderDate) ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average sales per month for each employee for the last 6 months.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(MonthlySales) AS AvgMonthlySales FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales, MONTH(o.OrderDate) AS OrderMonth, YEAR(o.OrderDate) AS OrderYear FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY e.EmployeeID, MONTH(o.OrderDate), YEAR(o.OrderDate)) AS MonthlySalesTable GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products with the highest unit price?",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have been discontinued but still have quantities in stock?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value per month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the average order quantity for each product.",
        "output": "SELECT products.ProductName, AVG([Order Details].Quantity) AS AvgOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the growth in monthly sales for each employee over the past year.",
        "output": "SELECT employees.EmployeeID, MONTH(orders.OrderDate) AS Month, YEAR(orders.OrderDate) AS Year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY employees.EmployeeID, YEAR(orders.OrderDate), MONTH(orders.OrderDate) ORDER BY employees.EmployeeID, Year, Month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total discount given by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the earliest hire date among employees grouped by city.",
        "output": "SELECT City, MIN(HireDate) AS EarliestHireDate FROM employees GROUP BY City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders that were not shipped.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied to orders in November 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount_nov_2023 FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(MONTH FROM orders.OrderDate) = 11 AND EXTRACT(YEAR FROM orders.OrderDate) = 2023",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders shipped late each month?",
        "output": "SELECT EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(o.OrderID) AS LateOrderCount FROM orders o WHERE o.ShippedDate > o.RequiredDate GROUP BY OrderYear, OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products by sales revenue?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) as TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the highest on-time delivery rate?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the most sales?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance of products in terms of sales quantity for the current month?",
        "output": "SELECT P.ProductName, SUM(OD.Quantity) AS TotalQuantitySold FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE MONTH(CURRENT_DATE) = MONTH(OD.OrderDate) AND YEAR(CURRENT_DATE) = YEAR(OD.OrderDate) GROUP BY P.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category has the highest inventory turnover ratio?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY inventory_turnover DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly sales performance for each product.",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, p.ProductID, SUM(od.Quantity) AS MonthlyPerformance FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY EXTRACT(MONTH FROM o.OrderDate), p.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier's products are most frequently ordered?",
        "output": "SELECT s.SupplierID, COUNT(od.ProductID) AS OrderFrequency FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY OrderFrequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost over all orders?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers placed orders each month?",
        "output": "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY YEAR(OrderDate), MONTH(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has provided the highest quantity of products this year?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity) AS total_quantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY s.SupplierID ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique customers placed orders in the first half of this year?",
        "output": "SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What products have not met their reorder levels in the last month?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.ReorderLevel > p.UnitsInStock AND DATEDIFF(MONTH, od.OrderDate, CURRENT_DATE) = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the order frequency of each customer?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderFrequency FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top three cities where employees have made the most sales?",
        "output": "SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the overall inventory turnover ratio for the company?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the customer with the highest average order value.",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY AverageOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders used each shipping method in the last year?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How has the sales performance of each product changed over the past three months?",
        "output": "SELECT o.ProductID, SUM(o.Quantity) AS SalesLastThreeMonths FROM [Order Details] o JOIN orders od ON o.OrderID = od.OrderID WHERE od.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY o.ProductID ORDER BY SalesLastThreeMonths DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders had a freight cost greater than $50?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE Freight > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the month with the highest average shipping cost in the last year.",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) AND OrderDate < CURRENT_DATE GROUP BY MONTH(OrderDate) ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How much revenue was generated by each employee in the past quarter?",
        "output": "SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmployeeSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY o.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders are pending shipment?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top five best-selling products this year?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURRENT_DATE) GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the top 3 cities with the highest number of orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees without a manager.",
        "output": "SELECT EmployeeID, FirstName, LastName FROM employees WHERE ReportsTo IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How much freight cost was incurred each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with stock levels below their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total discount amount applied across all orders?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the revenue impact of the top 3 discounted products.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS DiscountedImpact FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY DiscountedImpact DESC FETCH FIRST 3 ROWS ONLY;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales for each product category last year?",
        "output": "SELECT c.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON [Order Details].OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the lowest average freight cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia ORDER BY AvgFreightCost LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of the current inventory for each category?",
        "output": "SELECT CategoryID, SUM(UnitsInStock * UnitPrice) AS TotalValue FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find out which supplier provides the highest number of discontinued products.",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID ORDER BY DiscontinuedProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are located in a specific region?",
        "output": "SELECT CompanyName FROM suppliers WHERE Region = 'specific_region';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products have been discontinued as of the current date?",
        "output": "SELECT COUNT(products.ProductID) FROM products WHERE products.Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many employees have a sales territory in the region described as 'Western'?",
        "output": "SELECT COUNT(DISTINCT employeeTerritories.EmployeeID) AS employee_count FROM employeeTerritories JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE region.RegionDescription = 'Western';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the product with the maximum quantity ordered.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC FETCH FIRST 1 ROW ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for orders placed in the first half of 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have the highest order counts in different shipping regions?",
        "output": "SELECT e.EmployeeID, o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipRegion ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average unit price of products supplied by each supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have an inventory turnover ratio greater than the average ratio?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName HAVING (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) > (SELECT AVG(subquery.turnover_ratio) FROM (SELECT SUM(od1.Quantity * od1.UnitPrice) / AVG(p1.UnitsInStock) AS turnover_ratio FROM products p1 JOIN [Order Details] od1 ON p1.ProductID = od1.ProductID GROUP BY p1.ProductID) subquery);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipper had the least number of delayed orders?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS DelayedOrders FROM orders GROUP BY ShipVia ORDER BY DelayedOrders ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped on-time in March 2023?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND DATE(OrderDate) BETWEEN '2023-03-01' AND '2023-03-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest inventory turnover ratio for the past month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE) GROUP BY p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average order value for each employee.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders with no discount applied?",
        "output": "SELECT (COUNT(CASE WHEN OD.Discount = 0 THEN OD.OrderID END) * 100.0) / COUNT(OD.OrderID) AS NoDiscountPercentage FROM [Order Details] OD;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the most common shipping method used for orders?",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country generates the highest sales revenue?",
        "output": "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products require reordering immediately (stock level below reorder level)?",
        "output": "SELECT COUNT(*) AS ProductsToReorder FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products that are discontinued but still have units in stock.",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers by the number of products supplied.",
        "output": "SELECT suppliers.SupplierID, COUNT(products.ProductID) AS NumberOfProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY NumberOfProducts DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied to the orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping companies are used most frequently based on the ShipVia field?",
        "output": "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a reorder level greater than their stock?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the total sales for each country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top three suppliers with the earliest average delivery times.",
        "output": "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) ASC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each customer?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top three products with the highest sales last month.",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the customer retention rate from January to March 2023.",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the stock level compare to the reorder level for each product?",
        "output": "SELECT ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the Inventory Turnover Ratio for the past month.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN '2023-09-01' AND '2023-09-30';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have freight costs exceeding $100?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products with a reorder level higher than 20 but less than 100.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > 20 AND ReorderLevel < 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the least average shipping cost per order?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY avg_shipping_cost ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders received a discount?",
        "output": "SELECT COUNT(DISTINCT CASE WHEN od.Discount > 0 THEN od.OrderID END) * 100.0 / COUNT(DISTINCT od.OrderID) AS DiscountOrderPercentage FROM [Order Details] od;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer placed the most orders?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping method has the lowest average cost?",
        "output": "SELECT o.ShipVia, AVG(o.Freight) AS avg_shipping_cost FROM orders o GROUP BY o.ShipVia ORDER BY avg_shipping_cost ASC",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify products that are low in stock and need reordering.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 suppliers by total sales revenue?",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the distribution of orders among different shipping methods?",
        "output": "SELECT orders.ShipVia, COUNT(*) AS order_count FROM orders GROUP BY orders.ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the top 3 products with the highest reorder level.",
        "output": "SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of each product sold last month?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) FROM [Order Details] JOIN products ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATEADD(month, -1, GETDATE()) AND GETDATE()) GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the city with the highest number of customers.",
        "output": "SELECT City, COUNT(CustomerID) FROM customers GROUP BY City ORDER BY COUNT(CustomerID) DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees with the highest average sales per order.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgSalesPerOrder FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgSalesPerOrder DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied across all orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have inventory levels below their reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of late shipments?",
        "output": "SELECT ShipCity, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateShipments FROM orders GROUP BY ShipCity ORDER BY LateShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest Customer Lifetime Value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY CustomerLifetimeValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate for customers from the last year?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN CustomerID END) * 1.0 / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2022-01-01' THEN CustomerID END), 0)) * 100 AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest revenue across all orders?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 5 customers by order frequency.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY CustomerID ORDER BY OrderFrequency DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for March 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most number of products that are currently on order?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS OnOrderCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsOnOrder > 0 GROUP BY s.SupplierID ORDER BY OnOrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with the highest inventory turnover ratio.",
        "output": "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(CAST(p.UnitsInStock AS DECIMAL)), 0)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY InventoryTurnover DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between the order date and required date?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageTimeToRequire FROM orders",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which cities have the highest concentration of customers?",
        "output": "SELECT customers.City, COUNT(customers.CustomerID) AS customer_count FROM customers GROUP BY customers.City ORDER BY customer_count DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue for orders with more than 5 items.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING SUM(od.Quantity) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average number of units in stock for each product category?",
        "output": "SELECT p.CategoryID, AVG(p.UnitsInStock) AS AvgUnitsInStock FROM products p GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to orders per month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has delivered products the fastest on average in the last month?",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY s.CompanyName ORDER BY AvgLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city had the most late deliveries in the past year?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ShipCity ORDER BY LateDeliveries DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the relationship between employee tenure and sales performance?",
        "output": "SELECT e.EmployeeID, DATEDIFF(CURRENT_DATE, e.HireDate) AS Tenure, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipping costs?",
        "output": "SELECT Freight, COUNT(*) AS Frequency FROM orders GROUP BY Freight ORDER BY Frequency DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT od.ProductID, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for each product in the current month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) as TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_FORMAT(od.OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of each product sold?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have been shipped by each shipping company per month?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY Month, ShipVia ORDER BY Month, ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time per supplier for delivering products?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = [Order Details].ProductID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total number of products sold by each employee.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average discount given on all orders.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average shipping cost for domestic orders compare to international orders?",
        "output": "SELECT CASE WHEN ShipCountry = 'USA' THEN 'Domestic' ELSE 'International' END AS OrderType, AVG(Freight) AS AvgFreight FROM orders GROUP BY OrderType;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping destination country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipCountry ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find customers who haven't placed an order in the last year.",
        "output": "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1' YEAR);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by customers in 'Germany' last month?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Country = 'Germany') AND OrderDate >= DATEADD(MONTH, -1, DATE_TRUNC('MONTH', CURRENT_DATE)) AND OrderDate < DATE_TRUNC('MONTH', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity sold for each product?",
        "output": "SELECT P.ProductName, SUM(OD.Quantity) AS TotalQuantity FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to each order?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the customer lifetime value for each customer in California.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Region = 'CA' GROUP BY customers.CustomerID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders are shipped within the required date?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied to orders?",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were delayed beyond their required date?",
        "output": "SELECT COUNT(orders.OrderID) AS delayed_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were processed by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY SupplierID ORDER BY TotalProducts DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders include a discount greater than 10%?",
        "output": "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od WHERE od.Discount > 0.1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most products that are currently in stock?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS ProductCount FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock > 0 GROUP BY s.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total value of products currently in stock.",
        "output": "SELECT SUM(UnitsInStock * UnitPrice) AS TotalStockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 3 regions in terms of total order quantity?",
        "output": "SELECT ShipRegion, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY TotalQuantity DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the most number of orders in the last quarter?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN DATE_ADD(LAST_DAY(DATE_SUB(CURRENT_DATE, INTERVAL QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH))), INTERVAL 1 DAY) AND LAST_DAY(DATE_SUB(CURRENT_DATE, INTERVAL MONTH(CURRENT_DATE)-QUARTER(CURRENT_DATE)*3 MONTH)) GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products with no current stock and no orders.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest average units in stock?",
        "output": "SELECT p.CategoryID, AVG(p.UnitsInStock) AS AverageUnitsInStock FROM products p GROUP BY p.CategoryID ORDER BY AverageUnitsInStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 selling products by quantity?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalSold DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which order had the highest overall value?",
        "output": "SELECT O.OrderID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS OrderValue FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY O.OrderID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for the year 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not been sold at all?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which countries have the highest number of orders?",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCountry ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee has processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped in 2023?",
        "output": "SELECT SUM(Freight) FROM orders WHERE EXTRACT(YEAR FROM ShippedDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List suppliers with the most products under reorder.",
        "output": "SELECT SupplierID, COUNT(*) AS ProductsUnderReorder FROM products WHERE UnitsInStock < ReorderLevel GROUP BY SupplierID ORDER BY ProductsUnderReorder DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum freight cost for any single order?",
        "output": "SELECT MAX(Freight) AS MaxFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most diverse product line?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.CategoryID) AS CategoryCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY CategoryCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which orders were delivered on or before the required date?",
        "output": "SELECT orders.OrderID FROM orders WHERE orders.ShippedDate <= orders.RequiredDate",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products need to be reordered in each category?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS ReordersNeeded FROM products WHERE UnitsInStock < ReorderLevel GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which cities have the highest number of unique customers?",
        "output": "SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value?",
        "output": "SELECT AVG(Subtotal) AS AverageOrderValue FROM (SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Subtotal FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS OrderValues;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which regions have the highest total sales?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the average age of employees at the company.",
        "output": "SELECT AVG(YEAR(CURRENT_DATE) - YEAR(BirthDate)) AS AverageAge FROM employees;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of distinct customers?",
        "output": "SELECT o.EmployeeID, COUNT(DISTINCT o.CustomerID) AS DistinctCustomers FROM orders o GROUP BY o.EmployeeID ORDER BY DistinctCustomers DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories are associated with the highest average product price?",
        "output": "SELECT p.CategoryID, AVG(p.UnitPrice) AS AvgPrice FROM products p GROUP BY p.CategoryID ORDER BY AvgPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders shipped via method 3?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipVia = 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who achieve over $100,000 in sales.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING TotalSales > 100000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are located in each country?",
        "output": "SELECT Country, COUNT(CustomerID) FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the smallest average order discount applied to their orders?",
        "output": "SELECT s.SupplierID, AVG(od.Discount) AS AvgDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY AvgDiscount ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated this month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(MONTH FROM orders.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM orders.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product generated the highest revenue in the last quarter?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY products.ProductID ORDER BY revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for the first half of 2023?",
        "output": "SELECT (COUNT(DISTINCT o1.CustomerID) / COUNT(DISTINCT o2.CustomerID)) AS customer_retention_rate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' AND o2.OrderDate < '2023-01-01'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given to each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average discount across all orders.",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given across all products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders that used each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS ShippingPercentage FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many suppliers supply more than 3 different products?",
        "output": "SELECT COUNT(*) FROM (SELECT SupplierID FROM products GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 3) AS SupplierCount;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country had the highest total sales?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the Average Order Value for the past six months?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -6, CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the most popular shipping method used by customers.",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average unit price of discontinued products.",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions have the longest order fulfillment times?",
        "output": "SELECT ShipRegion, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillmentTime DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which regions have the longest order fulfillment times?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillmentTime DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees report directly to each manager?",
        "output": "SELECT Manager.EmployeeID, COUNT(Employee.EmployeeID) AS DirectReports FROM employees AS Employee JOIN employees AS Manager ON Employee.ReportsTo = Manager.EmployeeID GROUP BY Manager.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most popular shipping country?",
        "output": "SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products in each category?",
        "output": "SELECT p.CategoryID, AVG(p.UnitPrice) AS AveragePrice FROM products p GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given in the last quarter?",
        "output": "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscountLastQuarter FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(OrderDate) = YEAR(CURDATE()));",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value for customers from each country?",
        "output": "SELECT c.Country, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 countries with the highest number of customers?",
        "output": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country ORDER BY NumberOfCustomers DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of units on order for each supplier?",
        "output": "SELECT s.CompanyName, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category of products has the highest units on order?",
        "output": "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the percentage of products that are discontinued.",
        "output": "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM products) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of salaries across different job titles?",
        "output": "SELECT employees.Title, AVG(employees.Salary) AS AverageSalary FROM employees GROUP BY employees.Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the daily average quantity ordered for discontinued products?",
        "output": "SELECT ProductID, AVG(Quantity) FROM [Order Details] WHERE ProductID IN (SELECT ProductID FROM products WHERE Discontinued = 1) GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the most customer orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated by each sales territory?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated per supplier?",
        "output": "SELECT SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the retention rate for customers between January and June 2023.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' THEN o.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN o.OrderDate < '2023-01-01' THEN o.CustomerID END), 0)) * 100 AS RetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category generates the highest revenue?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY category_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who is the most effective employee in terms of sales per territory?",
        "output": "SELECT employees.EmployeeID, territories.TerritoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY employees.EmployeeID, territories.TerritoryID ORDER BY total_sales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the monthly growth trend in total sales for each employee?",
        "output": "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate) ORDER BY e.EmployeeID, Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the highest discount given on an order and by which employee?",
        "output": "SELECT o.EmployeeID, od.Discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID ORDER BY od.Discount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many days is the average shipping delay for orders handled by each employee?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgShippingDelay FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products that have never been ordered.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average discount given on orders involving a specific product.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details] WHERE ProductID = YOUR_PRODUCT_ID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductSales FROM [Order Details] GROUP BY ProductID ORDER BY ProductSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has handled the most shipments?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS ShipmentsHandled FROM orders GROUP BY EmployeeID ORDER BY ShipmentsHandled DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "In which region is the average freight cost the highest?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipRegion ORDER BY AverageFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city had the highest freight costs in the last year?",
        "output": "SELECT ShipCity, SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipCity ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have supplied products that are below the reorder level?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock < products.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have received the highest average discount?",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AvgDiscount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of products sold per month?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees with consistent monthly sales growth.",
        "output": "SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') ORDER BY employees.EmployeeID, OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the manager with the highest performing team based on total sales.",
        "output": "SELECT m.FirstName, m.LastName, SUM(t.TotalSales) AS TopTeamSales FROM employees e JOIN employees m ON e.ReportsTo = m.EmployeeID JOIN (SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID) t ON e.EmployeeID = t.EmployeeID GROUP BY m.EmployeeID, m.FirstName, m.LastName ORDER BY TopTeamSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied across all orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the monthly customer retention rate for the last year.",
        "output": "SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, (COUNT(DISTINCT o.CustomerID) FILTER (WHERE EXISTS (SELECT 1 FROM orders o2 WHERE o2.CustomerID = o.CustomerID AND o2.OrderDate < DATE_TRUNC('month', o.OrderDate)))::FLOAT / NULLIF(COUNT(DISTINCT o.CustomerID), 0)) * 100 AS RetentionRate FROM orders o WHERE o.OrderDate >= '2022-01-01' AND o.OrderDate < '2023-01-01' GROUP BY Year, Month ORDER BY Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have been discontinued by each supplier?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity per unit for all products in stock?",
        "output": "SELECT AVG(CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS UNSIGNED)) AS AvgQuantityPerUnit FROM products WHERE UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have not placed any orders recently?",
        "output": "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL OR orders.OrderDate < CURRENT_DATE - INTERVAL '6 months';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were fulfilled within two days of the order date?",
        "output": "SELECT COUNT(*) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 3 suppliers by overall product quality and delivery speed.",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime, COUNT(od.ProductID) AS QualityProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE p.Discontinued = 0 GROUP BY s.SupplierID ORDER BY QualityProducts DESC, AvgLeadTime ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average time gap between order placement and shipping for each employee?",
        "output": "SELECT E.EmployeeID, AVG(DATEDIFF(O.ShippedDate, O.OrderDate)) AS AverageTimeGap FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID WHERE O.ShippedDate IS NOT NULL GROUP BY E.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed with a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of each product are currently on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum shipping delay recorded?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, RequiredDate)) AS MaxDelay FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been shipped in the last week?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate >= CURRENT_DATE - INTERVAL '7' DAY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost handled by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the lowest on-time delivery rate?",
        "output": "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed in each month?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY OrderMonth;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with low performance based on sales.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) < 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest on-time delivery rate?",
        "output": "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in December?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE EXTRACT(MONTH FROM o.OrderDate) = 12 GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales quantity in 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have both stock and on-order quantities greater than zero?",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock > 0 AND p.UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for all products in Q1 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of inventory currently in stock for each category?",
        "output": "SELECT c.CategoryID, SUM(p.UnitPrice * p.UnitsInStock) AS TotalInventoryValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders last year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been sold?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How often do products fall below the reorder level, and what is the average time to replenish?",
        "output": "SELECT ProductName, COUNT(*) AS ReorderEvents, AVG(DATEDIFF(day, ReorderLevelDate, ReplenishDate)) AS AverageReplenishTime FROM ReorderHistory GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with total order quantities below a specified threshold.",
        "output": "SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName HAVING COALESCE(SUM([Order Details].Quantity), 0) < 50;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units are currently on order for discontinued products?",
        "output": "SELECT SUM(UnitsOnOrder) FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the country with the highest number of shipped orders.",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country has the highest number of orders shipped?",
        "output": "SELECT orders.ShipCountry, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value this month?",
        "output": "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE)",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify all products that have never been ordered.",
        "output": "SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have not placed any orders this month.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost per shipped order by country?",
        "output": "SELECT o.ShipCountry, AVG(o.Freight) AS AvgFreightCost FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales in quantity in the month of January 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been shipped late (shipped date after required date)?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping recipient name appears most frequently in orders?",
        "output": "SELECT ShipName, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipName ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products did the top customer purchase?",
        "output": "SELECT COUNT(DISTINCT od.ProductID) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.CustomerID = (SELECT CustomerID FROM (SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Total FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY o.CustomerID ORDER BY Total DESC LIMIT 1) AS TopCustomer);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many orders have been placed with more than 20% discount?",
        "output": "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have zero units on order?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight cost for orders shipped to each country.",
        "output": "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handled the most orders in the last month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE DATE_TRUNC('month', OrderDate) = DATE_TRUNC('month', CURRENT_DATE - interval '1' month) GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers provide products that have the highest sales?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY supplier_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products need to be reordered based on current stock levels?",
        "output": "SELECT products.ProductName FROM products WHERE products.UnitsInStock < products.ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales in the last quarter?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the largest number of units per product?",
        "output": "SELECT p.SupplierID, MAX(CAST(SUBSTRING_INDEX(p.QuantityPerUnit, ' ', 1) AS UNSIGNED)) AS MaxQuantityPerUnit FROM products p GROUP BY p.SupplierID ORDER BY MaxQuantityPerUnit DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the average shipping cost per order for various shipping companies.",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales for orders shipped last quarter?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.ShippedDate) = QUARTER(CURDATE()) - 1 AND YEAR(orders.ShippedDate) = YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders last month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the month with the highest total sales in the previous year.",
        "output": "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY MONTH(o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify months with the most significant delays in shipping.",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month ORDER BY AverageDelay DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customer with the longest duration between first and last order.",
        "output": "SELECT c.CustomerID, DATEDIFF(MAX(o.OrderDate), MIN(o.OrderDate)) AS Duration FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY Duration DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the most revenue last quarter?",
        "output": "SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY ProductID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the highest average discount applied to their sales?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average freight cost change over the months?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 customers by total revenue generated.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the percentage of discontinued products that still have units in stock.",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products WHERE Discontinued = 1) AS Percentage FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find all products that are currently discontinued.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Analyze the monthly order trends and identify peak months.",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Year, Month ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the correlation between employee experience and total sales.",
        "output": "SELECT employees.EmployeeID, (DATEDIFF(CURDATE(), employees.HireDate) / 365) AS ExperienceYears, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each employee and what was their total freight?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders, SUM(Freight) AS TotalFreight FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average order size by country.",
        "output": "SELECT o.ShipCountry, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the time gap between order and shipment affect total sales?",
        "output": "SELECT DATEDIFF(orders.ShippedDate, orders.OrderDate) AS TimeGap, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY TimeGap;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 3 suppliers in terms of delivery speed?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most recent order for each customer.",
        "output": "SELECT CustomerID, MAX(OrderDate) AS RecentOrderDate FROM orders GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total value of products in stock for each supplier.",
        "output": "SELECT SupplierID, SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the suppliers providing more than 5 different products.",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID HAVING COUNT(DISTINCT ProductID) > 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per shipped order?",
        "output": "SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category generated the highest revenue?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY total_revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have delivered products with high discounts?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0.2 GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly on-time delivery rate?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have experienced the fastest growth in sales over the year?",
        "output": "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are on order for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitsOnOrder) FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units are in stock for each supplier's products?",
        "output": "SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity sold for each category of products?",
        "output": "SELECT CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have products that are all below the reorder level?",
        "output": "SELECT c.CategoryID FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryID HAVING COUNT(p.ProductID) = SUM(CASE WHEN p.UnitsInStock < p.ReorderLevel THEN 1 ELSE 0 END);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order in the month of January 2023?",
        "output": "SELECT AVG(Freight) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product had the highest inventory turnover ratio last month?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_TRUNC('month', orders.OrderDate) = DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders for each product?",
        "output": "SELECT ProductID, COUNT(DISTINCT OrderID) AS TotalOrders FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have managed shipping to the most diverse set of countries?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS UniqueCountries FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY UniqueCountries DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products fall below their reorder level across all categories?",
        "output": "SELECT p.CategoryID, COUNT(*) AS ProductsBelowReorder FROM products p WHERE p.UnitsInStock < p.ReorderLevel GROUP BY p.CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products per category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the proportion of discontinued products for each supplier?",
        "output": "SELECT SupplierID, CAST(SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(ProductID) AS DiscontinuedRatio FROM products GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for each supplier?",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products within each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify any products with no current orders.",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has been ordered the most by quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total value of discontinued products in stock.",
        "output": "SELECT SUM(UnitsInStock * UnitPrice) AS TotalValue FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the product with the best performance based on sales.",
        "output": "SELECT ProductName, SUM(Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 0 GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How effective is the reorder level set for products in maintaining inventory levels?",
        "output": "SELECT products.ProductName, CASE WHEN SUM([Order Details].Quantity) > products.ReorderLevel THEN 'Effective' ELSE 'Need Adjustment' END AS reorder_level_effectiveness FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top five products by sales revenue.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest quantity ordered?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly trend of on-time delivery rates in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS order_month, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average reorder level for products currently in inventory?",
        "output": "SELECT AVG(products.ReorderLevel) AS average_reorder_level FROM products WHERE products.UnitsInStock > 0",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of freight costs for each shipping method?",
        "output": "SELECT ShipVia, Freight, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia, Freight;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend of orders with discounts applied?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Discount > 0 GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier's products have the highest average discount?",
        "output": "SELECT s.SupplierID, s.SupplierName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID, s.SupplierName ORDER BY AverageDiscount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine which employee has the highest cumulative discount given across all orders.",
        "output": "SELECT e.EmployeeID, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total discount given by each employee for all their orders?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has handled the highest number of on-time deliveries?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OnTimeCount FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY OnTimeCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time between the order date and the required date each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(CAST(RequiredDate AS DATE) - CAST(OrderDate AS DATE)) AS AvgRequiredTime FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country has the highest on-time delivery rate?",
        "output": "SELECT ShipCountry, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeDeliveryRate DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the employee's region impact their sales performance?",
        "output": "SELECT employees.Region, AVG(order_employee_sales.total_sales) AS avg_sales FROM (SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.EmployeeID) AS order_employee_sales JOIN employees ON order_employee_sales.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.RegionID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier provides products for the most diverse categories?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.CategoryID) AS category_count FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY category_count DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total value of inventory for each product?",
        "output": "SELECT ProductName, UnitsInStock * UnitPrice AS InventoryValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customer with the highest Lifetime Value (CLV).",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of the current inventory?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate over the last month?",
        "output": "SELECT (COUNT(DISTINCT o.CustomerID) * 100.0 / COALESCE((SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_TRUNC('month', CURRENT_DATE)), 1)) AS RetentionRate FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders are delivered on or before the required date?",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees with the most orders shipped on time.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY OnTimeOrders DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been shipped to the 'USA'?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of customers in each country?",
        "output": "SELECT Country, COUNT(CustomerID) AS TotalCustomers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product with the highest performance metric based on sales.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to ship an order after it's placed?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM orders WHERE orders.ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in the year 2023?",
        "output": "SELECT COUNT(*) FROM orders WHERE YEAR(OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue lost by discounting products?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalRevenueLost FROM [Order Details] od;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to orders per product?",
        "output": "SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the best delivery performance in terms of lead time?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average shipping time per order?",
        "output": "SELECT AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How much total revenue was generated last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customer with the largest single order revenue.",
        "output": "SELECT o.CustomerID, od.OrderID, MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MaxSingleOrderRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID, od.OrderID ORDER BY MaxSingleOrderRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total amount of discounts given per customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have the highest number of late deliveries?",
        "output": "SELECT CustomerID, COUNT(*) AS LateDeliveries FROM orders WHERE ShippedDate > RequiredDate GROUP BY CustomerID ORDER BY LateDeliveries DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee is responsible for the highest revenue generation?",
        "output": "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product experiences the highest average discount?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average salary of employees based on their title.",
        "output": "SELECT employees.Title, AVG(employees.Salary) AS AverageSalary FROM employees GROUP BY employees.Title",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What was the longest order fulfillment time recorded?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS longest_fulfillment_time FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How have employee sales changed month over month?",
        "output": "SELECT e.EmployeeID, EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, EXTRACT(YEAR FROM o.OrderDate) AS OrderYear, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, OrderYear, OrderMonth ORDER BY e.EmployeeID, OrderYear, OrderMonth",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find all products with stock levels below the reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which discontinued products still have stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are delivered on or before the required date?",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the orders where the discount was applied.",
        "output": "SELECT DISTINCT orders.OrderID, customers.CustomerID, customers.CompanyName FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID INNER JOIN customers ON orders.CustomerID = customers.CustomerID WHERE [Order Details].Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average fulfillment time for orders in Q2 of 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE QUARTER(orders.OrderDate) = 2 AND YEAR(orders.OrderDate) = 2023",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with more than 5 orders placed in the last quarter.",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate BETWEEN DATEADD(QUARTER, -1, CURRENT_DATE) AND CURRENT_DATE GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How has the inventory turnover ratio trended over the past six months?",
        "output": "SELECT DATE_FORMAT(order_date, 'YYYY-MM') AS Month, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY Month ORDER BY Month DESC LIMIT 6;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average units per order for each product?",
        "output": "SELECT p.ProductName, AVG(od.Quantity) AS AverageUnitsPerOrder FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the average salary of employees correlate with their sales performance?",
        "output": "SELECT e.FirstName, e.LastName, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average delivery lead time?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY average_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with the highest average order frequency.",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) / NULLIF(DATEDIFF(MAX(orders.OrderDate), MIN(orders.OrderDate)), 0) AS AverageOrderFrequency FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY AverageOrderFrequency DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customer with the highest lifetime value.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 3 cities with the highest order fulfillment time.",
        "output": "SELECT o.ShipCity, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY o.ShipCity ORDER BY AvgFulfillmentTime DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have been sold at different discount tiers?",
        "output": "SELECT od.Discount, COUNT(DISTINCT od.ProductID) AS ProductCount FROM [Order Details] od GROUP BY od.Discount;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the most frequently ordered product along with its order count.",
        "output": "SELECT od.ProductID, p.ProductName, COUNT(*) AS OrderCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.ProductName ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the lowest inventory turnover ratio.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY InventoryTurnover ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the Inventory Turnover Ratio for each month.",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the on-time delivery rate vary by country?",
        "output": "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeRate DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product category has the highest total sales?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many products were sold in total each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalProductsSold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the correlation between the price of products and order quantities?",
        "output": "SELECT p.ProductName, p.UnitPrice, AVG(od.Quantity) AS AverageQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, p.UnitPrice ORDER BY p.UnitPrice;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What percentage of total sales is contributed by each employee?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(UnitPrice * Quantity * (1 - Discount)) FROM [Order Details])) * 100 AS SalesContribution FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many unique customers placed orders each month in 2023?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, COUNT(DISTINCT CustomerID) AS unique_customers FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for the first half of 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers by order count.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped to each country during the last quarter?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate BETWEEN 'YYYY-10-01' AND 'YYYY-12-31' GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated after applying discounts?",
        "output": "SELECT SUM((UnitPrice * Quantity) - (UnitPrice * Quantity * Discount)) AS TotalRevenue FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units overdue for shipment?",
        "output": "SELECT SUM(od.Quantity) AS TotalOverdueUnits FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.RequiredDate < CURDATE() AND o.ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company achieved the lowest average shipping cost per order in last year?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_freight FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY shippers.CompanyName ORDER BY avg_freight ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders GROUP BY EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer has placed the most number of orders?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY order_count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the countries with an on-time delivery rate above 90%.",
        "output": "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipCountry HAVING COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) > 90;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest total discount amount applied?",
        "output": "SELECT p.ProductName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the largest difference between units in stock and units on order?",
        "output": "SELECT p.ProductName, p.UnitsInStock - p.UnitsOnOrder AS StockDifference FROM products p ORDER BY StockDifference DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the trends in shipping costs related to different shippers?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_freight FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Analyze the trend of units ordered over the last 3 months.",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalUnitsOrdered FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= CURRENT_DATE - INTERVAL '3 months' GROUP BY EXTRACT(MONTH FROM o.OrderDate) ORDER BY Month DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest average shipping cost per order?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products do we have?",
        "output": "SELECT COUNT(*) AS DiscontinuedProductsCount FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sales per employee per month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT EXTRACT(YEAR_MONTH FROM orders.OrderDate)) AS AvgMonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which discontinued product had the highest sales before being discontinued?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee handle in the last year?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total sales value by category.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN Categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the maximum quantity ordered at once.",
        "output": "SELECT ProductID FROM [Order Details] WHERE Quantity = (SELECT MAX(Quantity) FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales so far this year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee with the largest number of distinct products sold.",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY DistinctProducts DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were handled by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are there in each contact title category?",
        "output": "SELECT ContactTitle, COUNT(*) AS TitleCount FROM customers GROUP BY ContactTitle;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with over $5000 in total order revenue.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING TotalRevenue > 5000",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top three customers with the fastest average order fulfillment time?",
        "output": "SELECT CustomerID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY CustomerID ORDER BY AvgFulfillmentTime ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Analyze the monthly sales trend for a particular product.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE ProductID = YOUR_PRODUCT_ID GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer had the highest single order value?",
        "output": "SELECT c.CustomerID, o.OrderID, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SingleOrderValue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN customers c ON o.CustomerID = c.CustomerID ORDER BY SingleOrderValue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does the sales volume fluctuate throughout the year for each product?",
        "output": "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total discounts given in 2023.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have sales exceeding $10,000?",
        "output": "SELECT COUNT(*) FROM (SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity * od.UnitPrice) > 10000) AS subquery;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the largest number of discontinued products?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS Discontinued_Count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY Discontinued_Count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee served the most customers?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS CustomerCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY CustomerCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products' sales have increased during the past month?",
        "output": "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) GROUP BY ProductName HAVING SUM([Order Details].Quantity) > (SELECT COALESCE(SUM([Order Details].Quantity), 0) FROM [Order Details] WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE) - 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the highest average unit price for their products.",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AveragePrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY AveragePrice DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee in the last quarter?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(MONTH, -3, CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the correlation between employee salary and total sales.",
        "output": "SELECT e.EmployeeID, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Salary;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with the highest unit price to average discount ratio.",
        "output": "SELECT ProductID, UnitPrice / AVG(Discount) AS PriceDiscountRatio FROM [Order Details] GROUP BY ProductID ORDER BY PriceDiscountRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and prices of all discontinued products?",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the employees managing the orders with the highest average freight charges?",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN (SELECT EmployeeID, AVG(Freight) AS AvgFreight FROM orders GROUP BY EmployeeID) AS EmployeeFreight ON e.EmployeeID = EmployeeFreight.EmployeeID ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are shipped to a different country than the order's origin?",
        "output": "SELECT COUNT(CASE WHEN ShipCountry != '' THEN 1 END) * 100.0 / COUNT(OrderID) AS Percentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount provided on all orders?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the percentage of orders delivered on time in 2023.",
        "output": "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / CAST(COUNT(orders.OrderID) AS DECIMAL) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the month with the highest sales revenue.",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS SalesRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY SalesRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly trend in sales for each product?",
        "output": "SELECT ProductID, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity * UnitPrice) AS MonthlySales FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductID, Month ORDER BY ProductID, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the overall on-time delivery rate for all orders?",
        "output": "SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OverallOnTimeDelivery FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees grouped by region?",
        "output": "SELECT e.Region, AVG(e.Salary) AS AvgSalary FROM employees e GROUP BY e.Region",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee with the highest average discount applied to their orders.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AverageDiscount DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the order fulfillment time for each customer.",
        "output": "SELECT o.CustomerID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o GROUP BY o.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have not generated any sales in 2023?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' WHERE orders.OrderID IS NULL",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total sales revenue generated by products in a specific category.",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE CategoryID = YOUR_CATEGORY_ID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the category with the highest number of discontinued products.",
        "output": "SELECT c.CategoryName, COUNT(p.ProductID) AS DiscontinuedCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.Discontinued = 1 GROUP BY c.CategoryName ORDER BY DiscontinuedCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost for orders shipped in the month of January?",
        "output": "SELECT AVG(Freight) AS AverageFreight FROM orders WHERE EXTRACT(MONTH FROM ShippedDate) = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers by total spending.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalSpent DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have inventory levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top employee in terms of sales for each territory.",
        "output": "SELECT employees.EmployeeID, employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RegionalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, employees.Region ORDER BY RegionalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have reached their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost for each shipping method this month.",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders WHERE MONTH(OrderDate) = MONTH(CURDATE()) AND YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders have been delayed beyond the required date?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top 3 most common courtesy titles among employees?",
        "output": "SELECT TitleOfCourtesy, COUNT(*) AS Count FROM employees GROUP BY TitleOfCourtesy ORDER BY Count DESC LIMIT 3",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier had the shortest lead time last year?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with high discounts and low sales.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName HAVING AVG(od.Discount) > 0.2 AND SUM(od.Quantity) < 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill an order in Q1 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time_q1_2023 FROM orders WHERE MONTH(orders.OrderDate) IN (1, 2, 3) AND YEAR(orders.OrderDate) = 2023",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the reorder level statuses for all products to identify which need immediate attention.",
        "output": "SELECT p.ProductID, p.ProductName, p.UnitsInStock, p.ReorderLevel FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly sales trend for each category?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY Month, p.CategoryID ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of products in stock by category?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped on or before the required date?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_delivery_count FROM orders WHERE orders.ShippedDate <= orders.RequiredDate",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate across all orders?",
        "output": "SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate)::float / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity sold for each category?",
        "output": "SELECT CategoryID, SUM(Quantity) AS TotalQuantity FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the most orders?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS ProcessedOrders FROM orders o GROUP BY o.EmployeeID ORDER BY ProcessedOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Analyze employee performance in relation to customer regions.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipCountry FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName, o.ShipCountry HAVING COUNT(DISTINCT o.ShipCountry) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products have been ordered by each customer?",
        "output": "SELECT CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductsOrdered FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average age of employees based on their birth year?",
        "output": "SELECT AVG(YEAR(CURDATE()) - YEAR(BirthDate)) AS AverageAge FROM employees",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee in 2023?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been fulfilled within the required date each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(orders.OrderID) AS OnTimeOrders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been placed but not yet shipped?",
        "output": "SELECT COUNT(*) AS UnshippedOrders FROM orders o WHERE o.ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer had the highest total sales value?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_value FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY total_sales_value DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products sold to date?",
        "output": "SELECT SUM(Quantity) AS TotalQuantitySold FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the number of unique products ordered by each customer.",
        "output": "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS NumberOfUniqueProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top three employees with the fastest average shipping times.",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID ORDER BY AverageShippingTime ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders were shipped late, and by how many days?",
        "output": "SELECT orders.OrderID, DATEDIFF(orders.ShippedDate, orders.RequiredDate) AS DaysLate FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify months when inventory turnover was below target.",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate) HAVING InventoryTurnover < TARGET_VALUE;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most products that are currently in stock?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products WHERE UnitsInStock > 0 GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the average shipping time for orders to each region.",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShipTime FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for the current year compared to the previous year?",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURDATE())) / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1) AS retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight cost managed by each employee.",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products with the highest sales quantity but are still in stock.",
        "output": "SELECT ProductName FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 0) AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total freight cost incurred for each supplier.",
        "output": "SELECT suppliers.SupplierID, SUM(orders.Freight) AS TotalFreight FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List employees who have not been assigned to any orders.",
        "output": "SELECT EmployeeID FROM employees WHERE EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average freight cost per order for each supplier.",
        "output": "SELECT s.SupplierID, AVG(o.Freight) AS AverageFreight FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top three products in terms of units on order.",
        "output": "SELECT ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products with a unit price greater than the average for their category.",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitPrice > (SELECT AVG(p2.UnitPrice) FROM products p2 WHERE p2.CategoryID = p.CategoryID);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for each month in the current year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the fastest average shipping time?",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY ShipCountry ORDER BY AvgShippingTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products with a higher price than the average product price.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier had the highest average product price in 2023?",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) AS AvgPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2023 GROUP BY s.SupplierID ORDER BY AvgPrice DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units and which products have been sold the most this month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_FORMAT(od.OrderDate, 'YYYY-MM') = DATE_FORMAT(CURDATE(), 'YYYY-MM') GROUP BY p.ProductName ORDER BY TotalUnitsSold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time for deliveries in 2023?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY suppliers.SupplierID ORDER BY average_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company (ShipVia) has the highest average shipping cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products ordered in the last year?",
        "output": "SELECT SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate > CURRENT_DATE - INTERVAL '1 year';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders each employee handled in the last year?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order by shipper?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders per country in the current year?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has the highest customer retention rate?",
        "output": "SELECT e.EmployeeID, (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.EmployeeID = e.EmployeeID AND o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / NULLIF((SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.EmployeeID = e.EmployeeID AND o.OrderDate < '2023-01-01'), 0) AS retention_rate FROM employees e ORDER BY retention_rate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the breakdown of orders by customer type in 2023?",
        "output": "SELECT customerDemographics.CustomerTypeID, COUNT(orders.OrderID) AS total_orders FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY customerDemographics.CustomerTypeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of orders placed per customer?",
        "output": "SELECT AVG(OrderCount) AS AverageOrdersPerCustomer FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID) AS CustomerOrders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue generated from each country.",
        "output": "SELECT Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the top performing region in terms of sales revenue?",
        "output": "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders have the longest delay from order to shipment?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS Delay FROM orders ORDER BY Delay DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a reorder level higher than their units in stock?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not been ordered in the past six months?",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL OR od.OrderDate < DATEADD(month, -6, CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest unit price and which supplier provides them?",
        "output": "SELECT products.ProductName, products.UnitPrice, suppliers.CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID ORDER BY products.UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average time between order placement and shipping for all orders.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average reorder level across all products?",
        "output": "SELECT AVG(ReorderLevel) AS AverageReorderLevel FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given across all orders?",
        "output": "SELECT SUM(Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the year-to-date average stock levels for each product category.",
        "output": "SELECT c.CategoryID, AVG(p.UnitsInStock) AS AvgStock FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time by country?",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does employee age correlate with sales performance?",
        "output": "SELECT employees.EmployeeID, YEAR(CURRENT_DATE) - YEAR(employees.BirthDate) AS Age, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find out the suppliers that provide the most variety of products.",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which discontinued products have pending orders?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 AND od.Quantity > 0 GROUP BY p.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the orders that were shipped later than the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend in total sales over the past 12 months?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= CURRENT_DATE - INTERVAL '12 months' GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has worked the longest with the company?",
        "output": "SELECT EmployeeID, HireDate FROM employees ORDER BY HireDate ASC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the shipping method with the lowest average fulfillment time.",
        "output": "SELECT ShipVia, AVG(CAST((JulianDay(ShippedDate) - JulianDay(OrderDate)) AS INT)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify suppliers with the most products below the reorder level.",
        "output": "SELECT SupplierID, COUNT(*) AS ReorderCount FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY SupplierID ORDER BY ReorderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the correlation between product price and units sold?",
        "output": "SELECT CORR(p.UnitPrice, od.Quantity) AS PriceVsSalesCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average shipping time for orders fulfilled this month?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE MONTH(ShippedDate) = MONTH(CURDATE()) AND YEAR(ShippedDate) = YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the product performance for each product per month.",
        "output": "SELECT p.ProductName, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS Performance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the number of orders that include products with a discount greater than 10%.",
        "output": "SELECT COUNT(DISTINCT o.OrderID) AS DiscountedOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the product with the highest average unit price.",
        "output": "SELECT ProductID, AVG(UnitPrice) AS AveragePrice FROM [Order Details] GROUP BY ProductID ORDER BY AveragePrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the most revenue last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m') GROUP BY employees.EmployeeID ORDER BY revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest shipping costs?",
        "output": "SELECT ShipCity, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCity ORDER BY TotalFreight DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount rate for orders over the past year?",
        "output": "SELECT AVG(Discount) FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount offered across all orders?",
        "output": "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 3 products with the highest revenue growth month over month.",
        "output": "WITH Monthly_Revenue AS (SELECT p.ProductID, p.ProductName, DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductID, p.ProductName, Month) SELECT ProductID, ProductName, Month, Revenue, LAG(Revenue) OVER (PARTITION BY ProductID ORDER BY Month) AS PreviousMonthRevenue, (Revenue - LAG(Revenue) OVER (PARTITION BY ProductID ORDER BY Month)) / LAG(Revenue) OVER (PARTITION BY ProductID ORDER BY Month) AS GrowthRate FROM Monthly_Revenue ORDER BY GrowthRate DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders shipped within the specified region?",
        "output": "SELECT ShipRegion, 100.0 * COUNT(OrderID) / (SELECT COUNT(*) FROM orders WHERE ShipRegion IS NOT NULL) AS RegionShipmentPercentage FROM orders WHERE ShipRegion IS NOT NULL GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the most employees based on their address?",
        "output": "SELECT City, COUNT(*) AS NumEmployees FROM employees GROUP BY City ORDER BY NumEmployees DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed more than 5 orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify products with the highest discount applied in the order details.",
        "output": "SELECT [Order Details].ProductID, MAX([Order Details].Discount) AS MaxDiscount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY MaxDiscount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has handled the most orders in the last quarter?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest sales volume?",
        "output": "SELECT ProductID, SUM([Order Details].Quantity) AS SalesVolume FROM [Order Details] GROUP BY ProductID ORDER BY SalesVolume DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight costs associated with each employee.",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreightCost FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top five customers by total revenue.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill orders for each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Analyze the correlation between order size and fulfillment time.",
        "output": "SELECT OrderID, (TotalValue - Freight) as OrderSize, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM (SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue, o.OrderDate, o.ShippedDate, o.Freight FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) as OrderInfo;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders exceed a shipping cost of $100?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in March 2023?",
        "output": "SELECT SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM [Order Details] OD JOIN orders O ON OD.OrderID = O.OrderID WHERE EXTRACT(YEAR FROM O.OrderDate) = 2023 AND EXTRACT(MONTH FROM O.OrderDate) = 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost broken down by shipping country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the most number of customers?",
        "output": "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the highest on-time delivery rate?",
        "output": "SELECT ShipVia, (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the lead times for each supplier, and which are the most efficient?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY lead_time ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the most orders in Q1 2023?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have not been reordered despite low stock levels.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most frequently used contact title among customers?",
        "output": "SELECT ContactTitle, COUNT(*) AS Frequency FROM customers GROUP BY ContactTitle ORDER BY Frequency DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders by shipping region?",
        "output": "SELECT ShipRegion, COUNT(*) AS orders_count FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for all orders shipped to the USA?",
        "output": "SELECT SUM(Freight) FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on or before the required date in the last quarter?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN orders.OrderID END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Evaluate the impact of discounts on sales generated by employees.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscountEffect FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average shipping time from order to shipment for each supplier?",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees report to a specific manager?",
        "output": "SELECT e1.EmployeeID, e1.FirstName, e1.LastName FROM employees e1 JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID WHERE e2.EmployeeID = ?",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the percentage of orders that include discounted products?",
        "output": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN od.Discount > 0 THEN o.OrderID END) / COUNT(DISTINCT o.OrderID) AS DiscountedOrderPercentage FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees and their respective managers.",
        "output": "SELECT e1.FirstName AS Employee, e2.FirstName AS Manager FROM employees e1 LEFT JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units ordered for all products in the last month?",
        "output": "SELECT SUM(Quantity) AS TotalUnitsOrdered FROM [Order Details] WHERE OrderDate >= DATEADD(month, -1, CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city hosts the most customers?",
        "output": "SELECT c.City, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.City ORDER BY CustomerCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees with zero orders processed.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products are ordered each month?",
        "output": "SELECT EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EXTRACT(YEAR FROM o.OrderDate), EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost associated with each employee's orders?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have a quantity greater than 10 units in the last year?",
        "output": "SELECT COUNT(DISTINCT orders.OrderID) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].Quantity > 10 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) - 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find products that have no units on order.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest total discounts given?",
        "output": "SELECT ProductName, SUM(Discount) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed orders in the year 2023?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS customer_count FROM orders WHERE YEAR(orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product category has the most units on order?",
        "output": "SELECT CategoryID, SUM(UnitsOnOrder) FROM products GROUP BY CategoryID ORDER BY SUM(UnitsOnOrder) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total number of units sold for non-discontinued products.",
        "output": "SELECT SUM(od.Quantity) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest and lowest product performance scores?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS ProductPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY ProductPerformance DESC LIMIT 1 UNION ALL SELECT p.ProductName, SUM(od.Quantity) AS ProductPerformance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY ProductPerformance ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers along with the total number of products they supply.",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS TotalProducts FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping city?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the employees with the most number of orders fulfilled in each region.",
        "output": "SELECT employeeTerritories.RegionID, employees.EmployeeID, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employeeTerritories.RegionID, employees.EmployeeID ORDER BY employeeTerritories.RegionID, number_of_orders DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many orders included a specific product?",
        "output": "SELECT ProductID, COUNT(DISTINCT OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscountGiven FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total units ordered per supplier?",
        "output": "SELECT SupplierID, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many units of discontinued products are still in stock?",
        "output": "SELECT SUM(products.UnitsInStock) AS total_units_in_stock FROM products WHERE products.Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the highest number of unique products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS UniqueProducts FROM products GROUP BY SupplierID ORDER BY UniqueProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total order count for each product?",
        "output": "SELECT ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were fulfilled within the required date in the first quarter of 2023?",
        "output": "SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate AND EXTRACT(YEAR FROM OrderDate) = 2023 AND EXTRACT(QUARTER FROM OrderDate) = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a unit price higher than the average unit price across all products?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed more than 5 orders in 2023?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS frequent_customers FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY orders.CustomerID HAVING COUNT(orders.OrderID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify regions with the longest average delivery times.",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders GROUP BY ShipRegion ORDER BY AvgDeliveryTime DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated for each month in the year 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the length of employment relate to each employee's total sales?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, DATEDIFF(CURDATE(), e.HireDate) / 365 AS YearsEmployed, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY YearsEmployed DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Compare the order fulfillment time between two different shipping methods.",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date last month?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders WHERE TO_CHAR(OrderDate, 'YYYY-MM') = TO_CHAR(CURRENT_DATE - INTERVAL '1 month', 'YYYY-MM');",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate between January and February 2023?",
        "output": "SELECT (COUNT(DISTINCT o.JanuaryCustomerID) * 1.0 / COUNT(DISTINCT o2.PreJanuaryCustomerID)) * 100 AS RetentionRate FROM (SELECT DISTINCT CustomerID AS JanuaryCustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-02-01') o LEFT JOIN (SELECT DISTINCT CustomerID AS PreJanuaryCustomerID FROM orders WHERE OrderDate < '2023-01-01') o2 ON o.JanuaryCustomerID = o2.PreJanuaryCustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have birthdays this month.",
        "output": "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees WHERE MONTH(BirthDate) = MONTH(CURRENT_DATE) AND YEAR(BirthDate) <> YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest value order?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY OrderValue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have not placed an order in the last year?",
        "output": "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have a shipping postal code starting with '1'?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShipPostalCode LIKE '1%';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total freight cost for orders shipped in the United States.",
        "output": "SELECT SUM(Freight) FROM orders WHERE ShipCountry = 'United States';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between freight cost and order fulfillment time?",
        "output": "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify suppliers with products that have the lowest stock levels.",
        "output": "SELECT SupplierID, ProductName, UnitsInStock FROM products WHERE UnitsInStock = (SELECT MIN(UnitsInStock) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales per product category for the last three months?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) AND CURRENT_DATE GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest number of units sold?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for 2023?",
        "output": "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders requiring quick delivery?",
        "output": "SELECT AVG(Freight) FROM orders WHERE DATEDIFF(RequiredDate, OrderDate) <= 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for each product.",
        "output": "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales volume in June 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY products.ProductID ORDER BY product_sales_volume DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have never made a sale?",
        "output": "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the product with the highest sales revenue during the last 6 months.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY p.ProductID ORDER BY SUM(od.Quantity * od.UnitPrice) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most common quantity per unit for products?",
        "output": "SELECT p.QuantityPerUnit, COUNT(p.ProductID) AS Frequency FROM products p GROUP BY p.QuantityPerUnit ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average inventory turnover ratio for each category of products.",
        "output": "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are currently discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer lifetime value for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many distinct orders include products with a discount greater than 20%?",
        "output": "SELECT COUNT(DISTINCT OrderID) FROM [Order Details] WHERE Discount > 0.2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for each shipping company?",
        "output": "SELECT shippers.CompanyName, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 1.0 / COUNT(orders.OrderID)) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average unit price of all products from each supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly sales performance of each product?",
        "output": "SELECT P.ProductName, SUM(OD.Quantity) AS TotalSales FROM products P JOIN [Order Details] OD ON P.ProductID = OD.ProductID GROUP BY P.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest shipping cost on average?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgCost FROM orders GROUP BY ShipCountry ORDER BY AvgCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped in March 2023?",
        "output": "SELECT SUM(Freight) FROM orders WHERE MONTH(ShippedDate) = 3 AND YEAR(ShippedDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue for products provided by each supplier?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much total discount was given in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS total_discounts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend in shipping costs over the past year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageFreight FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY Month DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units of each product currently in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost for orders shipped internationally in 2023?",
        "output": "SELECT AVG(orders.Freight) AS avg_international_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND customers.Country != orders.ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does employee salary correlate with total sales?",
        "output": "SELECT e.EmployeeID, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Salary;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the correlation between order fulfillment time and freight cost.",
        "output": "SELECT CORR(DATEDIFF(ShippedDate, OrderDate), Freight) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly average time taken to fulfill an order?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly on-time delivery rate for the last year.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders WHERE OrderDate >= DATE_ADD('year', -1, CURRENT_DATE) GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly inventory turnover ratio for each product in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS order_month, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month, products.ProductName",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "List all customers who have placed more than five orders throughout 2023.",
        "output": "SELECT customers.CustomerID FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue per country?",
        "output": "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of customers by country?",
        "output": "SELECT Country, COUNT(CustomerID) AS TotalCustomers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with a reorder level higher than 10 and currently discontinued.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > 10 AND Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that need to be reordered based on the reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How much revenue has been generated from products that have been discontinued?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly revenue growth rate?",
        "output": "SELECT YEAR(sale_date) AS Year, MONTH(sale_date) AS Month, SUM(Quantity * UnitPrice) AS MonthlyRevenue FROM [Order Details] GROUP BY Year, Month HAVING Year = YEAR(CURRENT_DATE) OR (Year = YEAR(CURRENT_DATE) - 1 AND Month >= MONTH(CURRENT_DATE));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the demographic distribution (e.g., city or country) of employees?",
        "output": "SELECT Country, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Country",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders fulfilled by each employee in 2023?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS num_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have stock levels equal to their reorder levels?",
        "output": "SELECT COUNT(*) AS ProductsAtReorderLevel FROM products WHERE UnitsInStock = ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many distinct customers does each employee handle?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS CustomerCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products based on quantity sold?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average delivery time for each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees have the best on-time delivery records?",
        "output": "SELECT EmployeeID, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*)) * 100 AS OnTimeRate FROM orders GROUP BY EmployeeID ORDER BY OnTimeRate DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount rate per employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee shipped the most orders to 'USA'?",
        "output": "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders WHERE orders.ShipCountry = 'USA' GROUP BY orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate for the last six months?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN CURRENT_DATE - INTERVAL '6 months' AND CURRENT_DATE THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < CURRENT_DATE - INTERVAL '6 months' THEN orders.CustomerID END)) * 100 AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total freight cost for each supplier.",
        "output": "SELECT p.SupplierID, SUM(o.Freight) AS TotalFreight FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has been ordered in the highest quantity?",
        "output": "SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in each city?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who is the top-performing employee in terms of the total number of quantities sold?",
        "output": "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have not processed any orders in the past six months.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL OR o.OrderDate < CURRENT_DATE - INTERVAL '6' MONTH GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products have been ordered in total?",
        "output": "SELECT COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the variance in order fulfillment times across different suppliers.",
        "output": "SELECT products.SupplierID, VAR_SAMP(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LeadTimeVariance FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the average fulfillment time compare between different shipping methods?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders GROUP BY ShipVia",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales value by employee, grouped by month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, EXTRACT(MONTH FROM orders.OrderDate) AS Month FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, EXTRACT(MONTH FROM orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average quantity per unit for products that are not discontinued?",
        "output": "SELECT AVG(CAST(SUBSTR(QuantityPerUnit, 1, INSTR(QuantityPerUnit, ' ') - 1) AS DECIMAL)) FROM products WHERE Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which order had the lowest shipping cost?",
        "output": "SELECT OrderID, Freight FROM orders WHERE Freight = (SELECT MIN(Freight) FROM orders);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest growth in sales compared to the previous quarter?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, ((SUM(CASE WHEN QUARTER(o.OrderDate) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(CASE WHEN QUARTER(o.OrderDate) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 2 QUARTER)) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END))/NULLIF(SUM(CASE WHEN QUARTER(o.OrderDate) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 2 QUARTER)) THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END), 0)) * 100 AS SalesGrowth FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) OR YEAR(o.OrderDate) = YEAR(DATE_SUB(CURDATE(), INTERVAL 2 QUARTER)) GROUP BY e.EmployeeID ORDER BY SalesGrowth DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value by customer for the past year?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = (YEAR(CURDATE()) - 1) GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the highest freight cost recorded, and which supplier was it associated with?",
        "output": "SELECT o.Freight AS MaxFreight, s.CompanyName FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.Freight = (SELECT MAX(Freight) FROM orders) LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 products by total sales quantity.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSales FROM products INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC FETCH FIRST 5 ROWS ONLY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed in the last 30 days?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.OrderDate > CURDATE() - INTERVAL 30 DAY;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city's orders have the highest average freight cost?",
        "output": "SELECT ShipCity, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCity ORDER BY AvgFreightCost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 5 employees in terms of total sales revenue generated?",
        "output": "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred last year?",
        "output": "SELECT SUM(o.Freight) AS TotalFreight FROM orders o WHERE o.OrderDate BETWEEN DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') AND DATE_TRUNC('year', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the monthly sales trends for the top selling products?",
        "output": "SELECT products.ProductName, EXTRACT(MONTH FROM orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, order_month ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average inventory level for products in each category.",
        "output": "SELECT CategoryID, AVG(UnitsInStock) AS AverageInventory FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average discount given on products each month.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are in each contact title category?",
        "output": "SELECT ContactTitle, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY ContactTitle;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are below their reorder level and need immediate restocking?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average quantity per order for each product category?",
        "output": "SELECT CategoryID, AVG(od.Quantity) AS AvgQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total revenue for each product considering discounts.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * (od.UnitPrice - od.UnitPrice * od.Discount)) as TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many unique customers placed orders in the last month?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH)",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend of average freight cost over the last year?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 year' GROUP BY Month ORDER BY Month DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were handled by each employee this year?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products that have never been ordered.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for each product monthly?",
        "output": "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest average order value?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest number of units on order?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied across all orders?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed and shipped within the same city?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShipCity IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the percentage contribution of each employee to the total sales.",
        "output": "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID)) * 100 AS SalesContribution FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers who have delivered products in less than four days on average.",
        "output": "SELECT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) < 4;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products with the highest sales revenue.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much discount is typically applied to orders by each employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List countries with the most diverse product purchases.",
        "output": "SELECT Country, COUNT(DISTINCT ProductID) AS ProductVariety FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY Country ORDER BY ProductVariety DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the highest number of orders last month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS HandledOrders FROM orders WHERE DATE_TRUNC('month', OrderDate) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') GROUP BY EmployeeID ORDER BY HandledOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders are delivered in the same city?",
        "output": "SELECT (COUNT(*) FILTER (WHERE ShipAddress LIKE '%' || ShipCity || '%'))::NUMERIC / COUNT(*) AS SameCityDeliveryPercentage FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products by category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) as AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier?",
        "output": "SELECT SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM products JOIN orders ON products.ProductID = orders.OrderID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have increased their sales by over 10% compared to the previous month.",
        "output": "SELECT e.EmployeeID FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CurrentMonthSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID) cm JOIN (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS PreviousMonthSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID) pm ON cm.EmployeeID = pm.EmployeeID WHERE ((cm.CurrentMonthSales - pm.PreviousMonthSales) / pm.PreviousMonthSales) * 100 > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly inventory turnover ratio for each category.",
        "output": "SELECT p.CategoryID, EXTRACT(YEAR FROM o.OrderDate) AS Year, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.CategoryID, Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the percentage of discontinued products?",
        "output": "SELECT (SUM(CASE WHEN Discontinued = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100.0 AS DiscontinuedPercentage FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average fulfillment time for orders placed in April 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the retention rate for the last quarter.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN o.CustomerID END) / COUNT(DISTINCT CASE WHEN o.OrderDate < '2023-01-01' THEN o.CustomerID END)) AS RetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost associated with orders processed by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have products with no stock?",
        "output": "SELECT c.CategoryID FROM categories c WHERE NOT EXISTS (SELECT 1 FROM products p WHERE p.CategoryID = c.CategoryID AND p.UnitsInStock > 0);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total order quantity for each product?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products with the highest sales quantities.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders placed by each customer?",
        "output": "SELECT orders.CustomerID, COUNT(*) AS TotalOrders FROM orders GROUP BY orders.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order quantity per customer?",
        "output": "SELECT AVG(order_quantity) FROM (SELECT o.CustomerID, SUM(od.Quantity) AS order_quantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID) AS customer_orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the shipping method with the highest average freight cost.",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the least frequently ordered product.",
        "output": "SELECT ProductID, COUNT(*) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the highest total sales revenue?",
        "output": "SELECT s.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers made more than three purchases in the last year?",
        "output": "SELECT customers.CustomerID, COUNT(DISTINCT orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE YEAR(orders.OrderDate) = (YEAR(CURDATE()) - 1) GROUP BY customers.CustomerID HAVING total_orders > 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for orders processed by each employee?",
        "output": "SELECT E.EmployeeID, SUM(O.Freight) AS TotalFreight FROM employees E JOIN orders O ON E.EmployeeID = O.EmployeeID GROUP BY E.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest on-time delivery rate?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY TO_CHAR(OrderDate, 'YYYY-MM') ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month had the highest order volume in 2023?",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(*) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY OrderMonth ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most common quantity per unit across all products?",
        "output": "SELECT QuantityPerUnit, COUNT(*) AS Frequency FROM products GROUP BY QuantityPerUnit ORDER BY Frequency DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 3 cities with the highest number of customers.",
        "output": "SELECT c.City, COUNT(c.CustomerID) AS CustomerCount FROM customers c GROUP BY c.City ORDER BY CustomerCount DESC LIMIT 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month in 2023?",
        "output": "SELECT EXTRACT(MONTH FROM O.OrderDate) AS Month, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) / COUNT(DISTINCT O.OrderID) AS AvgOrderValue FROM [Order Details] OD JOIN orders O ON OD.OrderID = O.OrderID WHERE EXTRACT(YEAR FROM O.OrderDate) = 2023 GROUP BY EXTRACT(MONTH FROM O.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each product this year?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE YEAR(order_date) = YEAR(CURDATE()) GROUP BY p.ProductName ORDER BY Revenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products have inventory levels below their reorder level?",
        "output": "SELECT COUNT(*) AS product_count FROM products WHERE products.UnitsInStock < products.ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee serves the most diverse regions?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT orders.ShipRegion) AS DistinctRegions FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY DistinctRegions DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping recipient has placed the most orders?",
        "output": "SELECT o.ShipName, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipName ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in each city?",
        "output": "SELECT e.EmployeeID, o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipCity;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the lowest shipping costs on average?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry ORDER BY AvgShippingCost ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average units ordered per product per order in the last year.",
        "output": "SELECT AVG(od.Quantity) AS AverageUnitsOrdered FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest total sales?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the overall inventory turnover ratio.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(CAST(p.UnitsInStock AS DECIMAL)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the average quantity of products ordered per order.",
        "output": "SELECT AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average order value for each customer.",
        "output": "SELECT CustomerID, AVG(TotalValue) AS AvgOrderValue FROM (SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID, o.CustomerID) AS OrderValues GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers are associated with out-of-stock products?",
        "output": "SELECT SupplierID, ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a unit price above the average product price?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the difference between order date and shipped date for each order.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingDelay FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 employees by total orders handled.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify any products with a unit price exceeding $100 that have not been discontinued.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitPrice > 100 AND Discontinued = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the ratio of shipped orders to total orders per customer?",
        "output": "SELECT c.CustomerID, COUNT(o1.OrderID) * 1.0 / COUNT(o.OrderID) AS ShippedToTotalRatio FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID LEFT JOIN orders o1 ON c.CustomerID = o1.CustomerID AND o1.ShippedDate IS NOT NULL GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total order quantity for each supplier.",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How do employee sales compare across different territories?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity ordered for each product in the last quarter?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many new customers were acquired each month this year?",
        "output": "SELECT MONTH(o.OrderDate) AS order_month, COUNT(DISTINCT o.CustomerID) AS new_customers FROM orders o WHERE YEAR(o.OrderDate) = 2023 GROUP BY order_month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the suppliers with products that have stock levels below their reorder level.",
        "output": "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders placed in each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the correlation between tenure and average sales per employee?",
        "output": "SELECT e.EmployeeID, (YEAR(CURRENT_DATE) - YEAR(e.HireDate)) AS Tenure, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given for each product?",
        "output": "SELECT ProductID, SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total discount applied for each order.",
        "output": "SELECT orders.OrderID, SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the month with the highest number of orders placed?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_TRUNC('month', OrderDate) ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly trend in product performance?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month, od.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the monthly sales growth for each employee over the past year.",
        "output": "SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate), EXTRACT(MONTH FROM orders.OrderDate) ORDER BY employees.EmployeeID, Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which shipping methods have the lowest average freight costs?",
        "output": "SELECT o.ShipVia, AVG(o.Freight) AS AvgFreightCost FROM orders o GROUP BY o.ShipVia ORDER BY AvgFreightCost ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List customers who had at least one order with over 10% discount.",
        "output": "SELECT DISTINCT o.CustomerID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products per supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are provided by more than one supplier?",
        "output": "SELECT ProductName FROM products GROUP BY ProductName HAVING COUNT(DISTINCT SupplierID) > 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who placed orders in multiple regions.",
        "output": "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(DISTINCT orders.ShipRegion) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total amount of discounts given for all orders?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is the fastest on average?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia ORDER BY AvgFulfillmentTime LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the best performance in terms of sales per month?",
        "output": "SELECT employees.EmployeeID, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) OVER (PARTITION BY EXTRACT(YEAR FROM orders.OrderDate), EXTRACT(MONTH FROM orders.OrderDate), employees.EmployeeID) AS AvgMonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for the current month?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped to each country monthly?",
        "output": "SELECT DATE_TRUNC('month', ShippedDate) AS Month, ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month, ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct customers placed orders each month?",
        "output": "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS CustomerCount FROM orders GROUP BY YEAR(OrderDate), MONTH(OrderDate) ORDER BY Year, Month",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top three countries by number of orders?",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS TotalOrders FROM orders o GROUP BY o.ShipCountry ORDER BY TotalOrders DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top customers by the number of orders placed.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the highest average freight cost?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipRegion ORDER BY AvgFreightCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify which products have never been ordered.",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Retrieve products with the highest price-to-quantity ratio per unit.",
        "output": "SELECT ProductName, UnitPrice / CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS DECIMAL) AS PriceToQuantityRatio FROM products ORDER BY PriceToQuantityRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of products are on order for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped late last month?",
        "output": "SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate AND o.OrderDate BETWEEN '2023-09-01' AND '2023-09-30';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN \"Order Details\" ON orders.OrderID = \"Order Details\".OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that need restocking based on their reorder level and units on order.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How much total sales revenue was generated in the last quarter?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 months' AND DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 day';",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who is the youngest employee in the company?",
        "output": "SELECT EmployeeID, FirstName, LastName, BirthDate FROM employees ORDER BY BirthDate DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories require the most frequent reorders?",
        "output": "SELECT CategoryID, SUM(CASE WHEN UnitsInStock <= ReorderLevel THEN 1 ELSE 0 END) AS FrequentReorders FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not been ordered in the last month?",
        "output": "SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m'));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly growth rate in total sales revenue?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)), 1) OVER (ORDER BY DATE_TRUNC('month', OrderDate)) AS PreviousMonthSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have shipped products internationally?",
        "output": "SELECT DISTINCT s.SupplierID FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShipCountry <> s.Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders that include a discount?",
        "output": "SELECT (COUNT(*) FILTER (WHERE Discount > 0) / NULLIF(COUNT(*), 0)) * 100 AS PercentageWithDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region has the highest number of orders?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customers who have not placed any orders.",
        "output": "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders with a discount greater than 25%.",
        "output": "SELECT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.25;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify any orders that were shipped before they were ordered (data error check).",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate < OrderDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many days on average does it take to fulfill orders each month?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(DATE_PART('day', ShippedDate - OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total discount value provided for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountValue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has incurred the highest total freight costs?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top five products by sales volume? Include the supplier's name.",
        "output": "SELECT p.ProductName, s.CompanyName, SUM(od.Quantity) AS SalesVolume FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.ProductID, s.CompanyName ORDER BY SalesVolume DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were delayed beyond the required date?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of all products currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the impact of discounts on the average order value in the first half of 2023?",
        "output": "SELECT AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value_no_discount, AVG([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS avg_order_value_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales by each employee?",
        "output": "SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmployeeSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the top sales territory based on order quantity?",
        "output": "SELECT orders.ShipRegion, SUM([Order Details].Quantity) AS OrderQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipRegion ORDER BY OrderQuantity DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the highest number of products?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS NumProducts FROM products GROUP BY CategoryID ORDER BY NumProducts DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders were shipped on or before their required date, and what is the percentage of such orders each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY OrderMonth;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products that have been sold with zero discounts more than 50 times.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount = 0 GROUP BY p.ProductID HAVING COUNT(od.OrderID) > 50;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the performance of sales territories differ in terms of revenue?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription ORDER BY territory_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country had the highest total orders in the last quarter?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 month' AND OrderDate < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer lifetime value for each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which orders had a total value greater than $1000?",
        "output": "SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING SUM(UnitPrice * Quantity * (1 - Discount)) > 1000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were handled by each employee in 2023?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest discount applied on average?",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have a title containing 'Manager'?",
        "output": "SELECT COUNT(*) AS NumberOfManagers FROM employees WHERE Title LIKE '%Manager%'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month with the highest freight costs.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the total sales generated by each shipping country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the percentage of products shipped late relative to the required date.",
        "output": "SELECT (SUM(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS LateShipmentPercentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly inventory turnover ratio for each product?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS MonthlyInventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Are there any suppliers with only discontinued products?",
        "output": "SELECT SupplierID FROM products GROUP BY SupplierID HAVING COUNT(CASE WHEN Discontinued = 0 THEN 1 END) = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the order with the longest delay in shipping.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS Delay FROM orders WHERE ShippedDate > RequiredDate ORDER BY Delay DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most products?",
        "output": "SELECT s.CompanyName, COUNT(*) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly trend of on-time delivery rate in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_rate FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY MONTH(orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest inventory levels?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalInventory FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the 10 cities with highest revenue from customer orders?",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY TotalRevenue DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest discounts applied on average?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AverageDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units sold for each product?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by each customer in 2022?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How much total revenue has each product generated?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping company?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all suppliers and the count of products they supply.",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the order with the highest number of products.",
        "output": "SELECT o.OrderID, SUM(od.Quantity) AS ProductCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY ProductCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total inventory value for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitsInStock * UnitPrice) AS InventoryValue FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate monthly revenue generated from products sold at a discount.",
        "output": "SELECT MONTH(OrderDate), SUM(Quantity * (UnitPrice - (Discount * UnitPrice))) AS DiscountedRevenue FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE Discount > 0 GROUP BY MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipment destinations by country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who is the top performing employee based on sales revenue?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders each employee has managed?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify orders with a freight cost greater than $100 and shipped to the USA.",
        "output": "SELECT OrderID FROM orders WHERE Freight > 100 AND ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given for all orders?",
        "output": "SELECT SUM(Quantity * UnitPrice * Discount) as TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between order volume and shipping cost?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS OrderVolume, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the products with less than 5 units in stock but more than 10 units on order?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock < 5 AND p.UnitsOnOrder > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average delivery time for orders handled by each employee.",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average shipping time for each shipping method?",
        "output": "SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM orders o GROUP BY o.ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees based on the number of orders handled.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) as OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated in the last six months?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= CURRENT_DATE - INTERVAL '6 MONTH';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the Inventory Turnover Ratio for the previous month.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -1, DATEFROMPARTS(YEAR(GETDATE()), MONTH(GETDATE()) - 1, 1)) AND od.OrderDate < DATEFROMPARTS(YEAR(GETDATE()), MONTH(GETDATE()), 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the highest number of orders?",
        "output": "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS NumOrders FROM orders GROUP BY orders.EmployeeID ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country had the most delayed shipments?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCountry ORDER BY DelayedShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average quantity per order per product?",
        "output": "SELECT p.ProductName, AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most orders that have not yet been shipped?",
        "output": "SELECT s.SupplierID, s.CompanyName, COUNT(o.OrderID) AS UnshippedOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate IS NULL GROUP BY s.SupplierID, s.CompanyName ORDER BY UnshippedOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify regions with the highest employee performance.",
        "output": "SELECT region.RegionID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS region_performance FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionID ORDER BY region_performance DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of returning customers this year?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS returning_customers FROM orders WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) AND orders.CustomerID IN (SELECT CustomerID FROM orders WHERE YEAR(OrderDate) < YEAR(CURRENT_DATE))",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many employees have exceeded their sales targets in 2023?",
        "output": "SELECT COUNT(employees.EmployeeID) FROM employees LEFT JOIN (SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.EmployeeID) AS sales ON employees.EmployeeID = sales.EmployeeID WHERE sales.total_sales > 100000",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for suppliers to deliver products?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Avg_Lead_Time FROM orders JOIN products ON orders.OrderID = products.ProductID GROUP BY products.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the correlation between freight cost and order value?",
        "output": "SELECT CORR(Freight, [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Correlation FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity per order for each product?",
        "output": "SELECT ProductID, AVG(Quantity) AS AverageQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been placed by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales by country?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CountrySales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value by customer region?",
        "output": "SELECT customers.Region, AVG(order_totals.total_value) AS avg_order_value FROM (SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID) AS order_totals JOIN orders ON order_totals.OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Region",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the fastest average delivery time?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS FastestDelivery FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.SupplierID ORDER BY FastestDelivery ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most frequently used shipping method?",
        "output": "SELECT ShipVia, COUNT(*) AS MethodCount FROM orders GROUP BY ShipVia ORDER BY MethodCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the overall discount given for all orders?",
        "output": "SELECT SUM(Quantity * UnitPrice * Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity ordered per product?",
        "output": "SELECT ProductName, AVG([Order Details].Quantity) AS AverageQuantityOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales quantity in March 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average quantity ordered for each product?",
        "output": "SELECT od.ProductID, AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od GROUP BY od.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average freight cost per order for each shipping method.",
        "output": "SELECT o.ShipVia, AVG(o.Freight) AS AvgFreightCost FROM orders o GROUP BY o.ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How does the average lead time compare in the current year vs. last year?",
        "output": "SELECT SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS CurrentYearLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.SupplierID UNION SELECT SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LastYearLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY products.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have not reached their reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock >= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the monthly sales trend for each employee?",
        "output": "SELECT YEAR(orders.OrderDate) AS Year, MONTH(orders.OrderDate) AS Month, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY YEAR(orders.OrderDate), MONTH(orders.OrderDate), employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the shipping country with the most orders this month.",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE + INTERVAL '1 month') GROUP BY o.ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the most orders that were shipped late?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.RequiredDate < orders.ShippedDate GROUP BY employees.EmployeeID ORDER BY LateOrders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify any correlation between unit prices and discounts on products.",
        "output": "SELECT p.ProductID, p.ProductName, CORR(p.UnitPrice, od.Discount) AS PriceDiscountCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the reorder level distribution across all products?",
        "output": "SELECT ReorderLevel, COUNT(*) AS NumberOfProducts FROM products GROUP BY ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does employee sales compare across different countries?",
        "output": "SELECT e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate for the past month?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31' THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-08-01' THEN orders.CustomerID END)) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the customer with the highest average order value.",
        "output": "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY CustomerID ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders did each customer place in the past year?",
        "output": "SELECT o.CustomerID, COUNT(DISTINCT o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were shipped late in 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN orders.OrderID END) * 100.0 / COUNT(orders.OrderID) AS late_delivery_rate FROM orders WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 10 most expensive products available.",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total monthly sales generated by each employee?",
        "output": "SELECT employees.EmployeeID, EXTRACT(YEAR FROM orders.OrderDate) AS Year, EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 5 products with the lowest inventory levels that are not discontinued.",
        "output": "SELECT products.ProductID, products.ProductName, products.UnitsInStock FROM products WHERE products.Discontinued = 0 ORDER BY products.UnitsInStock ASC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Rank the top 5 products by sales revenue in April 2023.",
        "output": "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30' GROUP BY products.ProductID ORDER BY revenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders shipped after the required date?",
        "output": "SELECT COUNT(OrderID) AS LateShipments FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by employees in each city?",
        "output": "SELECT employees.City, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many days on average does each employee take to ship an order?",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShipTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of late shipments per month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) * 100 AS LateShipmentPercentage FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have reached their reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average price of products purchased per order?",
        "output": "SELECT OrderID, AVG(UnitPrice) AS AveragePrice FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products by sales volume in the last year?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.ProductID, products.ProductName ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the shortest lead time?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY avg_lead_time ASC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of units sold for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalUnitsSold FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders has each customer placed?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total freight cost for each employee's orders.",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product are currently on order?",
        "output": "SELECT ProductID, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the highest number of products on order?",
        "output": "SELECT p.CategoryID, SUM(p.UnitsOnOrder) AS UnitsOnOrder FROM products p GROUP BY p.CategoryID ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the most orders shipped to?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumOrders FROM orders GROUP BY ShipCountry ORDER BY NumOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products have been purchased by each customer?",
        "output": "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Show the most popular product based on quantity sold.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS QuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY QuantitySold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level higher than 100?",
        "output": "SELECT p.ProductName FROM products p WHERE p.ReorderLevel > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping region has the most on-time deliveries?",
        "output": "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have stock levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does sales performance vary by employee's city?",
        "output": "SELECT e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the shortest average fulfillment time?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS shortest_fulfillment_time FROM orders GROUP BY ShipVia ORDER BY shortest_fulfillment_time ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the total units sold per supplier.",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS total_units FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List top five employees in terms of sales revenue generation.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find out which products have more units on order than units in stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order for each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total sales value for each product category?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS SalesValue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue generated by all employees combined?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on or before the required date?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) AS on_time_orders, COUNT(orders.OrderID) AS total_orders, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID)::float AS on_time_delivery_rate FROM orders",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a discount of more than 10%?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS ProductCount FROM [Order Details] WHERE Discount > 0.1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers ordered more than three times?",
        "output": "SELECT COUNT(*) FROM (SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 3) AS subquery;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee with the least freight cost associated with their orders.",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY TotalFreight ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest total freight cost?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Year, Month ORDER BY TotalFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products with a unit price above the overall average unit price.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city receives the most shipments?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS ShipmentCount FROM orders o GROUP BY o.ShipCity ORDER BY ShipmentCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for all orders each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM(orders.Freight) AS TotalFreightCost FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which category of products has the highest percentage of out-of-stock occurrences?",
        "output": "SELECT categories.CategoryName, COUNT(CASE WHEN products.UnitsInStock = 0 THEN products.ProductID END) * 1.0 / COUNT(products.ProductID) AS out_of_stock_percentage FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID ORDER BY out_of_stock_percentage DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales volume each month?",
        "output": "SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, month ORDER BY month, sales_volume DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has processed the maximum number of orders?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average order value?",
        "output": "SELECT AVG(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS AverageOrderValue FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders were shipped late (after the required date)?",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders) AS LateShippingPercentage FROM orders WHERE ShippedDate > RequiredDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country had the highest freight costs last month?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY ShipCountry ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers placed their first order this year?",
        "output": "SELECT COUNT(DISTINCT o.CustomerID) AS NewCustomers FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) AND NOT EXISTS (SELECT 1 FROM orders o2 WHERE o2.CustomerID = o.CustomerID AND YEAR(o2.OrderDate) < YEAR(CURDATE()));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top five cities with the highest number of suppliers?",
        "output": "SELECT City, COUNT(*) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the minimum, maximum, and average freight cost for orders shipped to 'USA'?",
        "output": "SELECT MIN(Freight) AS MinFreight, MAX(Freight) AS MaxFreight, AVG(Freight) AS AvgFreight FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT products.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after their required date during the holiday season?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE (MONTH(OrderDate) IN (11, 12) OR MONTH(OrderDate) = 1) AND ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify products that have never been ordered.",
        "output": "SELECT ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many days late, on average, have orders been shipped past the required date?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.RequiredDate)) AS AvgDaysLate FROM orders o WHERE DATEDIFF(o.ShippedDate, o.RequiredDate) > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped before the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the impact of employee tenure on sales performance.",
        "output": "SELECT employees.EmployeeID, DATEDIFF(CURRENT_DATE, employees.HireDate) AS TenureDays, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have not shipped any orders this month?",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN orders o ON p.ProductID = o.ProductID WHERE o.ShippedDate IS NULL AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(o.OrderID) = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products that have never been discontinued and have more than 500 units sold.",
        "output": "SELECT p.ProductName FROM products p WHERE p.Discontinued = 0 AND p.ProductID IN (SELECT od.ProductID FROM [Order Details] od GROUP BY od.ProductID HAVING SUM(od.Quantity) > 500);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products with a unit price greater than the average unit price of all products.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has generated the most revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Revenue FROM [Order Details] GROUP BY ProductID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the reorder status of products with the highest sales?",
        "output": "SELECT p.ProductID, p.ProductName, p.UnitsInStock - p.ReorderLevel AS ReorderStatus FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average shipping cost differ across shipping regions?",
        "output": "SELECT ShipRegion, AVG(Freight) FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with the highest turnover rate last quarter.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS TurnoverRate FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATEADD(quarter, -1, CURRENT_DATE) AND od.OrderDate < CURRENT_DATE GROUP BY p.ProductName ORDER BY TurnoverRate DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find orders that were shipped late beyond the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have not been shipped yet?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed in the last quarter grouped by month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(OrderID) AS OrdersInQuarter FROM orders WHERE orders.OrderDate >= DATE_TRUNC('quarter', CURRENT_DATE - INTERVAL '3 months') GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the longest tenure at the company?",
        "output": "SELECT e.EmployeeID, DATEDIFF(CURRENT_DATE, e.HireDate) AS Tenure FROM employees e ORDER BY Tenure DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped more than 5 days after the required date?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate > o.RequiredDate + INTERVAL '5 day';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue by product category in the past month?",
        "output": "SELECT ProductCategory, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND orders.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY ProductCategory;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of discontinued products currently in inventory?",
        "output": "SELECT COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employees handled the most orders in the last month?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate >= DATE_ADD(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 2 MONTH)), INTERVAL 1 DAY) AND o.OrderDate <= LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY o.EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the age distribution of employees and how does it relate to total sales?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, YEAR(CURRENT_DATE) - YEAR(e.BirthDate) AS Age, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName, Age ORDER BY Age;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed in each month of the last year?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, COUNT(orders.OrderID) AS total_orders FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY order_month",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How often do customers from a specific region place orders?",
        "output": "SELECT Region, COUNT(OrderID) AS OrdersCount FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Region = 'Specific Region' GROUP BY Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most consistent sales performance over the last six months?",
        "output": "SELECT e.FirstName, e.LastName, STDDEV(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) AS SalesConsistency FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY e.EmployeeID ORDER BY SalesConsistency ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend in sales revenue over the past year?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate > CURDATE() - INTERVAL 12 MONTH GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the overall on-time delivery rate?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have not placed any orders?",
        "output": "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly on-time delivery rate for 2023?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate)::float / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total quantity ordered for each product category.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each month in the year 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees by country?",
        "output": "SELECT Country, AVG(Salary) AS AvgSalary FROM employees GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the difference between units on order and units in stock for each product.",
        "output": "SELECT ProductID, (UnitsOnOrder - UnitsInStock) AS Difference FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 10 cities with the highest number of orders?",
        "output": "SELECT customers.City, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.City ORDER BY order_count DESC LIMIT 10",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales amount generated by each employee in the current month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average discount applied to products sold by each supplier.",
        "output": "SELECT s.SupplierID, AVG(od.Discount) AS AverageDiscount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of distinct products sold?",
        "output": "SELECT COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the most sales in Q1 of 2023?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN orders ON od.OrderID = orders.OrderID JOIN employees e ON orders.EmployeeID = e.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 AND MONTH(orders.OrderDate) BETWEEN 1 AND 3 GROUP BY e.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales amount for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many products were ordered by each customer in the last year?",
        "output": "SELECT CustomerID, SUM(Quantity) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify patterns in order shipping dates relative to order dates for each employee.",
        "output": "SELECT e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance of each product in terms of sales?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have processed more than 100 orders?",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(o.OrderID) > 100",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the average discount rate applied across all orders.",
        "output": "SELECT AVG(Discount) AS AverageDiscountRate FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in December 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the longevity of employees in the company based on hire date.",
        "output": "SELECT EmployeeID, DATEDIFF(CURDATE(), HireDate)/365.25 AS YearsWithCompany FROM employees;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for each shipping company in 2023?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the highest discount given on any product?",
        "output": "SELECT MAX([Order Details].Discount) AS MaxDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product generated the most revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 3 products by sales revenue.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductRevenue FROM [Order Details] GROUP BY ProductID ORDER BY ProductRevenue DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the customer retention rate for the first half of 2023.",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products contributed to the top 10% of total sales revenue?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE p.ProductID IN (SELECT ProductID FROM (SELECT ProductID, SUM(UnitPrice * Quantity) AS SalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT (SELECT COUNT(DISTINCT ProductID) * 0.1 FROM [Order Details])) subquery);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which order took the longest to ship?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingTime FROM orders ORDER BY ShippingTime DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest number of units on order?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average discount given per supplier.",
        "output": "SELECT products.SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders are still pending shipment?",
        "output": "SELECT COUNT(*) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have both a positive stock and are discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 cities with the highest number of customers.",
        "output": "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC LIMIT 5",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly sales trend for each product?",
        "output": "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS MonthlySales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Month ORDER BY p.ProductName, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 products by total units ordered?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalUnitsOrdered DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are currently out of stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify any trends in shipping costs over the last year.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest total order quantity?",
        "output": "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products were most commonly ordered?",
        "output": "SELECT od.ProductID, COUNT(od.ProductID) AS OrderCount FROM [Order Details] od GROUP BY od.ProductID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have managed orders with a freight cost greater than $500.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS HighFreightOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.Freight > 500 GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average time between reordering and restocking.",
        "output": "SELECT AVG(DATEDIFF(RestockDate, ReorderDate)) AS AverageTime FROM ReorderHistory;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify which products have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee made the highest total sales last month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders with a discount greater than 10% each month?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS Month, COUNT(CASE WHEN [Order Details].Discount > 0.1 THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS DiscountPercentage FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_TRUNC('month', orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does average order quantity compare between two specific categories?",
        "output": "SELECT p.CategoryID, AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide products with the highest average unit price?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID ORDER BY AvgUnitPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied per order, and how does it vary by product?",
        "output": "SELECT [Order Details].ProductID, AVG([Order Details].Discount) AS average_discount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY average_discount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight cost for each shipping country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who has the earliest hire date.",
        "output": "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees ORDER BY HireDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 orders with the highest freight costs.",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of orders placed by customers from each country?",
        "output": "SELECT c.Country, AVG(o_count.CountOrders) AS AvgOrders FROM customers c JOIN (SELECT CustomerID, COUNT(OrderID) AS CountOrders FROM orders GROUP BY CustomerID) o_count ON c.CustomerID = o_count.CustomerID GROUP BY c.Country",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product category in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee managed the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many different products are supplied by each supplier?",
        "output": "SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total revenue for each supplier.",
        "output": "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were delivered late in 2023?",
        "output": "SELECT COUNT(OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders with a freight cost above a certain threshold.",
        "output": "SELECT orders.OrderID, orders.Freight FROM orders WHERE orders.Freight > threshold",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum and minimum freight cost for an order each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, MAX(Freight) AS MaxFreight, MIN(Freight) AS MinFreight FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have earned a total sales amount greater than their annual salary.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, e.Salary FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > e.Salary;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How has shipping cost per order changed over the months in 2023?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS order_month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue for each month in the last year?",
        "output": "SELECT YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY YEAR(o.OrderDate), MONTH(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does employee sales performance vary by territory?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders in 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total freight cost incurred in 2023?",
        "output": "SELECT SUM(orders.Freight) AS total_freight_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer places the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the maximum number of late shipments?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateShipments FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY LateShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products were sold in each month last year?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS OrderMonth, COUNT(DISTINCT od.ProductID) AS UniqueProductCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND o.OrderDate < CURDATE() GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales value for each product category?",
        "output": "SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find out which products have been ordered with a discount greater than 20%.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.Discount > 0.2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which countries have the most delayed shipments?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCountry ORDER BY DelayedShipments DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of customers from each country?",
        "output": "SELECT Country, COUNT(CustomerID) AS TotalCustomers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to each city?",
        "output": "SELECT ShipCity, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCity;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by each customer between January and March 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How frequently is each product ordered?",
        "output": "SELECT ProductID, COUNT(OrderID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discount given on each product.",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is most commonly used?",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have not been ordered in the past six months?",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate IS NULL OR o.OrderDate < DATEADD(MONTH, -6, CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company (ShipVia) had the highest on-time delivery rate last year?",
        "output": "SELECT ShipVia, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*)) AS OnTimeRate FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many different products are customers ordering each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers whose products have received the highest number of order quantities.",
        "output": "SELECT products.SupplierID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity sold for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region has the fastest average Order Fulfillment Time?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillTime",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Analyze the trends of units ordered for each product over the last quarter.",
        "output": "SELECT p.ProductID, SUM(od.Quantity) as QuantityOrdered, DATE_FORMAT(OrderDate, '%Y-%m') as OrderMonth FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, OrderMonth ORDER BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the average discount applied on orders per month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the percentage of discontinued products in inventory?",
        "output": "SELECT 100.0 * COUNT(*) / (SELECT COUNT(*) FROM products) AS DiscontinuedPercentage FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which month had the highest total sales generated by employees?",
        "output": "SELECT DATE_FORMAT(O.OrderDate, '%Y-%m') AS Month, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID JOIN employees E ON O.EmployeeID = E.EmployeeID GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region experiences the highest average shipping cost?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the total sales trend over the last 6 months?",
        "output": "SELECT OrderMonth, SUM(TotalSales) OVER (ORDER BY OrderMonth) AS CumulativeSales FROM (SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 months' GROUP BY OrderMonth) AS SalesTrend;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest total sales in the last year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped on time in 2023?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_deliveries FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND YEAR(orders.OrderDate) = 2023",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value across all orders?",
        "output": "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the Inventory Turnover Ratio for each product last month?",
        "output": "SELECT p.ProductID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate BETWEEN DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 second' GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products have the highest total sales value?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which order took the longest to fulfill?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders ORDER BY FulfillmentTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the most units on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of days between order placement and shipping?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have orders that were delivered late?",
        "output": "SELECT DISTINCT s.SupplierID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.RequiredDate < o.ShippedDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer spent the most in June 2023?",
        "output": "SELECT CustomerID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSpent FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE O.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY CustomerID ORDER BY TotalSpent DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the highest total shipping costs?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalShippingCosts FROM orders GROUP BY CustomerID ORDER BY TotalShippingCosts DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units on order are there for products with zero stock?",
        "output": "SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products WHERE UnitsOnOrder > 0 AND UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the performance of discontinued products?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1 GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the variance in shipping costs for orders shipped to Europe?",
        "output": "SELECT VARIANCE(Freight) AS FreightVariance FROM orders WHERE ShipCountry IN ('Germany', 'France', 'UK');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 3 suppliers by total sales revenue.",
        "output": "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(d.UnitPrice * d.Quantity * (1 - d.Discount)) AS TotalSales FROM orders o JOIN [Order Details] d ON o.OrderID = d.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are generating the most revenue after discounts?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY Revenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the inventory turnover ratio for the current month.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled on time this quarter?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE())",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of each product sold?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which three products have the highest sales revenue?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have not been ordered in the last year?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE NOT EXISTS (SELECT 1 FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE p.ProductID = od.ProductID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were shipped within two days of being placed?",
        "output": "SELECT COUNT(OrderID) FILTER (WHERE DATEDIFF(ShippedDate, OrderDate) <= 2) * 100.0 / COUNT(OrderID) FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who were hired in the last year.",
        "output": "SELECT EmployeeID FROM employees WHERE HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which regions receive the most shipments?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipRegion ORDER BY Shipments DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top three cities by number of orders shipped?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have been discontinued and who were their suppliers?",
        "output": "SELECT p.ProductName, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders exceeded their required delivery date in 2023?",
        "output": "SELECT COUNT(orders.OrderID) AS late_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the performance overview of each employee for 2023?",
        "output": "SELECT employees.EmployeeID, CONCAT(employees.FirstName, ' ', employees.LastName) AS employee_name, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales, COUNT(DISTINCT orders.OrderID) AS total_orders FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID, employee_name ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top 3 suppliers with the fastest average delivery times.",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageDeliveryTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID ORDER BY AverageDeliveryTime ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the total sales for products supplied by the top supplier by sales.",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total sales per region by employee.",
        "output": "SELECT e.Region, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region, e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products from each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have not completed an order last quarter.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL OR (o.OrderDate < DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) + 1 MONTH) AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL MOD(MONTH(CURDATE()) - 1, 3) + 4 MONTH));",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which category has the highest number of discontinued products?",
        "output": "SELECT categories.CategoryID, COUNT(products.ProductID) AS discontinued_count FROM products JOIN categories ON products.CategoryID = categories.CategoryID WHERE products.Discontinued = 1 GROUP BY categories.CategoryID ORDER BY discontinued_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred for each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry ORDER BY TotalFreightCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What were the top 3 most profitable products in 2023?",
        "output": "SELECT products.ProductName, SUM((UnitPrice - (UnitPrice * Discount)) * Quantity) AS profit FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY profit DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were not delivered on time each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate) * 100.0 / NULLIF(COUNT(OrderID), 0) AS LateDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has the highest customer satisfaction based on on-time shipping?",
        "output": "SELECT Region, AVG(CASE WHEN DATEDIFF(ShippedDate, RequiredDate) < 0 THEN 0 ELSE DATEDIFF(ShippedDate, RequiredDate) END) AS AvgDelay FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE ShippedDate IS NOT NULL GROUP BY Region ORDER BY AvgDelay ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the percentage of orders with a discount applied?",
        "output": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM [Order Details])) AS percentage_with_discount FROM [Order Details] WHERE Discount > 0",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the product categories with the highest inventory turnover ratio.",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY inventory_turnover DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees with the most orders in the past year.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly inventory turnover ratio in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each month in the year 2023?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, AVG(Freight) AS Average_Shipping_Cost FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = 2023 GROUP BY TO_CHAR(OrderDate, 'YYYY-MM')",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the percentage of orders that received a discount.",
        "output": "SELECT (COUNT(DISTINCT OrderID) * 1.0 / (SELECT COUNT(DISTINCT OrderID) FROM orders)) * 100 AS DiscountedOrderPercentage FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the average order value differ between regions?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide products with the highest average discount?",
        "output": "SELECT SupplierID, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Compare the total freight cost for orders by week.",
        "output": "SELECT DATE_TRUNC('week', OrderDate) AS Week, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_TRUNC('week', OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for orders placed in January?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS average_fulfillment_time FROM orders WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE())",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight costs per employee for the current year.",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time this month?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS FulfillmentTime FROM orders WHERE OrderDate >= DATE_TRUNC('MONTH', CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the shortest delivery time on average?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) as AvgDeliveryTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY AvgDeliveryTime ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many unique products were ordered in the month of February 2023?",
        "output": "SELECT COUNT(DISTINCT [Order Details].ProductID) AS unique_products FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each customer?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to each product category?",
        "output": "SELECT c.CategoryID, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region had the lowest total sales last month?",
        "output": "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) GROUP BY ShipRegion ORDER BY TotalSales ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated from a specific customer?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.CustomerID = 'specific_customer_id';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify suppliers who provide the highest number of products.",
        "output": "SELECT s.SupplierName, COUNT(p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName ORDER BY ProductCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late by more than 3 days in the last quarter?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > DATE_ADD(RequiredDate, INTERVAL 3 DAY) AND EXTRACT(YEAR_QUARTER FROM OrderDate) = EXTRACT(YEAR_QUARTER FROM CURRENT_DATE - INTERVAL 3 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has processed the most orders?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY NumberOfOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has made the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum shipping cost recorded for a single order each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, MAX(Freight) AS MaxFreight FROM orders GROUP BY EXTRACT(YEAR FROM OrderDate), EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Are there any regions with consistently higher freight costs?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest lead time?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for orders shipped last year?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE YEAR(ShippedDate) = YEAR(CURRENT_DATE) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country has the highest average order value?",
        "output": "SELECT ShipCountry, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY AverageOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on time this quarter?",
        "output": "SELECT COUNT(o.OrderID) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped on time per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales revenue per category in the last month?",
        "output": "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 MONTH') AND EXTRACT(YEAR FROM od.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 MONTH') GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the most significant price increase over the past year?",
        "output": "SELECT products.ProductID, products.ProductName, MAX([Order Details].UnitPrice) - MIN([Order Details].UnitPrice) AS PriceIncrease FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top three products in terms of quantity ordered?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantity DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not reached their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total sales revenue for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How does the on-time delivery rate compare across different regions?",
        "output": "SELECT ShipRegion, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) AS OnTimeDeliveries, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipRegion",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest inventory turnover ratio?",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time between the order date and the shipping date for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgTime FROM orders GROUP BY ShipVia ORDER BY AvgTime;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has the highest average discount applied?",
        "output": "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od GROUP BY od.ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been shipped late compared to the required date?",
        "output": "SELECT COUNT(o.OrderID) AS LateOrders FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the sales per order for each employee and identify any significant outliers.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, (od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesPerOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE (od.UnitPrice * od.Quantity * (1 - od.Discount)) > (SELECT AVG(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2) * 1.5 ORDER BY SalesPerOrder DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has the highest average order quantity?",
        "output": "SELECT [Order Details].ProductID, AVG([Order Details].Quantity) AS AvgQuantity FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY AvgQuantity DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the top 5 customers by lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products that have never been ordered.",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average shipping cost compare between top two shipping methods?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders WHERE ShipVia IN (SELECT ShipVia FROM orders GROUP BY ShipVia ORDER BY COUNT(*) DESC LIMIT 2) GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on or before the required date last month?",
        "output": "SELECT COUNT(o.OrderID) FILTER (WHERE o.ShippedDate <= o.RequiredDate) * 100.0 / COUNT(o.OrderID) AS OnTimeDeliveryRate FROM orders o WHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest average order value?",
        "output": "SELECT c.CustomerID, AVG(OrderValues.Subtotal) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN (SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Subtotal FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS OrderValues ON o.OrderID = OrderValues.OrderID GROUP BY c.CustomerID ORDER BY AverageOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products sold each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalQuantitySold FROM Orders INNER JOIN [Order Details] ON Orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 10 customers by total sales in the past year.",
        "output": "SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY orders.CustomerID ORDER BY TotalSales DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine which month had the highest sales revenue this year.",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlyRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY OrderMonth ORDER BY MonthlyRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top 3 cities for supplier location by the number of suppliers.",
        "output": "SELECT City, COUNT(DISTINCT SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the most orders with high freight costs?",
        "output": "SELECT ShipRegion, COUNT(*) AS HighFreightOrders FROM orders WHERE Freight > 100 GROUP BY ShipRegion ORDER BY HighFreightOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many distinct products are purchased by each customer?",
        "output": "SELECT c.CustomerID, COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most variety of products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total value of all orders placed with discounts?",
        "output": "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalValue FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has the highest average shipping cost per order?",
        "output": "SELECT EmployeeID, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY EmployeeID ORDER BY AverageShippingCost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who has worked the longest in the company.",
        "output": "SELECT EmployeeID, CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees ORDER BY HireDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers have the most products discontinued?",
        "output": "SELECT SupplierID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY DiscontinuedCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many employees have territories spanning multiple regions?",
        "output": "SELECT COUNT(DISTINCT employees.EmployeeID) FROM employeeTerritories JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY employeeTerritories.EmployeeID HAVING COUNT(DISTINCT territories.RegionID) > 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which order had the highest freight cost, and what shipping method was used?",
        "output": "SELECT OrderID, ShipVia, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total value of units on order for each product?",
        "output": "SELECT ProductName, UnitsOnOrder * UnitPrice AS TotalOnOrderValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for all shipped orders?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers placed an order in the last month?",
        "output": "SELECT c.CustomerID, c.CompanyName FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(MONTH, -1, CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price for products from each supplier?",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 3 employees by sales performance for February 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top 3 products with the most significant increase in order quantities month-over-month.",
        "output": "WITH MonthlySales AS (SELECT DATE_TRUNC('month', o.OrderDate) AS Month, od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month, od.ProductID), MonthOverMonthChange AS (SELECT a.ProductID, a.Month, a.TotalQuantity, a.TotalQuantity - COALESCE(b.TotalQuantity, 0) AS Increase FROM MonthlySales a LEFT JOIN MonthlySales b ON a.ProductID = b.ProductID AND a.Month = b.Month + INTERVAL '1 month') SELECT ProductID FROM MonthOverMonthChange ORDER BY Increase DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales value for each category?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the highest total quantity ordered?",
        "output": "SELECT c.CategoryName, SUM(od.Quantity) AS TotalQuantity FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are based in a specific region or country?",
        "output": "SELECT * FROM suppliers WHERE Region = 'SpecificRegion' OR Country = 'SpecificCountry';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have not been assigned any orders.",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many days on average does it take to fulfill an order for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(CAST(ShippedDate AS DATE) - CAST(OrderDate AS DATE)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide more than 1000 units of products currently in stock?",
        "output": "SELECT SupplierID FROM products WHERE UnitsInStock > 1000 GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest average order fulfillment time?",
        "output": "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCity ORDER BY AvgFulfillmentTime DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped within 7 days of the order date?",
        "output": "SELECT COUNT(*) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories contributed to total sales in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many new customers were acquired each month in the first half of 2023?",
        "output": "SELECT DATE_TRUNC('month', orders.OrderDate) AS order_month, COUNT(DISTINCT orders.CustomerID) AS new_customers FROM orders LEFT JOIN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < '2023-01-01') AS previous_customers ON orders.CustomerID = previous_customers.CustomerID WHERE previous_customers.CustomerID IS NULL AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY order_month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales generated by each supplier?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products in terms of quantity sold?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were delivered on or before the required date for each month?",
        "output": "SELECT EXTRACT(YEAR FROM ShippedDate) AS Year, EXTRACT(MONTH FROM ShippedDate) AS Month, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Year, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the total units ordered for products in each category.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS TotalUnitsOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the impact of different shipping methods on lead time across orders?",
        "output": "SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o GROUP BY o.ShipVia ORDER BY AvgLeadTime;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who have placed orders only with a specific EmployeeID.",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(DISTINCT o.EmployeeID) = 1 AND MAX(o.EmployeeID) = specific_id;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee reports to the manager with the highest average sales per employee?",
        "output": "SELECT e.EmployeeID FROM employees e WHERE e.ReportsTo = (SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of discontinued products?",
        "output": "SELECT COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many distinct products have been discontinued?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that need restocking (units in stock below reorder level).",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on or before the required date in June 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) * 100.0 / COUNT(orders.OrderID) AS on_time_delivery_percentage FROM orders WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the best lead time performance over the past 6 months?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY suppliers.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend in total freight costs over the past year by month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= DATE_ADD('year', -1, CURRENT_DATE) GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most expensive product?",
        "output": "SELECT SupplierID FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What shipping method has the shortest average fulfillment time?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgShipTime FROM orders GROUP BY ShipVia ORDER BY AvgShipTime LIMIT 1;",
        "difficulty": "medium"
    }
]