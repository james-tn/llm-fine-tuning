[
    {
        "scenario": "Customer Analysis",
        "input": "Which employees have handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units ordered per supplier?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest number of sales orders processed?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for March 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the product with the highest inventory turnover ratio.",
        "output": "SELECT ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the most ordered product in the past month.",
        "output": "SELECT TOP 1 p.ProductID, SUM(od.Quantity) AS TotalSalesQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY p.ProductID ORDER BY TotalSalesQuantity DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many employees have handled orders that were shipped late?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount offered on all products?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been discontinued, and what are their current stock levels?",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest total freight costs?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Month ORDER BY TotalFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of distinct shipping companies used?",
        "output": "SELECT COUNT(DISTINCT ShipVia) AS DistinctShippingCompanies FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were handled by each employee per region?",
        "output": "SELECT e.EmployeeID, o.ShipRegion, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest performance score based on sales?",
        "output": "SELECT ProductID, SUM(Quantity) AS PerformanceScore FROM [Order Details] GROUP BY ProductID ORDER BY PerformanceScore DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have been hired in the last year.",
        "output": "SELECT * FROM employees WHERE HireDate >= DATE_SUB(NOW(), INTERVAL 1 YEAR);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order quantity across all orders?",
        "output": "SELECT AVG([Order Details].Quantity) AS Average_Quantity FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders have used the most expensive freight?",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the top 3 regions with the highest shipping costs year-to-date in 2023.",
        "output": "SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND CURDATE() GROUP BY ShipRegion ORDER BY TotalFreight DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for the past six months?",
        "output": "SELECT MONTH(OrderDate) AS Month, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY MONTH(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "For each supplier, what is the total quantity of products supplied?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantitySupplied FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the frequency of orders placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderFrequency FROM orders GROUP BY CustomerID ORDER BY OrderFrequency DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many suppliers have a lead time of more than 30 days?",
        "output": "SELECT COUNT(suppliers.SupplierID) AS num_suppliers FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 30",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the most frequently ordered product.",
        "output": "SELECT products.ProductName, COUNT([Order Details].OrderID) AS OrderFrequency FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY OrderFrequency DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers who have provided products with more than 10% discount on average.",
        "output": "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName HAVING AVG(od.Discount) > 0.1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that have been ordered with a discount greater than 10%.",
        "output": "SELECT ProductID FROM [Order Details] WHERE Discount > 0.10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on orders per product?",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are currently on order and need replenishment?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products sold per country in 2023?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY orders.ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company had the highest on-time delivery rate in the last quarter?",
        "output": "SELECT ShipVia, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the month with the highest total sales.",
        "output": "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Year, Month ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products with no orders placed in the last three months.",
        "output": "SELECT p.ProductID FROM products p WHERE NOT EXISTS (SELECT 1 FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.ProductID = p.ProductID AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month has the highest number of orders?",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY MONTH(OrderDate) ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify categories that consist of discontinued products.",
        "output": "SELECT DISTINCT CategoryID FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer placed the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units in stock for each product category?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which order took the longest to fulfill?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders ORDER BY FulfillmentTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee fulfilled the most orders last month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersFulfilled FROM orders WHERE MONTH(OrderDate) = MONTH(CURDATE()) - 1 GROUP BY EmployeeID ORDER BY OrdersFulfilled DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed but not yet shipped as of March 2023?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate IS NULL AND o.OrderDate <= '2023-03-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the product with the highest average discount in 2022.",
        "output": "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY od.ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which products are most commonly associated with discounts?",
        "output": "SELECT od.ProductID, COUNT(*) AS DiscountedOrderCount FROM [Order Details] od WHERE od.Discount > 0 GROUP BY od.ProductID ORDER BY DiscountedOrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer lifetime value for each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost for orders shipped via each method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time per shipping company?",
        "output": "SELECT shippers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred for orders shipped to each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products in terms of sales that were shipped internationally?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShipCountry <> 'LocalCountry' GROUP BY p.ProductID, p.ProductName ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products with a unit price greater than a specific value.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the employee responsible for overseeing the most orders in 2023.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many unique customers have made repeat purchases in the last six months?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS repeat_customers FROM (SELECT CustomerID FROM orders WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS repeat_customer_ids",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discounted amount for all orders?",
        "output": "SELECT SUM(Quantity * UnitPrice * Discount) AS TotalDiscountedAmount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscountPerOrder FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the top 5 customers in terms of freight costs this year.",
        "output": "SELECT CustomerID, SUM(Freight) FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY CustomerID ORDER BY SUM(Freight) DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products with the highest average discounts?",
        "output": "SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AverageDiscount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for March 2023?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) FROM orders o WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue per supplier?",
        "output": "SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SupplierRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How do customer demographics influence purchasing patterns and retention rates?",
        "output": "SELECT customerDemographics.CustomerDesc, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_lifetime_value FROM customers JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customerDemographics.CustomerDesc",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping companies have the lowest average delivery times?",
        "output": "SELECT shippers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_delivery_time FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average discount applied in all orders.",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have been ordered with discounts?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 5 regions in terms of total sales revenue?",
        "output": "SELECT ShipRegion, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the least common shipping method in use.",
        "output": "SELECT ShipVia, COUNT(*) AS Count FROM orders GROUP BY ShipVia ORDER BY Count ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for each shipping country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with a turnover ratio higher than 5 in the last month.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(UnitsInStock) AS Turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH([Order Details].OrderDate) = MONTH(CURRENT_DATE()) AND YEAR([Order Details].OrderDate) = YEAR(CURRENT_DATE()) GROUP BY products.ProductID HAVING Turnover > 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the lead time for orders shipped in March 2023.",
        "output": "SELECT o.OrderID, DATEDIFF(o.ShippedDate, o.OrderDate) AS LeadTime FROM orders o WHERE MONTH(o.ShippedDate) = 3 AND YEAR(o.ShippedDate) = 2023;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a reorder level greater than their current stock?",
        "output": "SELECT COUNT(*) FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee managed the most number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 customers based on the number of orders.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY CustomerID ORDER BY NumOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product category has the highest total sales?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the correlation between unit price and sales quantity.",
        "output": "SELECT p.ProductID, CORR(p.UnitPrice, od.Quantity) AS PriceQuantityCorrelation FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the order details for products with a unit price above $50.",
        "output": "SELECT products.ProductName, [Order Details].UnitPrice FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].UnitPrice > 50;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the month with the highest average shipping cost in 2022.",
        "output": "SELECT MONTH(OrderDate) AS Month, AVG(Freight) AS AverageFreight FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month ORDER BY AverageFreight DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersShipped FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify any orders that received a discount greater than 20%.",
        "output": "SELECT DISTINCT OrderID FROM [Order Details] WHERE Discount > 0.2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which order had the highest total cost including discount?",
        "output": "SELECT [Order Details].OrderID, SUM(([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS TotalCost FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY [Order Details].OrderID ORDER BY TotalCost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the correlation between product price and quantity sold.",
        "output": "SELECT CORR(p.UnitPrice, od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have sales exceeding their reorder level?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > p.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders placed last quarter?",
        "output": "SELECT COUNT(*) AS TotalOrders FROM orders WHERE OrderDate BETWEEN DATE_ADD(CURDATE(), INTERVAL -3 MONTH) AND CURDATE();",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers are there in each region?",
        "output": "SELECT Region, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have never been ordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have been ordered in quantities greater than 100.",
        "output": "SELECT DISTINCT ProductID FROM [Order Details] WHERE Quantity > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of unique customers?",
        "output": "SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products with a unit price higher than the average unit price of all products.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total freight cost per country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never reached their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product had the highest total sales last month?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE YEAR(CURRENT_DATE - INTERVAL 1 MONTH) = YEAR(od.OrderDate) AND MONTH(CURRENT_DATE - INTERVAL 1 MONTH) = MONTH(od.OrderDate) GROUP BY p.ProductID, p.ProductName ORDER BY SUM(od.Quantity * od.UnitPrice) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the percentage of orders with a discount greater than 10%?",
        "output": "SELECT (SUM(CASE WHEN od.Discount > 0.1 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS DiscountedOrderPercentage FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List orders that had no discounts applied.",
        "output": "SELECT DISTINCT o.OrderID FROM orders o LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the most commonly ordered product.",
        "output": "SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 3 products in terms of sales revenue?",
        "output": "SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od GROUP BY ProductID ORDER BY ProductSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the on-time delivery rate for each month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') as Month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) as OnTimeRate FROM orders GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average supplier lead time for each supplier.",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM orders o JOIN products p ON o.OrderID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest average sales per order?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSalesPerOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgSalesPerOrder DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Compare the product performance of discontinued vs. non-discontinued products.",
        "output": "SELECT products.Discontinued, SUM([Order Details].Quantity) AS total_quantity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.Discontinued",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m-01') AND LAST_DAY(CURDATE() - INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount applied by each employee on their orders?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of shipments per city?",
        "output": "SELECT ShipCity, COUNT(OrderID) FROM orders GROUP BY ShipCity;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country has the highest number of orders?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average number of units in stock for active (non-discontinued) products?",
        "output": "SELECT AVG(UnitsInStock) FROM products WHERE Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What's the average discount given across all orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed in March 2023?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE MONTH(OrderDate) = 3 AND YEAR(OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between the average order value and customer retention rate?",
        "output": "SELECT (AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID))) AS average_order_value, (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN 'start_date' AND 'end_date') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < 'start_date') AS customer_retention_rate FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products need immediate reorder based on reorder level and units on order?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How much freight cost was incurred for orders shipped to USA in March 2023?",
        "output": "SELECT SUM(o.Freight) FROM orders o WHERE o.ShipCountry = 'USA' AND MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to all order details?",
        "output": "SELECT AVG(Discount) AS Average_Discount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How effective are promotions, given customer retention rates and average order values?",
        "output": "SELECT campaigns.CampaignID, (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate BETWEEN campaigns.StartDate AND campaigns.EndDate))::float / NULLIF(COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate < campaigns.StartDate), 0) AS retention_rate, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM campaigns JOIN orders ON orders.CampaignID = campaigns.CampaignID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY campaigns.CampaignID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products sold by each supplier?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalQuantity FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total lifetime value for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units are currently on order from each supplier?",
        "output": "SELECT SupplierID, SUM(UnitsOnOrder) FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the most popular product by quantity ordered.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total sales for each country.",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier's products contribute the most to total sales revenue?",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Total_Revenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY Total_Revenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the earliest hire date and their total sales.",
        "output": "SELECT employees.EmployeeID, employees.HireDate, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY employees.HireDate ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum delay in shipment experienced by any order?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, RequiredDate)) AS MaxDelay FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 5 customers by revenue generated.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the top 3 regions with the quickest order fulfillment time.",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS QuickestFulfillment FROM orders GROUP BY ShipRegion ORDER BY QuickestFulfillment ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify which employee's orders incurred the highest freight cost.",
        "output": "SELECT EmployeeID, SUM(Freight) AS HighestFreight FROM orders GROUP BY EmployeeID ORDER BY HighestFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for the most recent month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average time between order and shipped date per employee?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products in each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT DISTINCT p.ProductID FROM products p WHERE p.ProductID NOT IN (SELECT DISTINCT od.ProductID FROM [Order Details] od);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between order placement and required date?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who were hired last year.",
        "output": "SELECT * FROM employees WHERE YEAR(HireDate) = YEAR(CURRENT_DATE()) - 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders are shipped internationally and what is their average shipping cost?",
        "output": "SELECT COUNT(orders.OrderID) AS international_orders, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.ShipCountry != 'YourHomeCountry'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the average freight cost per order.",
        "output": "SELECT AVG(Freight) as AvgFreight FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products that are currently on order and their suppliers.",
        "output": "SELECT products.ProductName, suppliers.CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been shipped to the city of London?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShipCity = 'London';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Examine the employee performance based on sales against the number of territories they manage.",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT employeeTerritories.TerritoryID) AS territory_count, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for March 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the variance in unit prices for products within the same category?",
        "output": "SELECT CategoryID, VARIANCE(UnitPrice) AS PriceVariance FROM products GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Retrieve a list of products that have received the highest discount.",
        "output": "SELECT ProductID, MAX(Discount) FROM [Order Details] GROUP BY ProductID ORDER BY MAX(Discount) DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order quantity for products with discounts?",
        "output": "SELECT AVG(od.Quantity) AS Average_Quantity FROM [Order Details] od WHERE od.Discount > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the impact of discounts on sales for each product?",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice * Discount) AS DiscountImpact FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered for products with a unit price above average?",
        "output": "SELECT ProductID, SUM(Quantity) FROM [Order Details] WHERE ProductID IN (SELECT ProductID FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products)) GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between order frequency and average order value for customers with multiple demographics?",
        "output": "SELECT cd.CustomerDesc, COUNT(o.OrderID) AS OrderFrequency, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID JOIN customerCustomerDemo ccd ON c.CustomerID = ccd.CustomerID JOIN customerDemographics cd ON ccd.CustomerTypeID = cd.CustomerTypeID GROUP BY cd.CustomerDesc",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees along with their total sales and ranking by sales figures.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, DENSE_RANK() OVER (ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC) AS SalesRank FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average order value handled by each employee.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the total shipping costs for orders shipped via method 1?",
        "output": "SELECT SUM(o.Freight) AS TotalFreight FROM orders o WHERE o.ShipVia = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have never been ordered?",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have never shipped an order?",
        "output": "SELECT s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many products were ordered more than 50 times in total?",
        "output": "SELECT [Order Details].ProductID, COUNT([Order Details].OrderID) AS TotalOrders FROM [Order Details] GROUP BY [Order Details].ProductID HAVING SUM([Order Details].Quantity) > 50;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify all orders that were delayed and by how many days.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, RequiredDate) AS DelayDays FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find suppliers with the most discontinued products.",
        "output": "SELECT SupplierID, COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1 GROUP BY SupplierID ORDER BY DiscontinuedProducts DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders did each employee handle this month?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrdersHandled FROM orders o WHERE MONTH(o.OrderDate) = MONTH(CURDATE()) AND YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY o.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders that had a total value over $10,000.",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated by products with more than 10% discount applied.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od WHERE od.Discount > 0.10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not been ordered this year?",
        "output": "SELECT p.ProductID FROM products p WHERE NOT EXISTS (SELECT 1 FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.ProductID = p.ProductID AND YEAR(o.OrderDate) = YEAR(CURDATE()));",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given on all orders?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most number of products?",
        "output": "SELECT SupplierID, COUNT(*) as ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total revenue generated by each product.",
        "output": "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who made their first purchase in the last month.",
        "output": "SELECT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost by shipping method?",
        "output": "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the ratio of fulfilled to unfulfilled orders in 2023?",
        "output": "SELECT CONCAT(f.Fulfilled, ' : ', u.Unfulfilled) AS Ratio FROM (SELECT COUNT(o.OrderID) AS Fulfilled FROM orders o WHERE o.ShippedDate IS NOT NULL AND o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') f, (SELECT COUNT(o.OrderID) AS Unfulfilled FROM orders o WHERE o.ShippedDate IS NULL AND o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') u;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most frequently purchased product?",
        "output": "SELECT ProductID, SUM(Quantity) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many unique products have been ordered in the last quarter?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales revenue generated by each employee?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have products with a low inventory turnover ratio?",
        "output": "SELECT c.CategoryID, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock),0)) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID HAVING InventoryTurnover < 1.0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with a high discount rate that are still profitable.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Profit FROM [Order Details] WHERE Discount > 0.1 GROUP BY ProductID HAVING Profit > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have a shipping address in 'USA'?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of orders placed for products in each category?",
        "output": "SELECT c.CategoryID, COUNT(DISTINCT od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees with the longest tenure in the company.",
        "output": "SELECT EmployeeID, DATEDIFF(CURDATE(), HireDate) AS Tenure FROM employees ORDER BY Tenure DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of shipments that were late each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) AS LateShipments FROM orders GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average unit price of products in each category.",
        "output": "SELECT c.CategoryName, AVG(p.UnitPrice) AS AveragePrice FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly average order value for 2022?",
        "output": "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY MONTH(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have a shipped date later than the required date?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "For the last quarter, which employee had the most orders shipped late?",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY e.EmployeeID ORDER BY COUNT(o.OrderID) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with zero units in stock but listed on order.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products are still in stock?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most products in stock?",
        "output": "SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY TotalStock DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales in the last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND MONTH(orders.OrderDate) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers contributed most to total sales?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS supplier_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY supplier_sales DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for suppliers to deliver products each month?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders had a discount applied?",
        "output": "SELECT COUNT(DISTINCT CASE WHEN Discount > 0 THEN OrderID END) * 100.0 / COUNT(DISTINCT OrderID) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not placed any orders?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the impact of freight cost on order delays?",
        "output": "SELECT o.OrderID, DATEDIFF(o.ShippedDate, o.OrderDate) AS Delay, o.Freight FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees and their managers.",
        "output": "SELECT e.FirstName AS EmployeeName, m.FirstName AS ManagerName FROM employees e LEFT JOIN employees m ON e.ReportsTo = m.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many distinct products were sold by each employee in the past quarter?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT [Order Details].ProductID) AS ProductCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find out which product has the highest sales revenue.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity) AS SalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees who have never received a discount greater than 15% on any order.",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING MAX([Order Details].Discount) <= 0.15;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average number of orders per employee within a specified period.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) * 1.0 / DATEDIFF('2023-12-31', '2023-01-01') * COUNT(DISTINCT YEAR(OrderDate) * 100 + MONTH(OrderDate)) AS AvgOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which regions show the highest product demand?",
        "output": "SELECT regions.RegionDescription, SUM([Order Details].Quantity) AS product_demand FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region AS regions ON customers.Region = regions.RegionID GROUP BY regions.RegionDescription ORDER BY product_demand DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total freight cost managed by each employee.",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 3 products with the highest reorder levels.",
        "output": "SELECT p.ProductName, p.ReorderLevel FROM products p ORDER BY p.ReorderLevel DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total sales and number of orders for each customer.",
        "output": "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales, COUNT(o.OrderID) as OrderCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average delivery time for each supplier?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY suppliers.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have shipped orders with a freight cost exceeding $500?",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.Freight > 500 GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the most diverse sales portfolio based on product IDs.",
        "output": "SELECT EmployeeID, COUNT(DISTINCT ProductID) AS ProductDiversity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY ProductDiversity DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were fulfilled on or before the required date in Q1 2023?",
        "output": "SELECT COUNT(*) FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 most expensive products currently available?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 0 ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product contributed the most to total sales in 2022?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductSales FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY od.ProductID ORDER BY ProductSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for orders each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the percentage of sales contributed by each employee.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID) * 100 AS SalesPercentage FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time to fulfill an order in different regions?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the supplier with the most on-order units.",
        "output": "SELECT suppliers.SupplierID, SUM(products.UnitsOnOrder) AS TotalOnOrder FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY TotalOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the product with the most units on order.",
        "output": "SELECT ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer retention rate for the last fiscal quarter.",
        "output": "SELECT ((SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < '2023-01-01')) * 100 AS RetentionRate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been placed in each country?",
        "output": "SELECT ShipCountry, COUNT(DISTINCT OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top products based on sales and inventory levels?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS total_sales, products.UnitsInStock FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY total_sales DESC, products.UnitsInStock DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of the products in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify underperforming products that have low sales but high stock.",
        "output": "SELECT ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM([Order Details].Quantity) < products.UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all customers who had a discount greater than 25% on any order.",
        "output": "SELECT DISTINCT o.CustomerID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.Discount > 0.25;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top-selling products handled by each employee.",
        "output": "SELECT orders.EmployeeID, [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.EmployeeID, [Order Details].ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top five best-selling products?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products are still in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers that have not shipped any orders this year.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderID IS NULL OR YEAR(orders.ShippedDate) != YEAR(CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given across all products?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions have the highest average order value?",
        "output": "SELECT o.ShipRegion, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the order that took the longest to ship.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShippingTime FROM orders WHERE ShippedDate IS NOT NULL ORDER BY ShippingTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the most profitable product based on revenue.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total number of discontinued products supplied by each supplier.",
        "output": "SELECT s.CompanyName, COUNT(p.ProductID) AS DiscontinuedCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the relationship between freight cost and order size?",
        "output": "SELECT o.OrderID, o.Freight, SUM(od.Quantity) AS OrderSize FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the percentage of orders with a discount applied.",
        "output": "SELECT (COUNT(CASE WHEN Discount > 0 THEN 1 END) / COUNT(*)) * 100 AS DiscountedOrdersPercentage FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are delivered on-time monthly?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue generated per product?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest discount?",
        "output": "SELECT ProductID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY ProductID ORDER BY MaxDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average shipping time for orders delivered to the USA?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Average_Shipping_Time FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the highest selling product by quantity sold.",
        "output": "SELECT ProductID, SUM([Order Details].Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID ORDER BY TotalSold DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average discount applied per order.",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which countries have the highest average shipping cost per order and how do their sales compare?",
        "output": "SELECT orders.ShipCountry, AVG(orders.Freight) AS avg_shipping_cost, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry ORDER BY avg_shipping_cost DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders with a required date in the next week.",
        "output": "SELECT OrderID FROM orders WHERE RequiredDate BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products need to be reordered based on current stock levels?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have more than 10 orders and what is their average freight cost?",
        "output": "SELECT CustomerID, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers by lifetime value.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total order value for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are delivered on or before the required date?",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average delay time for all shipments shipped after the required date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelayTime FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the best on-time delivery rate?",
        "output": "SELECT ShipVia, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers supply products that have been discontinued?",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly inventory turnover ratio?",
        "output": "SELECT MONTH(o.OrderDate) AS OrderMonth, SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each customer last year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders in 2023?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers with at least 5 orders.",
        "output": "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) >= 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders are pending shipment for each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS PendingOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NULL GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees along with the number of unique products they have sold.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the supplier with the most products in stock.",
        "output": "SELECT SupplierID, SUM(UnitsInStock) AS TotalStock FROM products GROUP BY SupplierID ORDER BY TotalStock DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had an unusual spike in sales in any given month?",
        "output": "SELECT employees.EmployeeID FROM (SELECT employees.EmployeeID, YEAR(orders.OrderDate) AS Year, MONTH(orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Year, Month) AS monthly_sales GROUP BY employees.EmployeeID HAVING MAX(monthly_sales.MonthlySales) > 2 * AVG(monthly_sales.MonthlySales);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average unit price of products by order?",
        "output": "SELECT o.OrderID, AVG(od.UnitPrice) AS AvgUnitPrice FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have stock levels below their reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the average shipping cost per order compare between different regions?",
        "output": "SELECT customers.Region, AVG(orders.Freight) AS average_shipping_cost FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Region",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the performance of product categories by sales.",
        "output": "SELECT c.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS Performance FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the minimum, maximum, and average freight cost of shipped orders?",
        "output": "SELECT MIN(Freight) AS MinFreight, MAX(Freight) AS MaxFreight, AVG(Freight) AS AvgFreight FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average product price?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AvgPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY AvgPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the Inventory Turnover Ratio for the last quarter.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the on-time delivery rate compare across different shipping companies?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) / COUNT(OrderID) * 100 AS OnTimeRate FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units sold per unit price bracket?",
        "output": "SELECT FLOOR(UnitPrice) AS PriceBracket, SUM(od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY FLOOR(UnitPrice);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders for the top customer by sales revenue.",
        "output": "SELECT orders.* FROM orders JOIN (SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalSales DESC LIMIT 1) AS top_customer ON orders.CustomerID = top_customer.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many distinct customers have ordered products from each supplier?",
        "output": "SELECT products.SupplierID, COUNT(DISTINCT orders.CustomerID) AS DistinctCustomers FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders in March 2023?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023 GROUP BY o.CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which countries have the highest number of orders shipped?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the most frequently ordered product?",
        "output": "SELECT o.ProductID, SUM(o.Quantity) AS TotalOrders FROM [Order Details] o GROUP BY o.ProductID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest average shipping cost?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month ORDER BY AvgShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products along with their category and supplier names.",
        "output": "SELECT products.ProductName, categories.CategoryName, suppliers.SupplierName FROM products JOIN categories ON products.CategoryID = categories.CategoryID JOIN suppliers ON products.SupplierID = suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find suppliers whose products have never been ordered.",
        "output": "SELECT SupplierID FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products with zero stock but have units on order.",
        "output": "SELECT ProductID FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average number of products per order.",
        "output": "SELECT AVG(od.Quantity) AS AverageProductsPerOrder FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average inventory turnover rate per category for the past six months?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS AvgInventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate BETWEEN '2023-03-01' AND '2023-08-31' GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed and shipped on the same day?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE OrderDate = ShippedDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the top 5 products by quantity sold last month.",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY od.ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the average order value in the last quarter?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 selling products.",
        "output": "SELECT p.ProductID FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY SUM(od.Quantity) DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the overall on-time delivery rate?",
        "output": "SELECT 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated for each product?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Total_Sales FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been placed by customers in each city?",
        "output": "SELECT customers.City, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.City;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have processed orders with zero discounts.",
        "output": "SELECT DISTINCT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID LEFT JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the ratio of shipped orders to unshipped orders?",
        "output": "SELECT ROUND(SUM(CASE WHEN ShippedDate IS NOT NULL THEN 1 ELSE 0 END) / SUM(CASE WHEN ShippedDate IS NULL THEN 1 ELSE 0 END), 2) AS ShippedToUnshippedRatio FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of each product sold?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the total revenue compare between different suppliers?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the inventory turnover ratio vary by month?",
        "output": "SELECT DATE_FORMAT(od.OrderDate, '%Y-%m') AS Month, (SUM(od.Quantity * od.UnitPrice) / NULLIF(AVG(p.UnitsInStock),0)) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY DATE_FORMAT(od.OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order in the last month?",
        "output": "SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total discount amount for each product.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How does product performance vary across months?",
        "output": "SELECT p.ProductID, MONTH(od.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, MONTH(od.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most ordered product in terms of quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalOrderedQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrderedQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have generated the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY lifetime_value DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered for each product categorized as \u2018Electronics\u2019?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.CategoryID = (SELECT CategoryID FROM categories WHERE CategoryName = 'Electronics') GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for domestic vs. international shipments?",
        "output": "SELECT CASE WHEN ShipCountry = 'USA' THEN 'Domestic' ELSE 'International' END AS ShipmentType, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipmentType;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between the order date and the required date in 2023?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped within 5 days of the order date?",
        "output": "SELECT COUNT(orders.OrderID) FROM orders WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) <= 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products that need to be reordered.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average salary for employees per region.",
        "output": "SELECT e.Region, AVG(e.Salary) AS AvgSalary FROM employees e GROUP BY e.Region",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are there from each country?",
        "output": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered for each product across all orders?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many distinct products did each employee sell?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS DistinctProductsSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) / COUNT(DISTINCT O.OrderID) AS AvgOrderValue FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month with the highest number of orders placed.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') as Month, COUNT(OrderID) as OrderCount FROM orders GROUP BY Month ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names of products that have received the highest orders?",
        "output": "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products contribute the most to total sales revenue?",
        "output": "SELECT ProductID, SUM(o.Quantity * o.UnitPrice * (1 - o.Discount)) AS SalesRevenue FROM [Order Details] o GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many different products have been sold at a discount?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were shipped after their required date?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate AND ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales this month?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURDATE()) GROUP BY e.EmployeeID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the impact of discounts on the total sales revenue?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS discount_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers with the highest number of products.",
        "output": "SELECT suppliers.SupplierID, CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductCount DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which countries have the highest average order value?",
        "output": "SELECT ShipCountry, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY AverageOrderValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have shipped orders within the shortest timeframe.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, MIN(DATEDIFF(o.ShippedDate, o.OrderDate)) AS ShortestShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID ORDER BY ShortestShippingTime LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique customers placed orders in March 2023?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE MONTH(OrderDate) = 3 AND YEAR(OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most significant quantity of a single product in a single order?",
        "output": "SELECT ProductID, MAX(Quantity) AS MaxQuantity FROM [Order Details] GROUP BY ProductID ORDER BY MaxQuantity DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 countries by total sales revenue.",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN `Order Details` ON orders.OrderID = `Order Details`.OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were fulfilled by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with stock levels between 50 and 100 units.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock BETWEEN 50 AND 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest inventory turnover ratio this month?",
        "output": "SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS InventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY ProductID ORDER BY InventoryTurnover DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products and their respective reorder needs based on current stock.",
        "output": "SELECT ProductName, (ReorderLevel - UnitsInStock) AS ReorderNeed FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total number of orders handled by each shipping method.",
        "output": "SELECT ShipVia, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How much freight was incurred for orders shipped to Germany?",
        "output": "SELECT SUM(orders.Freight) AS TotalFreight FROM orders WHERE orders.ShipCountry = 'Germany';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find orders that were not shipped before the required date.",
        "output": "SELECT orders.OrderID FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a stock level greater than 100 units?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List orders that were shipped late, along with the responsible employee.",
        "output": "SELECT o.OrderID, o.RequiredDate, o.ShippedDate, e.EmployeeID FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the products with a reorder level less than 20.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel < 20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products need to be reordered based on stock levels?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top five products by total sales quantity.",
        "output": "SELECT TOP 5 ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total number of distinct suppliers.",
        "output": "SELECT COUNT(DISTINCT SupplierID) AS TotalSuppliers FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total discount given for each product.",
        "output": "SELECT o.ProductID, SUM(o.Discount * o.Quantity * o.UnitPrice) AS TotalDiscount FROM [Order Details] o GROUP BY o.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compare the sales performance of employees across different regions.",
        "output": "SELECT employees.Region, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region, employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total discount given by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which region has the highest total sales?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the salary distribution of employees by their title?",
        "output": "SELECT employees.Title, AVG(employees.Salary) AS AverageSalary FROM employees GROUP BY employees.Title;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have more units on order than in stock?",
        "output": "SELECT ProductID FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred by each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest number of orders placed in March 2023?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023 GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest number of units sold with a discount applied?",
        "output": "SELECT ProductID, SUM(Quantity) as TotalSold FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID ORDER BY TotalSold DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify orders that were shipped after the required date.",
        "output": "SELECT o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What products are supplied by SupplierID = 5 and are not discontinued?",
        "output": "SELECT ProductName FROM products WHERE SupplierID = 5 AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Retention Rate for the past year.",
        "output": "SELECT (COUNT(DISTINCT orders.CustomerID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') * 1.0 / COUNT(DISTINCT orders.CustomerID WHERE orders.OrderDate < '2022-01-01')) * 100 AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many products have been sold per product ID?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] GROUP BY ProductID ORDER BY TotalSold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest total discount applied?",
        "output": "SELECT p.ProductID, SUM(od.Discount) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY SUM(od.Discount) DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of products sold per category?",
        "output": "SELECT CategoryID, SUM(Quantity) AS TotalProductsSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find suppliers with the highest average delivery time.",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY suppliers.SupplierID ORDER BY AvgLeadTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 customers based on the total freight cost.",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY CustomerID ORDER BY TotalFreightCost DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the cities with the highest average shipping cost.",
        "output": "SELECT ShipCity, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCity ORDER BY AvgShippingCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders processed each month?",
        "output": "SELECT YEAR(OrderDate) AS OrderYear, MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY OrderYear, OrderMonth;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers by total sales revenue.",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the distribution of order quantities?",
        "output": "SELECT od.Quantity, COUNT(*) AS QuantityFrequency FROM [Order Details] od GROUP BY od.Quantity ORDER BY QuantityFrequency DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the supplier and category for each product.",
        "output": "SELECT ProductName, SupplierID, CategoryID FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in the past year?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrdersPlaced FROM orders o WHERE o.OrderDate BETWEEN DATE_ADD(LAST_DAY(CURDATE()), INTERVAL 1 DAY - INTERVAL 1 YEAR) AND LAST_DAY(CURDATE()) GROUP BY o.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue for each supplier?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are offered by each category?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS ProductCount FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders that had no discount applied?",
        "output": "SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales this year?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the sales figures for each category of products?",
        "output": "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS Sales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have had no shipping date recorded?",
        "output": "SELECT COUNT(*) FROM orders o WHERE o.ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average order fulfillment time for orders shipped in April 2023.",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageFulfillmentTime FROM orders WHERE MONTH(orders.ShippedDate) = 4 AND YEAR(orders.ShippedDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of orders that received a discount above 10%?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalValue FROM [Order Details] WHERE Discount > 0.1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after their required date?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest quantity on order?",
        "output": "SELECT ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee processed the most orders in a given year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURDATE()) GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees whose average order quantity is higher than a given threshold.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING AVG(od.Quantity) > GivenThreshold;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of on-time deliveries each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales quantity for each product?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List orders that were shipped more than a week after the order date.",
        "output": "SELECT OrderID FROM orders WHERE DATEDIFF(day, OrderDate, ShippedDate) > 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost of orders shipped via method 2?",
        "output": "SELECT SUM(o.Freight) FROM orders o WHERE o.ShipVia = 2;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the correlation between employee hire date and sales performance.",
        "output": "SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly on-time delivery rate for Q2 2023.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN 1 END) / COUNT(o.OrderID) * 100) AS OnTimeRate FROM orders o WHERE o.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products are there?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the median delivery time for all orders?",
        "output": "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) OVER () AS MedianDeliveryTime FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity ordered for each category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS TotalQuantityOrdered FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders that have been shipped?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average freight cost by country.",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the average freight cost for orders shipped to each country.",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed with a discount greater than 10%?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0.10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products need reordering based on their reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 cities with the highest sales revenue.",
        "output": "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 3 suppliers by the number of products supplied.",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the longest tenure and their total sales.",
        "output": "SELECT e.EmployeeID, DATEDIFF(CURDATE(), e.HireDate) AS Tenure, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY Tenure DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average discount applied per product category.",
        "output": "SELECT CategoryID, AVG(Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the age distribution of employees in the company?",
        "output": "SELECT TIMESTAMPDIFF(YEAR, BirthDate, CURDATE()) AS Age, COUNT(EmployeeID) AS NumberOfEmployees FROM employees GROUP BY Age",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 3 customers with the highest order fulfillment time and their respective countries.",
        "output": "SELECT customers.CustomerID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time, customers.Country FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, customers.Country ORDER BY avg_fulfillment_time DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value by customer?",
        "output": "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly sales trend for the top three products based on sales volume?",
        "output": "SELECT product_subquery.ProductID, product_subquery.OrderMonth, SUM(product_subquery.Quantity) AS sales_volume FROM (SELECT products.ProductID, [Order Details].Quantity, MONTH(orders.OrderDate) AS OrderMonth FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID) AS product_subquery GROUP BY product_subquery.ProductID, product_subquery.OrderMonth ORDER BY sales_volume DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions generated the highest average order value this year?",
        "output": "SELECT ShipRegion, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN `Order Details` ON orders.OrderID = `Order Details`.OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ShipRegion ORDER BY AverageOrderValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the difference in stock levels for each product compared to total ordered units?",
        "output": "SELECT ProductName, (UnitsInStock - UnitsOnOrder) AS StockDifference FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify all orders placed before a specific date that are not yet shipped.",
        "output": "SELECT orders.OrderID FROM orders WHERE OrderDate < '2022-01-01' AND ShippedDate IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units are on order for each category of products?",
        "output": "SELECT CategoryID, SUM(UnitsOnOrder) FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 products by sales revenue.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given for each product?",
        "output": "SELECT od.ProductID, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the product with the highest sales quantity.",
        "output": "SELECT TOP 1 p.ProductName, SUM(od.Quantity) AS TotalSalesQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalSalesQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average number of items per order for each customer.",
        "output": "SELECT CustomerID, AVG(Quantity) AS AvgItemsPerOrder FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is most frequently used?",
        "output": "SELECT ShipVia, COUNT(*) AS Count FROM orders GROUP BY ShipVia ORDER BY Count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the order history for a specific customer?",
        "output": "SELECT * FROM orders WHERE CustomerID = 'specific_customer_id';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount per order in March 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) / COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not processed any orders this month?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID AND MONTH(OrderDate) = MONTH(CURDATE()) AND YEAR(OrderDate) = YEAR(CURDATE()) WHERE orders.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many suppliers are based in the USA?",
        "output": "SELECT COUNT(SupplierID) FROM suppliers WHERE Country = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late to 'Canada' in the second quarter of 2023?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND ShipCountry = 'Canada' AND OrderDate BETWEEN '2023-04-01' AND '2023-06-30';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average discount applied to orders by each supplier.",
        "output": "SELECT p.SupplierID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average freight cost per sales territory?",
        "output": "SELECT o.ShipRegion, AVG(o.Freight) AS AvgFreight FROM orders o GROUP BY o.ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List products with a reorder level below their units in stock.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock > ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the region with the highest sales revenue.",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify discrepancies between required and shipped dates in orders and investigate the role of suppliers in delays.",
        "output": "SELECT orders.OrderID, DATEDIFF(orders.ShippedDate, orders.RequiredDate) AS DelayDays, suppliers.CompanyName FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE DATEDIFF(orders.ShipDate, orders.RequiredDate) > 0",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the difference in sales between employees in different regions?",
        "output": "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID LEFT JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest on-time delivery rate?",
        "output": "SELECT ShipCountry, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) / COUNT(OrderID) * 100 AS OnTimeRate FROM orders GROUP BY ShipCountry ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the orders that were shipped after the required date.",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied per order?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered with a discount?",
        "output": "SELECT DISTINCT products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from each product?",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee had the largest average order size in terms of quantity?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Quantity) AS AvgOrderSize FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgOrderSize DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total discount applied to each order.",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the current stock levels for each product?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers who have never placed an order.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of each product ordered by different customers?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How do order volumes differ by day of the week?",
        "output": "SELECT DAYOFWEEK(OrderDate) AS DayOfWeek, COUNT(OrderID) AS OrderVolume FROM orders GROUP BY DayOfWeek ORDER BY OrderVolume DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the highest sales last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees whose sales grew by more than 10% over the last year.",
        "output": "SELECT e.EmployeeID FROM (SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, LAG(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) OVER (PARTITION BY e.EmployeeID ORDER BY o.OrderDate) AS PreviousSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.OrderDate) AS sales WHERE (TotalSales - PreviousSales) / PreviousSales > 0.1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the sales growth by employee for each month compared to the previous month?",
        "output": "SELECT employees.EmployeeID, MONTH(orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID, MONTH(orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top three categories with the highest sales?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Retrieve the total sales for orders with discounts applied.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od WHERE od.Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for orders in the first half of 2022?",
        "output": "SELECT (COUNT(*) FILTER (WHERE o.ShippedDate <= o.RequiredDate) * 1.0 / COUNT(*)) FROM orders o WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-06-30';",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find out which employees have the highest average order value.",
        "output": "SELECT orders.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.EmployeeID ORDER BY AvgOrderValue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify orders where the shipped date is later than the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest discount applied on average?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much freight cost is incurred per employee's orders?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total units sold for each product.",
        "output": "SELECT ProductID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly product performance?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS Performance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity ordered per unit for each product?",
        "output": "SELECT ProductID, AVG(Quantity) AS AvgQuantityPerUnit FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the highest average freight cost?",
        "output": "SELECT ShipRegion, AVG(Freight) FROM orders GROUP BY ShipRegion ORDER BY AVG(Freight) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total revenue generated by each supplier's products.",
        "output": "SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average price of products within each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product categories are most frequently ordered?",
        "output": "SELECT products.CategoryID, COUNT(*) AS OrderFrequency FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID ORDER BY OrderFrequency DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of overdue shipments?",
        "output": "SELECT employees.EmployeeID, COUNT(*) AS OverdueShipments FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE ShippedDate IS NOT NULL AND ShippedDate > RequiredDate GROUP BY employees.EmployeeID ORDER BY OverdueShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped after the required date?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate total freight costs for all orders shipped to Germany.",
        "output": "SELECT SUM(Freight) AS Total_Freight FROM orders WHERE ShipCountry = 'Germany';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products have the highest total sales revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average inventory turnover ratio for each month.",
        "output": "SELECT DATEPART(month, OrderDate) AS Month, SUM(Quantity * UnitPrice) / AVG(p.UnitsInStock) AS AvgTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY DATEPART(month, OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers made a purchase each month?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in December 2022?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-12-01' AND '2022-12-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly product performance for the past year.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many different products have been ordered by each customer?",
        "output": "SELECT customers.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS ProductCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List products with units on order exceeding the reorder level.",
        "output": "SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average number of days between order and shipping date.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with stock below their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the difference in total sales between the top two employees?",
        "output": "SELECT A.EmployeeID, (A.TotalSales - B.TotalSales) AS SalesDifference FROM (SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY TotalSales DESC LIMIT 2) AS A CROSS JOIN (SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY TotalSales DESC LIMIT 1 OFFSET 1) AS B;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Lifetime Value for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CLV FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify products with declining sales performance over the past year.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS sales_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.ProductID HAVING SUM([Order Details].Quantity) < (SELECT SUM(od.Quantity) FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.ProductID = products.ProductID AND YEAR(o.OrderDate) = YEAR(CURDATE()) - 2)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders have a discount greater than 10%?",
        "output": "SELECT DISTINCT OrderID FROM [Order Details] WHERE Discount > 0.10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many days on average does it take to ship orders completed by each employee?",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE ShippedDate IS NOT NULL GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were delivered on time each month?",
        "output": "SELECT DATE_FORMAT(o.ShippedDate, '%Y-%m') AS Month, COUNT(CASE WHEN o.ShippedDate <= o.RequiredDate THEN o.OrderID END) / COUNT(o.OrderID) * 100 AS OnTimeDeliveryRate FROM orders o GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on all products sold in the last year?",
        "output": "SELECT AVG(Discount) FROM [Order Details] WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the supplier with the longest average delivery time.",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgDeliveryTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID ORDER BY AvgDeliveryTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are currently out of stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the difference in average freight cost between shipped and non-shipped orders?",
        "output": "SELECT AVG(CASE WHEN ShippedDate IS NOT NULL THEN Freight END) AS AvgFreightShipped, AVG(CASE WHEN ShippedDate IS NULL THEN Freight END) AS AvgFreightNotShipped FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for each employee?",
        "output": "SELECT EmployeeID, AVG(Freight) AS AvgFreight FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products by supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most common shipping country.",
        "output": "SELECT ShipCountry, COUNT(ShipCountry) AS CountryCount FROM orders GROUP BY ShipCountry ORDER BY CountryCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the relationship between the reorder level and product sales performance?",
        "output": "SELECT p.ProductID, AVG(od.Quantity) AS AvgSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the fastest delivery time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_delivery_time FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY avg_delivery_time",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the product with the highest average discount applied.",
        "output": "SELECT [Order Details].ProductID, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which countries have the most orders shipped after the required date?",
        "output": "SELECT ShipCountry, COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipCountry ORDER BY COUNT(OrderID) DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost by country?",
        "output": "SELECT ShipCountry, AVG(Freight) FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for orders handled by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(Freight) AS AverageFreight FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate for customers over the last year?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() THEN orders.CustomerID END) / NULLIF(COUNT(DISTINCT CASE WHEN orders.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) THEN orders.CustomerID END), 0)) * 100 AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the sales revenue for each supplier?",
        "output": "SELECT suppliers.SupplierName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SalesRevenue FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN suppliers ON p.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top performing products based on sales.",
        "output": "SELECT ProductID, SUM(Quantity) AS SalesVolume FROM [Order Details] GROUP BY ProductID ORDER BY SalesVolume DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify suppliers with the most products in the inventory.",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 products by revenue.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductRevenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductRevenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average inventory level per product?",
        "output": "SELECT AVG(UnitsInStock) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the product with the highest inventory turnover ratio this month.",
        "output": "Corrected SQL: SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH('order_date' column) = MONTH(CURRENT_TIMESTAMP) GROUP BY products.ProductID ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which day of the week had the most orders placed in March 2023?",
        "output": "SELECT DAYOFWEEK(o.OrderDate) AS Day, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023 GROUP BY Day ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for each country in the last quarter?",
        "output": "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE() - INTERVAL 1 QUARTER) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE() - INTERVAL 1 QUARTER) GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders have the highest total discount value?",
        "output": "SELECT OrderID, SUM(Discount * Quantity * UnitPrice) AS TotalDiscountValue FROM [Order Details] GROUP BY OrderID ORDER BY TotalDiscountValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders were shipped via each method?",
        "output": "SELECT ShipVia, (COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders)) AS Percentage FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top five cities with the highest number of orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between order date and shipped date for each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDays FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders are still pending for each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS PendingOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE ShippedDate IS NULL GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have processed more than 100 orders this year.",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID HAVING COUNT(orders.OrderID) > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the difference in average order fulfillment time between 'ShipVia' 1 and 2?",
        "output": "SELECT ABS(AVG(CASE WHEN ShipVia = 1 THEN DATEDIFF(ShippedDate, OrderDate) END) - AVG(CASE WHEN ShipVia = 2 THEN DATEDIFF(ShippedDate, OrderDate) END)) AS AvgFulfillmentDifference FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the highest freight cost recorded this year?",
        "output": "SELECT MAX(Freight) FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products with the highest total sales revenue.",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers whose products have been discontinued.",
        "output": "SELECT SupplierID, CompanyName FROM suppliers WHERE SupplierID IN (SELECT SupplierID FROM products WHERE Discontinued = 1);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top 5 orders with the highest freight cost.",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for each shipping method used?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does employee age correlate with sales performance?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, YEAR(CURDATE()) - YEAR(employees.BirthDate) AS age, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products have been ordered more than 100 times and what are their respective supplier names?",
        "output": "SELECT products.ProductName, suppliers.CompanyName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY products.ProductName, suppliers.CompanyName HAVING SUM([Order Details].Quantity) > 100",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the highest number of different products?",
        "output": "SELECT suppliers.SupplierID, COUNT(DISTINCT products.ProductID) AS Number_of_Products FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY Number_of_Products DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total units in stock for each product category?",
        "output": "SELECT products.CategoryID, SUM(products.UnitsInStock) AS Total_Units_In_Stock FROM products GROUP BY products.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers placed orders that were not shipped on the required date?",
        "output": "SELECT o.OrderID, c.CustomerID FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.RequiredDate < o.ShippedDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the total quantity of each product sold.",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to order details?",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered in all months of the year?",
        "output": "SELECT ProductID FROM (SELECT ProductID, COUNT(DISTINCT MONTH(OrderDate)) AS MonthsOrdered FROM [Order Details] GROUP BY ProductID) AS OrderCount WHERE MonthsOrdered = 12;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average reorder level for all products?",
        "output": "SELECT AVG(ReorderLevel) AS AvgReorderLevel FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the on-time delivery rate for orders shipped via method 2 in April 2023.",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate AND ShipVia = 2 THEN 1 END) * 100.0 / COUNT(OrderID)) FROM orders WHERE OrderDate BETWEEN '2023-04-01' AND '2023-04-30';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated by each product category.",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total units ordered in the last year?",
        "output": "SELECT SUM(Quantity) FROM [Order Details] WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many unique products have been sold in the past month?",
        "output": "SELECT COUNT(DISTINCT p.ProductID) FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the relationship between product reorder level and units on order?",
        "output": "SELECT p.ProductID, p.ReorderLevel, p.UnitsOnOrder FROM products p;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average discount applied to orders.",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which title has the highest average sales per employee?",
        "output": "SELECT employees.Title, AVG(Sales) AS AvgSales FROM (SELECT employees.Title, employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Sales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID) AS employee_sales GROUP BY employees.Title ORDER BY AvgSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees joined the company in the last year?",
        "output": "SELECT COUNT(*) AS NewHires FROM employees WHERE HireDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given on each product?",
        "output": "SELECT ProductID, AVG(Discount) as AvgDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total value of products on order above the reorder level.",
        "output": "SELECT ProductID, SUM(UnitsOnOrder * UnitPrice) FROM products WHERE UnitsOnOrder > ReorderLevel GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for the last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were delivered on time by each shipping company in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS on_time_orders FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.OrderDate) = 2023 AND orders.ShippedDate <= orders.RequiredDate GROUP BY shippers.CompanyName",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average order value for each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have never been ordered?",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped within the same region as the shipping company?",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders WHERE ShipRegion = ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given to each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for each product this month?",
        "output": "SELECT p.ProductID, SUM(o.Quantity * o.UnitPrice * (1 - o.Discount)) / NULLIF(AVG(p.UnitsInStock), 0) AS InventoryTurnover FROM products p JOIN [Order Details] o ON p.ProductID = o.ProductID WHERE MONTH(o.OrderDate) = MONTH(CURDATE()) GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average number of orders processed per month by employees?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT CONCAT(YEAR(OrderDate), '-', MONTH(OrderDate))) / (DATEDIFF(CURRENT_DATE, MIN(orders.OrderDate)) / 30) AS AvgOrdersPerMonth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been discounted?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE Discount > 0);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of shipping costs for orders over the last six months?",
        "output": "SELECT Freight FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which orders contained only discounted products?",
        "output": "SELECT OrderID FROM [Order Details] GROUP BY OrderID HAVING SUM(CASE WHEN Discount = 0 THEN 1 ELSE 0 END) = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been placed by employees in each country?",
        "output": "SELECT employees.Country, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories contribute most to the total revenue?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY Revenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders include a discount?",
        "output": "SELECT (COUNT(*) FILTER (WHERE Discount > 0) / NULLIF(COUNT(*), 0)) * 100 AS DiscountPercentage FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the percentage of orders shipped on time this year.",
        "output": "SELECT COUNT(o.OrderID) * 1.0 / (SELECT COUNT(OrderID) FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE)) * 100 AS OnTimeDeliveryRate FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average hiring age of employees who are top performers?",
        "output": "SELECT AVG(YEAR(employees.HireDate) - YEAR(employees.BirthDate)) AS AvgHiringAge FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest discount applied to them?",
        "output": "SELECT ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID ORDER BY od.Discount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 shipping cities by order count in 2023.",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find orders where the required date is within the next seven days and the status is not shipped yet.",
        "output": "SELECT * FROM orders WHERE RequiredDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) AND ShippedDate IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average sales revenue per order by city?",
        "output": "SELECT ShipCity, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) / COUNT(DISTINCT O.OrderID) AS AvgSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID GROUP BY ShipCity;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(orders.OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for the last month?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE MONTH(ShippedDate) = MONTH(CURDATE()) AND YEAR(ShippedDate) = YEAR(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer has placed the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly inventory turnover ratio for each product.",
        "output": "SELECT ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS MonthlyInventoryTurnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID, MONTH('order_date' column);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What percent of the total products have a reorder level set?",
        "output": "SELECT (COUNT(ReorderLevel) / COUNT(*)) * 100.0 AS PercentReorderSet FROM products WHERE ReorderLevel IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have made orders in the past month?",
        "output": "SELECT CustomerID FROM orders WHERE OrderDate >= DATEADD(month, -1, CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products for each supplier?",
        "output": "SELECT p.SupplierID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed each month by customers from 'USA'?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS NumOrders FROM orders WHERE ShipCountry = 'USA' GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total value of inventory for each supplier.",
        "output": "SELECT SupplierID, SUM(UnitsInStock * UnitPrice) AS InventoryValue FROM products GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered more than their units in stock?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Quantity > p.UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total units sold for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers have placed the largest orders by value?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY OrderValue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "In which month of 2023 was the highest sales revenue recorded?",
        "output": "SELECT MONTH(o.OrderDate), SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY MONTH(o.OrderDate) ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the employees managing orders in a specific country?",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShipCountry = 'SpecificCountry' GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who have not completed any orders this year.",
        "output": "SELECT employees.EmployeeID FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(OrderDate) = YEAR(CURDATE()) AND orders.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Compare the number of orders received by month in 2022.",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE EXTRACT(year FROM OrderDate) = 2022 GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the total sales by shipping country.",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the most common job title among contacts.",
        "output": "SELECT ContactTitle, COUNT(*) AS TitleCount FROM customers GROUP BY ContactTitle ORDER BY TitleCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee for the current year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Who are the top ten customers based on the total revenue?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 cities with the highest on-time delivery rates.",
        "output": "SELECT ShipCity, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY ShipCity ORDER BY OnTimeDeliveryRate DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders had a total value over $500 in March 2023?",
        "output": "SELECT COUNT(DISTINCT o.OrderID) FROM orders o JOIN (SELECT OrderID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalValue FROM [Order Details] GROUP BY OrderID HAVING TotalValue > 500) AS od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the customer retention rate for the first quarter of 2023 and compare it to the previous year.",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate_2023",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which country do most suppliers come from?",
        "output": "SELECT Country, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories have the highest average order value this quarter?",
        "output": "SELECT categories.CategoryName, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY categories.CategoryName ORDER BY avg_order_value DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compare the sales growth of employees over the past five years.",
        "output": "SELECT EmployeeID, EXTRACT(YEAR FROM OrderDate) AS Year, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 5 YEAR) GROUP BY EmployeeID, Year ORDER BY EmployeeID, Year",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products grouped by category with total sales quantity.",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity) FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify categories with products having low stock levels.",
        "output": "SELECT DISTINCT CategoryID FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the variance in delivery lead time for each supplier.",
        "output": "SELECT p.SupplierID, VARIANCE(DATEDIFF(o.ShippedDate, o.OrderDate)) AS LeadTimeVariance FROM products p JOIN orders o ON p.ProductID = o.ProductID GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the overall product performance for each supplier?",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity) AS Performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for each product category for the last month?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) as InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer retention rate for a specific month.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31' THEN orders.CustomerID END) / COUNT(DISTINCT orders.CustomerID)) * 100 AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many regions received more than 10 orders last month?",
        "output": "SELECT ShipRegion, COUNT(*) AS OrderCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m') GROUP BY ShipRegion HAVING OrderCount > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many different products did each customer order this month?",
        "output": "SELECT o.CustomerID, COUNT(DISTINCT od.ProductID) AS ProductCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which territories have the highest customer retention rate?",
        "output": "SELECT territories.TerritoryDescription, (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'))::float / NULLIF(COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate < '2023-01-01'), 0) AS retention_rate FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN employeeTerritories ON customers.CustomerID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List orders placed by customers in the 'USA' along with their total price.",
        "output": "SELECT orders.OrderID, orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalPrice FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE ShipCountry = 'USA' GROUP BY orders.OrderID, orders.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most ordered product in terms of quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders include discontinued products?",
        "output": "SELECT COUNT(DISTINCT CASE WHEN products.Discontinued = 1 THEN [Order Details].OrderID END) / COUNT(DISTINCT orders.OrderID) AS discontinued_percentage FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How much freight was incurred for orders shipped last month?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE MONTH(OrderDate) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURDATE() - INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many distinct customers placed orders last month?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the sales revenue for orders shipped to 'USA' in 2023.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipCountry = 'USA' AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top 5 products with the highest sales volume.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales in the month of January?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 AND MONTH(o.OrderDate) = 1 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the correlation between shipping method and average order fulfillment time.",
        "output": "SELECT o.ShipVia, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o GROUP BY o.ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier is located in the most countries?",
        "output": "SELECT SupplierID, COUNT(DISTINCT Country) AS CountryCount FROM suppliers GROUP BY SupplierID ORDER BY CountryCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products were discontinued by each supplier?",
        "output": "SELECT SupplierID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top 5 employees with the highest average sales value.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the average unit price for products in each category.",
        "output": "SELECT CategoryID, AVG(UnitPrice) FROM products GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were shipped late, past the required date?",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employees processed the most orders in the first quarter of the year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE QUARTER(OrderDate) = 1 AND YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the number of employees reporting to each manager.",
        "output": "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS Reportees FROM employees e WHERE e.ReportsTo IS NOT NULL GROUP BY e.ReportsTo",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average age of employees grouped by title?",
        "output": "SELECT Title, AVG(TIMESTAMPDIFF(YEAR, BirthDate, NOW())) AS AvgAge FROM employees GROUP BY Title;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied across all orders?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total quantity of each product sold in the last quarter.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have an average lead time greater than 10 days?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Average_Lead_Time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID HAVING Average_Lead_Time > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for each product in the last month?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY p.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate monthly product performance.",
        "output": "SELECT ProductID, MONTH(od.OrderDate) AS Month, SUM(od.Quantity) AS Performance FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, MONTH(od.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of products per order?",
        "output": "SELECT AVG(Quantity) FROM (SELECT OrderID, SUM(Quantity) AS Quantity FROM [Order Details] GROUP BY OrderID) AS OrderQuantities;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top three employees with the highest sales in the last quarter.",
        "output": "SELECT EmployeeID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY EmployeeID ORDER BY TotalSales DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the most units on order.",
        "output": "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID ORDER BY p.UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much freight cost is associated with each employee's orders?",
        "output": "SELECT orders.EmployeeID, SUM(Freight) AS TotalFreight FROM orders GROUP BY orders.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to each product?",
        "output": "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average reorder level of all products supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(products.ReorderLevel) AS average_reorder_level FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique shipping companies are used in the orders?",
        "output": "SELECT COUNT(DISTINCT ShipVia) AS UniqueShippingCompanies FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 regions with the highest total order count.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has processed the most orders in 2022?",
        "output": "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM orders WHERE YEAR(orders.OrderDate) = 2022 GROUP BY orders.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on products across all orders?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country has the highest number of customers?",
        "output": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country ORDER BY NumberOfCustomers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the highest average unit price for their products?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID ORDER BY AvgUnitPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find out the monthly sales trend for each product.",
        "output": "SELECT ProductID, DATEPART(month, OrderDate) AS Month, SUM(Quantity) AS MonthlySales FROM [Order Details] GROUP BY ProductID, DATEPART(month, OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the freight cost vary by employee?",
        "output": "SELECT EmployeeID, AVG(Freight) FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products that need to be reordered due to low stock levels.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many discontinued products are there from each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(*) AS DiscontinuedProducts FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE Discontinued = 1 GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have a salary higher than the average of all employees?",
        "output": "SELECT employees.EmployeeID, employees.Salary FROM employees WHERE employees.Salary > (SELECT AVG(Salary) FROM employees);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customer who made the earliest purchase.",
        "output": "SELECT CustomerID, MIN(OrderDate) AS FirstPurchaseDate FROM orders GROUP BY CustomerID ORDER BY FirstPurchaseDate LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for the last month?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE EXTRACT(MONTH FROM od.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 month');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region receives the highest number of shipments?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers who have never placed an order?",
        "output": "SELECT CustomerID, CompanyName FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a stock level below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Analyze the relationship between the total sales and employee salary across different territories.",
        "output": "SELECT territories.TerritoryDescription, employees.Salary, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription, employees.Salary",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have received the most discounts on their orders?",
        "output": "SELECT CustomerID, SUM(Discount) AS TotalDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY CustomerID ORDER BY TotalDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the sales trends for each product over the last year?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY month, products.ProductName ORDER BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products by revenue?",
        "output": "SELECT products.ProductName, SUM(([Order Details].UnitPrice * [Order Details].Quantity) * (1 - [Order Details].Discount)) AS Revenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY Revenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have a required date but are not yet shipped?",
        "output": "SELECT COUNT(OrderID) AS PendingOrders FROM orders WHERE RequiredDate IS NOT NULL AND ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify areas with the longest order fulfillment times.",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgFulfillmentTime DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total sales for each month, grouping by product.",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS MonthYear, products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON products.ProductID = [Order Details].ProductID GROUP BY MonthYear, products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which region has the highest employee performance in terms of sales?",
        "output": "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most expensive product?",
        "output": "SELECT p.ProductName, p.UnitPrice FROM products p ORDER BY p.UnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average hiring age of employees across different titles?",
        "output": "SELECT employees.Title, AVG(YEAR(HireDate) - YEAR(BirthDate)) AS AvgHiringAge FROM employees GROUP BY employees.Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price for products within each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has processed the highest number of orders?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the month with the highest average order value in 2022.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had a freight cost greater than $100?",
        "output": "SELECT OrderID FROM orders WHERE Freight > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate inventory turnover ratio for products categorized as electronics.",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.CategoryID = (SELECT CategoryID FROM categories WHERE Description = 'electronics') GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have exceeded their sales targets in the previous quarter?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID HAVING total_sales > 500000",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for each shipping company?",
        "output": "SELECT shippers.CompanyName, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest concentration of employees?",
        "output": "SELECT City, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY City ORDER BY EmployeeCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly inventory turnover for the last year.",
        "output": "SELECT MONTH([Order Details].OrderDate) AS Month, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS Turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR([Order Details].OrderDate) = YEAR(CURRENT_DATE()) - 1 GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given on orders per customer?",
        "output": "SELECT c.CustomerID, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which day of the week has the most shipments?",
        "output": "SELECT DAYOFWEEK(ShippedDate) AS WeekDay, COUNT(OrderID) FROM orders GROUP BY WeekDay ORDER BY COUNT(OrderID) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total value of products currently on order by supplier?",
        "output": "SELECT s.CompanyName, SUM(p.UnitsOnOrder * p.UnitPrice) AS TotalValueOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which region has the highest number of employees?",
        "output": "SELECT Region, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Region ORDER BY EmployeeCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to orders of non-discontinued products?",
        "output": "SELECT AVG([Order Details].Discount) FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE products.Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have never handled an order.",
        "output": "SELECT e.* FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the general trend of inventory levels over the past year?",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, SUM(UnitsInStock) AS InventoryLevel FROM products JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired in each year?",
        "output": "SELECT YEAR(HireDate) AS Year, COUNT(EmployeeID) AS Hires FROM employees GROUP BY YEAR(HireDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products by sales quantity?",
        "output": "SELECT TOP 5 p.ProductID, SUM(od.Quantity) AS TotalSalesQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSalesQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Compare the inventory turnover ratios of different categories.",
        "output": "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find out which products are sold the most by each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, od.ProductID, COUNT(od.ProductID) AS ProductCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID ORDER BY ProductCount DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee whose orders have the highest average discount.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING AVG(od.Discount) = (SELECT MAX(AVG(od.Discount)) FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many products were ordered more than 100 times each in March 2023?",
        "output": "SELECT od.ProductID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023 GROUP BY od.ProductID HAVING SUM(od.Quantity) > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees with a salary above the average salary.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE e.Salary > (SELECT AVG(Salary) FROM employees);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average order size (in terms of quantity) for each employee.",
        "output": "SELECT e.EmployeeID, AVG(od.Quantity) AS AvgQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are sold at a discount more than 20% of the time?",
        "output": "SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(CASE WHEN Discount > 0.2 THEN 1 ELSE 0 END) / COUNT(*) > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the suppliers who provide products that have been discontinued.",
        "output": "SELECT SupplierID FROM products WHERE Discontinued = 1 GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products that need to be reordered.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders shipped to the USA?",
        "output": "SELECT AVG(Freight) AS AvgShippingCost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total sales for each product category.",
        "output": "SELECT CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 5 most reliable suppliers by lead time and average order size.",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time, AVG([Order Details].Quantity) AS avg_order_size FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC, avg_order_size DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the proportion of products with reorder levels higher than 50.",
        "output": "SELECT (COUNT(CASE WHEN ReorderLevel > 50 THEN 1 END) / COUNT(*)) * 100 AS HighReorderLevelPercentage FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated in the last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average fulfillment time for orders shipped this month?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE MONTH(o.ShippedDate) = MONTH(CURDATE()) AND YEAR(o.ShippedDate) = YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales for each month in 2023.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for each shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer last month?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrdersCount FROM orders o WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY o.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which regions have the highest number of delayed shipments?",
        "output": "SELECT ShipRegion, COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipRegion ORDER BY COUNT(OrderID) DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value for each month of the current year?",
        "output": "SELECT MONTH(orders.OrderDate) AS Month, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY MONTH(orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the total sales by employees grouped by country?",
        "output": "SELECT e.EmployeeID, e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List products that are currently out of stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total quantity ordered for each supplier.",
        "output": "SELECT suppliers.SupplierName, SUM([Order Details].Quantity) AS TotalQuantity FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company was used the most in the last quarter?",
        "output": "SELECT ShipVia, COUNT(OrderID) FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY ShipVia ORDER BY COUNT(OrderID) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total revenue generated by employees in each country.",
        "output": "SELECT employees.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Country, employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have been discontinued by each supplier?",
        "output": "SELECT s.CompanyName, COUNT(p.ProductID) AS Discontinued_Products FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with the highest margin (unit price minus average discount).",
        "output": "SELECT p.ProductID, (p.UnitPrice - AVG(o.Discount * o.UnitPrice)) AS Margin FROM products p JOIN [Order Details] o ON p.ProductID = o.ProductID GROUP BY p.ProductID ORDER BY Margin DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value per employee?",
        "output": "SELECT orders.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the effect of discounts on total sales by each employee.",
        "output": "SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS DiscountImpact FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees who have processed orders with the highest discounts.",
        "output": "SELECT e.EmployeeID, MAX(od.Discount) AS MaxDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY MaxDiscount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average sales per product in the last year.",
        "output": "SELECT ProductID, AVG([Order Details].Quantity * [Order Details].UnitPrice) AS AvgSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 cities by number of different customers.",
        "output": "SELECT ShipCity, COUNT(DISTINCT CustomerID) AS CustomerCount FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY ShipCity ORDER BY CustomerCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the top 5 products with the highest number of units on order.",
        "output": "SELECT ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with the highest price-to-stock ratio.",
        "output": "SELECT p.ProductID, (p.UnitPrice / NULLIF(p.UnitsInStock, 0)) AS PriceToStockRatio FROM products p ORDER BY PriceToStockRatio DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were not fulfilled on time in March 2023?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate > o.RequiredDate AND MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers with multiple orders in the same month.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount, DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth FROM orders GROUP BY CustomerID, OrderMonth HAVING OrderCount > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify trends in monthly product performance.",
        "output": "SELECT MONTH(o.OrderDate) AS Month, p.ProductID, SUM(od.Quantity) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY Month, p.ProductID ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred by each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) as TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the discount value for each order detail?",
        "output": "SELECT OrderID, ProductID, (UnitPrice * Quantity * Discount) AS DiscountValue FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each category of products?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of orders delivered?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are discontinued?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the top-revenue-generating product in each category?",
        "output": "SELECT categories.CategoryName, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName, products.ProductName ORDER BY total_revenue DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are delivered on or before the required date for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed with a discount greater than 10% this year?",
        "output": "SELECT COUNT(DISTINCT orders.OrderID) AS DiscountedOrders FROM orders JOIN `Order Details` ON orders.OrderID = `Order Details`.OrderID WHERE Discount > 0.1 AND YEAR(orders.OrderDate) = YEAR(CURDATE());",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most diverse range of products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have stock levels below their reorder points?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in January 2022?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find products that need reordering as per their reorder levels.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product ID has the highest sales revenue in March 2023?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023 GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest total sales value?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have a Customer Lifetime Value above a certain threshold?",
        "output": "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 10000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were processed by employees hired in the last two years?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE employees.HireDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on their reorder levels?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were fulfilled on the same day they were placed?",
        "output": "SELECT COUNT(OrderID) AS SameDayFulfillment FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between order date and required date?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AvgDaysRequired FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest number of orders?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total discount given by each employee in their processed orders?",
        "output": "SELECT orders.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category of products generates the most revenue?",
        "output": "SELECT categories.CategoryName, SUM(([Order Details].UnitPrice * [Order Details].Quantity) * (1 - [Order Details].Discount)) AS Revenue FROM categories JOIN products ON categories.CategoryID = products.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryName ORDER BY Revenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were handled by each employee this month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE EXTRACT(MONTH FROM OrderDate) = EXTRACT(MONTH FROM CURDATE()) AND EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURDATE()) GROUP BY EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the month-over-month trend in shipping costs?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the monthly total sales per product category.",
        "output": "SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY c.CategoryName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products require reorder based on current inventory levels?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders over $1000?",
        "output": "SELECT SUM(Freight) FROM orders WHERE Freight > 1000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees are reporting to a manager who has the lowest sales?",
        "output": "SELECT e.EmployeeID FROM employees e WHERE e.ReportsTo = (SELECT ReportsTo FROM employees em JOIN (SELECT ReportsTo, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ManagerSales FROM employees em JOIN orders o ON em.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ReportsTo ORDER BY ManagerSales ASC LIMIT 1) sub);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Rank employees based on their total number of orders processed.",
        "output": "SELECT orders.EmployeeID, COUNT(*) AS TotalOrders FROM orders GROUP BY orders.EmployeeID ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names of all products supplied by each supplier?",
        "output": "SELECT SupplierID, ProductName FROM products ORDER BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average customer lifetime value segmented by country?",
        "output": "SELECT customers.Country, AVG(lifetime_value) AS average_lifetime_value FROM (SELECT customers.CustomerID, customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, customers.Country) sub_query GROUP BY customers.Country",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the slowest average delivery time?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgDeliveryTime FROM products p JOIN orders o ON p.SupplierID = o.SupplierID GROUP BY SupplierID ORDER BY AvgDeliveryTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the correlation between supplier lead time and their product performance?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS lead_time, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales for orders shipped within their required date?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesForOnTimeOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate <= o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 5 products by sales quantity.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSalesQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalSalesQuantity DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique customers placed orders in the last month?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE MONTH(OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the most frequently ordered product.",
        "output": "SELECT ProductID, COUNT(ProductID) AS Order_Count FROM [Order Details] GROUP BY ProductID ORDER BY Order_Count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers located in Germany.",
        "output": "SELECT CompanyName FROM suppliers WHERE Country = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does product inventory turnover differ between the top Suppliers?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY inventory_turnover DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the order fulfillment time for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS FulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product was ordered the most?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total number of unique products sold per employee.",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProductsSold FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify orders that have not yet been shipped.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total value of orders not yet shipped per employee?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS UnshippedOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate IS NULL GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify any customers with repeat purchases of the same product.",
        "output": "SELECT c.CustomerID, od.ProductID, COUNT(*) FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID, od.ProductID HAVING COUNT(*) > 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products shipped in March 2023?",
        "output": "SELECT SUM(od.Quantity) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total order value for each product considering discounts.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS OrderValue FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the Customer Retention Rate for the past year.",
        "output": "SELECT (COUNT(DISTINCT o.CustomerID FILTER (WHERE o.OrderDate BETWEEN DATEADD(year, -1, CURRENT_DATE) AND CURRENT_DATE))::decimal / NULLIF(COUNT(DISTINCT o.CustomerID FILTER (WHERE o.OrderDate < DATEADD(year, -1, CURRENT_DATE))), 0)) AS RetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value processed by employees in each region?",
        "output": "SELECT employees.Region, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Evaluate the average freight cost per order by region, and how it affects profitability.",
        "output": "SELECT r.RegionDescription, AVG(o.Freight) AS AvgFreight, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Profitability FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID JOIN region r ON c.Region = r.RegionID GROUP BY r.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most ordered product by quantity?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalOrdered DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 customers by total sales revenue last quarter.",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER) GROUP BY o.CustomerID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the order fulfillment time for February 2023?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS FulfillmentTime FROM orders o WHERE o.OrderDate BETWEEN '2023-02-01' AND '2023-02-28';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most common shipping method used.",
        "output": "SELECT ShipVia, COUNT(OrderID) AS Count FROM orders GROUP BY ShipVia ORDER BY Count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average order fulfillment time grouped by shipping method for 2023.",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many days on average do orders to 'Germany' exceed the required date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgExceedDays FROM orders WHERE ShipCountry = 'Germany' AND ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum freight cost for a single order in the last year?",
        "output": "SELECT MAX(Freight) FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the relationship between employee sales and salary?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales, employees.Salary FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest number of orders?",
        "output": "SELECT MONTH(OrderDate) AS Month, COUNT(OrderID) FROM orders GROUP BY MONTH(OrderDate) ORDER BY COUNT(OrderID) DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the earliest hire date who is still actively making sales.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.HireDate FROM employees e WHERE EXISTS (SELECT 1 FROM orders o WHERE e.EmployeeID = o.EmployeeID) ORDER BY e.HireDate LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What percentage of total sales does each employee contribute to?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID) * 100 AS SalesPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a higher unit price compared to others in their category?",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitPrice > (SELECT AVG(UnitPrice) FROM products WHERE CategoryID = p.CategoryID);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total sales revenue for each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between order and shipping date for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDaysToShip FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How has the average fulfillment time changed over the past six months?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month ORDER BY Month DESC LIMIT 6;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average unit price of all products supplied by each supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each product category?",
        "output": "SELECT CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity) as TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify top three products contributing to revenue.",
        "output": "SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS Revenue FROM [Order Details] GROUP BY ProductID ORDER BY Revenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for each shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products sold per product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have the longest average order fulfillment time in their territories?",
        "output": "SELECT employees.EmployeeID, territories.TerritoryDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY employees.EmployeeID, territories.TerritoryDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most expensive product supplied by each supplier?",
        "output": "SELECT SupplierID, ProductName, MAX(UnitPrice) FROM products GROUP BY SupplierID HAVING UnitPrice = MAX(UnitPrice);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category of products has the most units on order?",
        "output": "SELECT p.CategoryID, SUM(p.UnitsOnOrder) FROM products p GROUP BY p.CategoryID ORDER BY SUM(p.UnitsOnOrder) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier offers the highest number of different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which cities have the highest number of orders shipped?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on products by each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AvgDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the correlation between freight cost and order value?",
        "output": "SELECT CORR(o.Freight, od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Correlation FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top 3 employees with the highest total freight cost handling.",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY TotalFreight DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the Inventory Turnover Ratio for the past month.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE MONTH([Order Details].OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost for shipped orders by country?",
        "output": "SELECT o.ShipCountry, AVG(o.Freight) AS AvgFreight FROM orders o WHERE o.ShippedDate IS NOT NULL GROUP BY o.ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped on-time in Q1 2023?",
        "output": "SELECT COUNT(o.OrderID) FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.ShippedDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products were ordered by customers in urban areas but not in rural areas, based on the shipping city?",
        "output": "SELECT DISTINCT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShipCity LIKE 'Urban%' AND p.ProductID NOT IN (SELECT p2.ProductID FROM products p2 JOIN [Order Details] od2 ON p2.ProductID = od2.ProductID JOIN orders o2 ON od2.OrderID = o2.OrderID WHERE o2.ShipCity LIKE 'Rural%')",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer placed the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) FROM orders GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What was the average freight cost for orders requiring shipment to 'London' in 2023?",
        "output": "SELECT AVG(Freight) FROM orders WHERE ShipCity = 'London' AND OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the highest total sales revenue.",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Supplier_Total_Sales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY Supplier_Total_Sales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which category has the most products close to the reorder level?",
        "output": "SELECT CategoryID, COUNT(*) AS CloseToReorder FROM products WHERE UnitsInStock <= ReorderLevel GROUP BY CategoryID ORDER BY CloseToReorder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products with the highest inventory turnover ratio.",
        "output": "SELECT p.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID GROUP BY p.ProductName ORDER BY InventoryTurnover DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for January 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have generated the highest sales in their respective regions?",
        "output": "SELECT regions.RegionDescription, employees.LastName, employees.FirstName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN regions ON territories.RegionID = regions.RegionID GROUP BY regions.RegionDescription, employees.EmployeeID ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How often do shipments go to regions without postal codes?",
        "output": "SELECT ShipRegion, COUNT(OrderID) FROM orders WHERE ShipPostalCode IS NULL GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the difference in total sales between two specific months?",
        "output": "SELECT ABS(SUM(case when MONTH(o.OrderDate) = 1 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END) - SUM(case when MONTH(o.OrderDate) = 2 THEN od.UnitPrice * od.Quantity * (1 - od.Discount) ELSE 0 END)) AS Difference FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped on time last month?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names of discontinued products?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 3 least performing products by sales volume?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify which orders contain discontinued products.",
        "output": "SELECT DISTINCT OrderID FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which orders received the highest discount on products?",
        "output": "SELECT OrderID, MAX(Discount) AS MaxDiscount FROM [Order Details] GROUP BY OrderID ORDER BY MaxDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many days does it take to fulfill an order on average?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders last quarter?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER) GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the unit price range for products.",
        "output": "SELECT MIN(UnitPrice) AS MinPrice, MAX(UnitPrice) AS MaxPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the performance of products by calculating their sales quantity and categorize them by region.",
        "output": "SELECT products.ProductID, region.RegionDescription, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY products.ProductID, region.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers who have not placed any orders.",
        "output": "SELECT CustomerID FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders were shipped later than their required date?",
        "output": "SELECT o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue for each product?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How is the average order value distributed across different regions?",
        "output": "SELECT regions.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region AS regions ON customers.Region = regions.RegionID GROUP BY regions.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all the products supplied by a particular supplier, including their stock levels.",
        "output": "SELECT p.ProductName, p.UnitsInStock FROM products p WHERE p.SupplierID = ?;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product had the highest sales quantity last month?",
        "output": "SELECT p.ProductName FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID JOIN orders o ON [Order Details].OrderID = o.OrderID WHERE o.OrderDate >= '2023-09-01' AND o.OrderDate < '2023-10-01' GROUP BY p.ProductName ORDER BY SUM([Order Details].Quantity) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped within the same month they were placed?",
        "output": "SELECT COUNT(OrderID) AS SameMonthOrders FROM orders WHERE MONTH(OrderDate) = MONTH(ShippedDate) AND YEAR(OrderDate) = YEAR(ShippedDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 best-selling products?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much discount in total has been applied by each employee?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products within each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that have never been ordered.",
        "output": "SELECT ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest number of delayed shipments?",
        "output": "SELECT DATE_FORMAT(ShippedDate, '%Y-%m') AS Month, COUNT(OrderID) AS DelayedShipments FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month ORDER BY DelayedShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the variance in shipping costs among different shipping companies?",
        "output": "SELECT shippers.CompanyName, STDDEV(orders.Freight) AS shipping_cost_variance FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the total revenue generated in the current fiscal year.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the highest on-time delivery rate?",
        "output": "SELECT ShipVia, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the on-time delivery rate change with the order quantity?",
        "output": "SELECT [Order Details].Quantity, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_rate FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY [Order Details].Quantity",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the on-time delivery rate differ between various suppliers?",
        "output": "SELECT suppliers.CompanyName, AVG(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) AS on_time_rate FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which category of products has the lowest average unit price?",
        "output": "SELECT p.CategoryID, AVG(p.UnitPrice) AS Average_Unit_Price FROM products p GROUP BY p.CategoryID ORDER BY Average_Unit_Price ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have not been shipped yet?",
        "output": "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the correlation between freight cost and order fulfillment time.",
        "output": "SELECT CORR(Freight, DATEDIFF(ShippedDate, OrderDate)) AS Correlation FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units are on order for each product?",
        "output": "SELECT ProductID, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which cities have the highest number of suppliers?",
        "output": "SELECT City, COUNT(SupplierID) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has the highest total sales?",
        "output": "SELECT Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID GROUP BY Region ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the orders with the highest freight cost in each country.",
        "output": "SELECT ShipCountry, OrderID, Freight FROM orders WHERE (ShipCountry, Freight) IN (SELECT ShipCountry, MAX(Freight) FROM orders GROUP BY ShipCountry);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders shipped to France?",
        "output": "SELECT AVG(Freight) AS AvgShippingCostToFrance FROM orders WHERE ShipCountry = 'France';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are most frequently ordered from?",
        "output": "SELECT p.SupplierID, COUNT(DISTINCT o.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping company?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Rank the products based on the total number of units ordered.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnits FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY TotalUnits DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly total sales and average order value for each shipping country?",
        "output": "SELECT orders.ShipCountry, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCountry, month",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How long does it take on average before orders are shipped post order date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders shipped per month?",
        "output": "SELECT MONTH(OrderDate) AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees in a particular region with their total sales ranking.",
        "output": "SELECT e.EmployeeID, e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.Region = 'SpecificRegion' GROUP BY e.EmployeeID, e.Region ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products with orders that received a discount.",
        "output": "SELECT DISTINCT p.ProductName FROM [Order Details] JOIN products p ON [Order Details].ProductID = p.ProductID WHERE [Order Details].Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales in the last month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the longest time taken to fulfill an order in 2023?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 3 regions with the highest total sales in the last year and outline the employee distribution.",
        "output": "SELECT r.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region r ON customers.Region = r.RegionID WHERE YEAR(orders.OrderDate) = (YEAR(CURDATE()) - 1) GROUP BY r.RegionDescription ORDER BY total_sales DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total discount given by each employee.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify orders with a freight cost higher than the average.",
        "output": "SELECT OrderID FROM orders WHERE Freight > (SELECT AVG(Freight) FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest number of units on order?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = (SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per country?",
        "output": "SELECT ShipCountry, SUM(Freight) FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 3 cities with the highest number of suppliers?",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find out the top 3 categories contributing to the highest revenue.",
        "output": "SELECT CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity) as TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the average discount applied by an employee compare across different regions?",
        "output": "SELECT Region, EmployeeID, AVG(Discount) AS AvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region, EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the correlation between hire date and sales performance?",
        "output": "SELECT EmployeeID, Correlation FROM (SELECT EmployeeID, CORR(TIMESTAMPDIFF(DAY, HireDate, CURDATE()), UnitPrice * Quantity * (1 - Discount)) AS Correlation FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID) AS CorrelationTable ORDER BY Correlation DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each month this year?",
        "output": "SELECT MONTH(OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY MONTH(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the highest number of different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the products that are currently discontinued.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate of customers between two dates?",
        "output": "SELECT (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31')) / NULLIF((COUNT(DISTINCT orders.CustomerID) FILTER (WHERE orders.OrderDate < '2022-01-01')),0) * 100 AS RetentionRate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed in each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated per customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders that were shipped late.",
        "output": "SELECT OrderID, OrderDate, RequiredDate, ShippedDate FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the percentage increase or decrease in units ordered compared to last month?",
        "output": "SELECT (SUM(CASE WHEN OrderDate BETWEEN '2023-08-01' AND '2023-08-31' THEN Quantity ELSE 0 END) - SUM(CASE WHEN OrderDate BETWEEN '2023-07-01' AND '2023-07-31' THEN Quantity ELSE 0 END)) * 100.0 / NULLIF(SUM(CASE WHEN OrderDate BETWEEN '2023-07-01' AND '2023-07-31' THEN Quantity ELSE 0 END), 0) AS PercentageChange FROM [Order Details];",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has received the most shipments?",
        "output": "SELECT ShipCity, COUNT(*) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the on-time delivery rate compare across different regions?",
        "output": "SELECT ShipRegion, 100.0 * COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine which category generated the most revenue last year.",
        "output": "SELECT CategoryID, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(GETDATE()) - 1 GROUP BY CategoryID ORDER BY Revenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders were delayed beyond their required date?",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed but not yet shipped?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products have we?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated last month.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the average freight cost compare between two specific shipping methods?",
        "output": "SELECT AVG(Freight) AS AvgCostForMethod1 FROM orders WHERE ShipVia = 1; SELECT AVG(Freight) AS AvgCostForMethod2 FROM orders WHERE ShipVia = 2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify orders where the freight cost was higher than the order value.",
        "output": "SELECT OrderID, Freight FROM orders WHERE Freight > (SELECT SUM(UnitPrice * Quantity * (1 - Discount)) FROM `Order Details` WHERE OrderID = orders.OrderID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum freight cost paid for any single order?",
        "output": "SELECT MAX(Freight) AS MaxFreightCost FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the total sales compare across different territories?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct products were sold in Q1 2023?",
        "output": "SELECT COUNT(DISTINCT od.ProductID) FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average number of days between the order date and the required date for delayed shipments?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageDelay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the rate of increase in total sales compared to the previous quarter?",
        "output": "WITH previous_quarter AS (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(DATE_SUB(CURDATE(), INTERVAL ((MONTH(CURDATE())-1) % 3 + 1) MONTH), INTERVAL 3 MONTH) AND DATE_SUB(DATE_SUB(CURDATE(), INTERVAL (MONTH(CURDATE())-1) % 3 MONTH), INTERVAL 1 DAY)), current_quarter AS (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATE_SUB(DATE_SUB(CURDATE(), INTERVAL ((MONTH(CURDATE())-1) % 3 + 1) MONTH), INTERVAL 0 MONTH) AND DATE_SUB(CURDATE(), INTERVAL (MONTH(CURDATE())-1) % 3 DAY)) SELECT ((current_quarter.TotalSales - previous_quarter.TotalSales) / previous_quarter.TotalSales) * 100 AS SalesGrowthRate FROM current_quarter, previous_quarter;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly inventory turnover ratio for each category?",
        "output": "SELECT categories.CategoryName, MONTH(orders.OrderDate) AS month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY categories.CategoryName, month",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for orders shipped via different shipping companies?",
        "output": "SELECT shippers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the most suppliers located?",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the longest tenure in the company.",
        "output": "SELECT *, DATEDIFF(NOW(), HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales quantities for each product in the last quarter?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier in delivering their products?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS Average_Lead_Time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered for each product?",
        "output": "SELECT p.ProductID, SUM(o.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] o ON p.ProductID = o.ProductID GROUP BY p.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest unit price, and how many units are in stock for it?",
        "output": "SELECT ProductName, UnitPrice, UnitsInStock FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have sold more than 500 units in total?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS Total_Quantity FROM [Order Details] od GROUP BY od.ProductID HAVING Total_Quantity > 500;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in March 2023?",
        "output": "SELECT orders.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM orders WHERE MONTH(orders.OrderDate) = 3 AND YEAR(orders.OrderDate) = 2023 GROUP BY orders.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products with the highest discrepancy between units in stock and units on order.",
        "output": "SELECT ProductID, (UnitsInStock - UnitsOnOrder) AS Discrepancy FROM products WHERE (UnitsInStock - UnitsOnOrder) = (SELECT MAX(UnitsInStock - UnitsOnOrder) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the relationship between employee hire dates and their sales performance over the years.",
        "output": "SELECT EMP.EmployeeID, EMP.FirstName, EMP.LastName, YEAR(EMP.HireDate) AS HireYear, SUM(DTD.UnitPrice * DTD.Quantity * (1 - DTD.Discount)) AS TotalSales FROM employees EMP JOIN orders ORD ON EMP.EmployeeID = ORD.EmployeeID JOIN [Order Details] DTD ON ORD.OrderID = DTD.OrderID GROUP BY EMP.EmployeeID, HireYear ORDER BY HireYear",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were delayed beyond the required date?",
        "output": "SELECT COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products with more units on order than in stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest revenue last month?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders and average freight cost grouped by shipping region?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS TotalOrders, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee made the highest sales in the last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the product with the highest price-to-quantity ratio.",
        "output": "SELECT ProductID, ProductName, UnitPrice/NULLIF(UnitsInStock, 0) AS PriceToQuantity FROM products ORDER BY PriceToQuantity DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated from each product.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does employee salary correlate with their sales performance over the past year?",
        "output": "SELECT employees.EmployeeID, employees.Salary, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY employees.EmployeeID ORDER BY employees.Salary DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Can we identify any trends in the volume of orders over the past year?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 3 cities by total sales?",
        "output": "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date last month?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN OrderID END) / COUNT(OrderID) * 100 AS OnTimeRate FROM orders WHERE MONTH(ShippedDate) = MONTH(CURDATE()) AND YEAR(ShippedDate) = YEAR(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total revenue from order details.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products with stock below the reorder level?",
        "output": "SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the largest quantity on order compared to stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 countries by total sales revenue, and how do they differ in average order value?",
        "output": "SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.Country ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct products are ordered per month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT od.ProductID) AS DistinctProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the most orders shipped to a single country.",
        "output": "SELECT EmployeeID, ShipCountry, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY EmployeeID, ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for March 2023?",
        "output": "SELECT AVG(Freight) FROM orders WHERE OrderDate BETWEEN '2023-03-01' AND '2023-03-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for delayed shipments?",
        "output": "SELECT SUM(o.Freight) AS TotalFreight FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average number of units in stock for each category?",
        "output": "SELECT CategoryID, AVG(UnitsInStock) FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of units on order for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitPrice * UnitsOnOrder) AS TotalValueOnOrder FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 suppliers based on the quantity of products supplied.",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales revenue?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given on all products?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products with a discount greater than 5%.",
        "output": "SELECT DISTINCT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.05;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on or before the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month with the highest total sales revenue in 2022.",
        "output": "SELECT MONTH(orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY MONTH(orders.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List suppliers who have not shipped any orders in the last 6 months.",
        "output": "SELECT CompanyName FROM suppliers s WHERE NOT EXISTS (SELECT 1 FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.ProductID IN (SELECT ProductID FROM products p WHERE p.SupplierID = s.SupplierID) AND o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total discount given in Q4 2022.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-10-01' AND '2022-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders were shipped on time in the last quarter?",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE()) FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE();",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which countries have the highest total sales revenue?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders are shipped with a freight cost lower than the average?",
        "output": "SELECT (SUM(CASE WHEN orders.Freight < (SELECT AVG(Freight) FROM orders) THEN 1 ELSE 0 END) / COUNT(orders.OrderID)) * 100 AS percentage_lower_freight FROM orders",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the percentage of orders that incurred a freight cost greater than $100.",
        "output": "SELECT 100.0 * COUNT(CASE WHEN Freight > 100 THEN 1 END) / COUNT(OrderID) AS HighFreightPercentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied on all orders for each product?",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average delay for late orders in the past 6 months.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgDelay FROM orders WHERE ShippedDate > RequiredDate AND OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who manage at least one other employee.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees WHERE EXISTS (SELECT * FROM employees sub WHERE sub.ReportsTo = employees.EmployeeID);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who is the youngest employee handling the most sales?",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC, employees.BirthDate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the average units in stock across all products.",
        "output": "SELECT AVG(UnitsInStock) AS AverageUnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the shortest average lead time?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN orders o ON p.ProductID = o.ProductID GROUP BY p.SupplierID ORDER BY AvgLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the age of employees handling the most orders this year.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, YEAR(CURDATE()) - YEAR(e.BirthDate) AS Age, COUNT(o.OrderID) AS OrdersHandled FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY OrdersHandled DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were fulfilled on time in the past six months by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) * 1.0 / COUNT(orders.OrderID) * 100 AS on_time_delivery_rate FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate >= DATE_ADD(CURDATE(), INTERVAL -6 MONTH) GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees report to each manager?",
        "output": "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS NumberOfDirectReports FROM employees e WHERE e.ReportsTo IS NOT NULL GROUP BY e.ReportsTo;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are there by each shipping company?",
        "output": "SELECT ShipVia, COUNT(OrderID) FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were returned or required restocking?",
        "output": "SELECT COUNT(*) AS restock_orders FROM [Order Details] WHERE Quantity > (SELECT UnitsInStock FROM products WHERE products.ProductID = [Order Details].ProductID)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the total number of orders placed in December 2023.",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE OrderDate BETWEEN '2023-12-01' AND '2023-12-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the lifetime value of each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the on-time delivery rate for the previous month.",
        "output": "SELECT COUNT(o.OrderID) * 1.0 / (SELECT COUNT(OrderID) FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)) * 100 AS OnTimeDeliveryRate FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of available products?",
        "output": "SELECT AVG(UnitPrice) AS AveragePrice FROM products WHERE Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost for orders shipped by each shipping company?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have generated the highest lifetime value in different regions?",
        "output": "SELECT customers.CustomerID, customers.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, customers.Region ORDER BY lifetime_value DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month this year?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units sold for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a higher units on order than units in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest number of units on order?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder=(SELECT MAX(UnitsOnOrder) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers made more than one purchase in the last year?",
        "output": "SELECT COUNT(DISTINCT customers.CustomerID) FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND customers.CustomerID IN (SELECT CustomerID FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate per country?",
        "output": "SELECT customers.Country, (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN :start_date AND :end_date) / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < :start_date) AS retention_rate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.Country",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products for each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed orders in the last 30 days?",
        "output": "SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 30 DAY;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to the orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have a stock quantity below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the percentage of discontinued products.",
        "output": "SELECT (COUNT(CASE WHEN Discontinued = 1 THEN 1 END) / CAST(COUNT(ProductID) AS FLOAT)) * 100 AS DiscontinuedPercentage FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has achieved the highest sales in the last quarter?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY employees.EmployeeID ORDER BY sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 products by total sales revenue.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product are currently in stock?",
        "output": "SELECT ProductID, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the lowest average order value.",
        "output": "SELECT EmployeeID, AVG(UnitPrice * Quantity * (1 - Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY AvgOrderValue ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the fastest average shipping time?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY ShipVia ORDER BY AvgShippingTime ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average fulfillment time for orders shipped in 2023?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) as AvgFulfillmentTime FROM orders WHERE YEAR(ShippedDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied to orders per customer?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].Discount) AS AverageDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the orders with the highest total value.",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY TotalValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product category has the highest total sales revenue?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average unit price for their products?",
        "output": "SELECT s.CompanyName, AVG(p.UnitPrice) AS Average_Unit_Price FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY Average_Unit_Price DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer placed the most orders in the last quarter?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on all orders?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have not placed any orders.",
        "output": "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.CustomerID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders shipped by the most popular shipping method?",
        "output": "SELECT AVG(Freight) FROM orders WHERE ShipVia = (SELECT ShipVia FROM orders GROUP BY ShipVia ORDER BY COUNT(*) DESC LIMIT 1);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which country is home to the greatest number of suppliers?",
        "output": "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for products in each category?",
        "output": "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in each country?",
        "output": "SELECT orders.ShipCountry, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products by order quantity in the last year?",
        "output": "SELECT TOP 5 [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate > '2022-03-01' GROUP BY [Order Details].ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock + products.UnitsOnOrder), 0) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given for each product sold?",
        "output": "SELECT od.ProductID, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total discount given across all orders?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS Total_Discount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have stock levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers with orders that have never been shipped.",
        "output": "SELECT CustomerID, OrderID FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have made the most orders?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS NumberOfOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are there in each category?",
        "output": "SELECT CategoryID, COUNT(ProductID) FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the percentage of discontinued products in each category?",
        "output": "SELECT CategoryID, COUNT(CASE WHEN Discontinued = 1 THEN 1 END) * 100.0 / COUNT(*) as DiscontinuedPercentage FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders has each employee handled in the last quarter?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersHandled FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND o.OrderDate <= CURDATE() GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total discount given across all orders.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) as TotalDiscount FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the year-over-year customer retention rate?",
        "output": "SELECT (CAST(COUNT(DISTINCT CASE WHEN OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN CustomerID END) AS FLOAT) / NULLIF(COUNT(DISTINCT CASE WHEN OrderDate < '2022-01-01' THEN CustomerID END), 0)) * 100 AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is used the most often?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many late deliveries occurred last month?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate AND MONTH(ShippedDate) = MONTH(CURDATE()) AND YEAR(ShippedDate) = YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average customer lifetime value segmented by customer type?",
        "output": "SELECT customerDemographics.CustomerDesc, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_customer_lifetime_value FROM customers JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics ON customerCustomerDemo.CustomerTypeID = customerDemographics.CustomerTypeID JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customerDemographics.CustomerDesc",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List discontinued products that still have units in stock.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which category of products has the highest total sales in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have never been sold but have units in stock?",
        "output": "SELECT ProductID FROM products WHERE UnitsInStock > 0 AND ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Analyze the lead time of suppliers and correlate it with the total sales of their products.",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products had the highest discount percentage but still generated significant sales this year?",
        "output": "SELECT ProductID, MAX(Discount) AS MaxDiscount, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM `Order Details` JOIN orders ON `Order Details`.OrderID = orders.OrderID WHERE Discount > 0.1 AND YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ProductID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the month-over-month change in units on order.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(UnitsOnOrder) AS UnitsOnOrder FROM products GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify orders that received a discount greater than 20%.",
        "output": "SELECT o.OrderID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) as OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total freight cost by shipping method.",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 5 suppliers with the shortest average delivery times.",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY AvgLeadTime ASC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most orders in March 2023?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023 GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated by each supplier in the last year?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY suppliers.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given on all products?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Compare the total sales revenue for Q1 2022 vs Q1 2023.",
        "output": "SELECT 'Q1 2022' as Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = 2022 AND MONTH(OrderDate) BETWEEN 1 AND 3 UNION ALL SELECT 'Q1 2023' as Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = 2023 AND MONTH(OrderDate) BETWEEN 1 AND 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are shipped late each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the year-over-year growth in total sales from 2022 to 2023?",
        "output": "SELECT ((SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FILTER (WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31')) - (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) FILTER (WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'))) / SUM(od.UnitPrice * od.Quantity * (1 - od.Discount) FILTER (WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31')) AS Growth FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the most orders in 2021 and how many?",
        "output": "SELECT o.EmployeeID, COUNT(*) FROM orders o WHERE YEAR(o.OrderDate) = 2021 GROUP BY o.EmployeeID ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have stock levels below their reorder levels but are not on order?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who has the longest tenure as an employee?",
        "output": "SELECT EmployeeID, FirstName, LastName, DATEDIFF(CURDATE(), HireDate) AS TenureDays FROM employees ORDER BY TenureDays DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Analyze the trend of discontinued products over time.",
        "output": "SELECT DATE_FORMAT(DiscontinuedDate, '%Y-%m') AS Month, COUNT(ProductID) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY DATE_FORMAT(DiscontinuedDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the average order value differ among customers with different demographics?",
        "output": "SELECT demographics.CustomerTypeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN customerCustomerDemo ON customers.CustomerID = customerCustomerDemo.CustomerID JOIN customerDemographics AS demographics ON customerCustomerDemo.CustomerTypeID = demographics.CustomerTypeID GROUP BY demographics.CustomerTypeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated per category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late each quarter?",
        "output": "SELECT QUARTER(OrderDate) AS Quarter, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Quarter;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have not fulfilled any orders in the last year.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate IS NULL OR o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that need to be reordered based on current stock levels and reorder points.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping method used?",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Analyze the monthly trend of orders for each employee in the current year.",
        "output": "SELECT employees.EmployeeID, MONTH(orders.OrderDate) AS OrderMonth, COUNT(orders.OrderID) AS NumberOfOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY employees.EmployeeID, MONTH(orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders placed per month?",
        "output": "SELECT MONTH(o.OrderDate) AS Month, COUNT(o.OrderID) AS Total_Orders FROM orders o GROUP BY MONTH(o.OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the top 5 products with the highest inventory turnover ratio in 2023.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID ORDER BY inventory_turnover_ratio DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many employees are linked to more than one sales territory?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT employeeTerritories.TerritoryID) AS territory_count FROM employees JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID GROUP BY employees.EmployeeID HAVING territory_count > 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 shipping methods based on usage.",
        "output": "SELECT ShipVia, COUNT(*) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers that have increased their order frequency over time.",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount, YEAR(o.OrderDate) AS OrderYear FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID, OrderYear HAVING COUNT(o.OrderID) > 1 ORDER BY OrderYear, OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have seen the highest increase in orders over time?",
        "output": "// Requires historical data and trend analysis logic",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the longest uninterrupted gap in sales.",
        "output": "WITH ProductSales AS (SELECT ProductID, OrderDate, LAG(OrderDate) OVER (PARTITION BY ProductID ORDER BY OrderDate) AS PrevOrderDate FROM [Order Details]) SELECT ProductID, MAX(DATEDIFF(DAY, PrevOrderDate, OrderDate)) AS LongestGap FROM ProductSales GROUP BY ProductID ORDER BY LongestGap DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine which month had the highest product performance, measured by the number of units sold.",
        "output": "SELECT EXTRACT(MONTH FROM od.OrderDate) AS OrderMonth, SUM(od.Quantity) AS ProductPerformance FROM [Order Details] od GROUP BY OrderMonth ORDER BY ProductPerformance DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total sales for each month in 2023?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the difference in average order value between 2021 and 2022?",
        "output": "SELECT (SUM(CASE WHEN YEAR(orders.OrderDate) = 2022 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) END) / COUNT(DISTINCT CASE WHEN YEAR(orders.OrderDate) = 2022 THEN orders.OrderID END)) - (SUM(CASE WHEN YEAR(orders.OrderDate) = 2021 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) END) / COUNT(DISTINCT CASE WHEN YEAR(orders.OrderDate) = 2021 THEN orders.OrderID END)) AS AvgOrderValueDiff;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total sales revenue per quarter.",
        "output": "SELECT EXTRACT(QUARTER FROM od.OrderDate) AS OrderQuarter, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od GROUP BY OrderQuarter;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of each product ordered last month?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE OrderDate BETWEEN '2023-08-01' AND '2023-08-31' GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products were sold in the last 6 months?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the monthly trend of products going out of stock over the last year.",
        "output": "SELECT MONTH(orders.OrderDate) AS month, COUNT(DISTINCT [Order Details].ProductID) AS out_of_stock_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE products.UnitsInStock = 0 AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the inventory turnover ratio for all products having stock below the reorder level.",
        "output": "SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.UnitsInStock < products.ReorderLevel GROUP BY products.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for each product on a monthly basis?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS TurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products with the highest sales volume this month.",
        "output": "SELECT ProductID, SUM([Order Details].Quantity) AS SalesVolume FROM [Order Details] WHERE MONTH([Order Details].OrderDate) = MONTH(CURRENT_DATE()) GROUP BY ProductID ORDER BY SalesVolume DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country has the highest total freight charges?",
        "output": "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipCountry ORDER BY TotalFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which manager oversees the highest-grossing employees?",
        "output": "SELECT managers.EmployeeID AS ManagerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN employees managers ON employees.ReportsTo = managers.EmployeeID GROUP BY managers.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify orders with a shipping delay of more than five days.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate AND ShippedDate IS NOT NULL AND DATEDIFF(ShippedDate, RequiredDate) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have stock levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the highest total sales revenue?",
        "output": "SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average number of units ordered per order?",
        "output": "SELECT AVG(od.Quantity) FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales amount per product per month?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID, DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How do shipping times correlate with shipping costs?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_shipping_time, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY orders.ShipVia",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by quantity?",
        "output": "SELECT ProductID, SUM(Quantity) as TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products by revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is used most frequently based on total orders?",
        "output": "SELECT o.ShipVia, COUNT(*) FROM orders o GROUP BY o.ShipVia ORDER BY COUNT(*) DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the variance in order quantities across different employees.",
        "output": "SELECT e.EmployeeID, VAR_POP(od.Quantity) AS QuantityVariance FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 regions with the highest order count.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the average number of units sold per order by each employee.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Quantity) AS AverageUnitsPerOrder FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the monthly sales trend for the top-selling product?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE ProductID = (SELECT ProductID FROM [Order Details] GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1) GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total revenue from freight charges for the year?",
        "output": "SELECT SUM(Freight) AS TotalFreightRevenue FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 5 products by sales revenue.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS SalesRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS Turnover FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the number of late shipments made by each employee.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateShipments FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products with a low product performance score.",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] ON p.ProductID = [Order Details].ProductID GROUP BY p.ProductName HAVING SUM([Order Details].Quantity) < 10 OR SUM([Order Details].Quantity) IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with extreme price variations from their average market price.",
        "output": "SELECT p.ProductID, p.ProductName, ABS(p.UnitPrice - (SELECT AVG(UnitPrice) FROM products p2 WHERE p2.ProductID != p.ProductID)) AS PriceDeviation FROM products p HAVING PriceDeviation > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have been ordered in quantities greater than their units in stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average reorder level for products by supplier?",
        "output": "SELECT SupplierID, AVG(ReorderLevel) as AvgReorderLevel FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated from each product?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with inventory turnover ratios higher than 5.",
        "output": "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(UnitsInStock) AS InventoryTurnover FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING InventoryTurnover > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given on orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m-01') AND o.OrderDate < DATE_FORMAT(CURDATE(), '%Y-%m-01');",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most popular product by the number of orders?",
        "output": "SELECT ProductID, COUNT(DISTINCT OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest average order fulfillment time?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Year, Month ORDER BY AvgFulfillmentTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales amounts for each product, considering discounts?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List all orders placed by a specific customer.",
        "output": "SELECT * FROM orders WHERE CustomerID = 'specific_customer_id';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of on-time deliveries for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "For each customer, calculate the average time between orders.",
        "output": "SELECT customers.CustomerID, AVG(DATEDIFF(orders.OrderDate, LAG(orders.OrderDate) OVER (PARTITION BY customers.CustomerID ORDER BY orders.OrderDate))) AS AvgTimeBetweenOrders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the average fulfillment time for orders by each employee.",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products with a stock level below 10 units.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied on orders by each employee?",
        "output": "SELECT o.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for last month's orders?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) AND MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales per country for this year.",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed by customers from a specific country?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShipCountry = 'specific country';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders with a discount in March 2023?",
        "output": "SELECT COUNT(DISTINCT CASE WHEN od.Discount > 0 THEN o.OrderID END) / COUNT(DISTINCT o.OrderID) FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have not been ordered in the last month.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate >= DATEADD(month, -1, GETDATE()));",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped on time in February 2023?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate <= RequiredDate AND ShippedDate BETWEEN '2023-02-01' AND '2023-02-28';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How is the product performance affected by category?",
        "output": "SELECT categories.CategoryName, products.ProductID, SUM([Order Details].Quantity) AS performance FROM products JOIN categories ON products.CategoryID = categories.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryName, products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers by total revenue.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late in the last year?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = YEAR(CURDATE()) - 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for the current month?",
        "output": "SELECT AVG(Freight) FROM orders WHERE MONTH(OrderDate) = MONTH(CURDATE()) AND YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average shipping time by region?",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgShippingTime FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the highest number of suppliers?",
        "output": "SELECT City, COUNT(*) AS NumberOfSuppliers FROM suppliers GROUP BY City ORDER BY NumberOfSuppliers DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with consistently low sales over the past year.",
        "output": "SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) < SOME_THRESHOLD;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the top 5 suppliers in terms of the number of products they provide?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the highest quantity ordered for any product?",
        "output": "SELECT ProductID, MAX(Quantity) AS MaxQuantity FROM [Order Details] GROUP BY ProductID ORDER BY MaxQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many products were ordered in the last month?",
        "output": "SELECT SUM(od.Quantity) FROM [Order Details] od WHERE od.OrderID IN (SELECT o.OrderID FROM orders o WHERE o.OrderDate >= DATEADD(month, -1, CURRENT_DATE));",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 5 products by sales volume.",
        "output": "SELECT p.ProductID, SUM(o.Quantity) AS SalesVolume FROM products p JOIN [Order Details] o ON p.ProductID = o.ProductID GROUP BY p.ProductID ORDER BY SalesVolume DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales figure for each employee, by year?",
        "output": "SELECT employees.EmployeeID, YEAR(OrderDate) AS Year, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS YearlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, YEAR(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time per shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the highest average order value?",
        "output": "SELECT customers.City, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.City ORDER BY avg_order_value DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for orders in February 2023?",
        "output": "SELECT (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID)) * 100 AS OnTimeRate FROM orders WHERE MONTH(orders.OrderDate) = 2 AND YEAR(orders.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of each product are on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has been with the company the longest?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees ORDER BY HireDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee had the most orders shipped late?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY EmployeeID ORDER BY LateOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee who has given the highest total discounts.",
        "output": "SELECT EmployeeID, SUM(Discount * Quantity) AS TotalDiscounts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID ORDER BY TotalDiscounts DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS Frequency FROM [Order Details] od GROUP BY od.ProductID ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average discount applied across all orders.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late each month?",
        "output": "SELECT EXTRACT(YEAR FROM OrderDate) AS Year, EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY Year, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city had the highest number of shipped orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS ShippedOrders FROM orders GROUP BY ShipCity ORDER BY ShippedOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total sales amount for each month this year?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY OrderMonth ORDER BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of discontinued products?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost to a specific country in the current year?",
        "output": "SELECT SUM(Freight) FROM orders WHERE ShipCountry = 'TargetCountry' AND YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been placed by each customer?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY o.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which postal codes have the most orders?",
        "output": "SELECT ShipPostalCode, COUNT(OrderID) FROM orders GROUP BY ShipPostalCode ORDER BY COUNT(OrderID) DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 10 cities with the most orders placed.",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrdersCount FROM orders o GROUP BY o.ShipCity ORDER BY OrdersCount DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify trends in order quantities over the last five years.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the most units in stock.",
        "output": "SELECT suppliers.SupplierID, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY TotalUnitsInStock DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders shipped to 'Canada'?",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders WHERE ShipCountry = 'Canada';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total revenue and average order value for each supplier.",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many employees have achieved sales greater than a million dollars last month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURDATE()) AND SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 1000000 GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were shipped to 'USA' on time in 2023?",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) FROM orders WHERE ShipCountry = 'USA' AND OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the year 2022?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) as AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = 2022;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(o.Freight) AS Average_Freight_Per_Order FROM orders o;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average discount percentage given per order.",
        "output": "SELECT AVG(Discount) * 100 AS AvgDiscountPercentage FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List employees with the highest number of handled orders.",
        "output": "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS HandledOrders FROM orders GROUP BY orders.EmployeeID ORDER BY HandledOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost associated with each employee?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the maximum number of products in a single order?",
        "output": "SELECT MAX(TotalProducts) FROM (SELECT SUM(Quantity) AS TotalProducts FROM [Order Details] GROUP BY OrderID) AS SubQuery;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount amount given for each order?",
        "output": "SELECT OrderID, SUM(Discount * UnitPrice * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier's products have the highest average sales?",
        "output": "SELECT SupplierID, AVG(Sales) FROM (SELECT SupplierID, [Order Details].Quantity * [Order Details].UnitPrice AS Sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID) AS SupplierSales GROUP BY SupplierID ORDER BY AVG(Sales) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top-selling products by revenue?",
        "output": "SELECT ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the price difference of products ordered versus their unit price?",
        "output": "SELECT ProductID, SUM([Order Details].UnitPrice * Quantity) - SUM(products.UnitPrice * Quantity) AS PriceDifference FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 countries with the most orders.",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers are associated with products having the highest sales volume?",
        "output": "SELECT SupplierID FROM products JOIN (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1) AS BestSeller ON products.ProductID = BestSeller.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers have provided products with the highest average reorder level?",
        "output": "SELECT SupplierID, AVG(ReorderLevel) AS AvgReorderLevel FROM products GROUP BY SupplierID ORDER BY AvgReorderLevel DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who has been with the company the longest.",
        "output": "SELECT e.EmployeeID, DATEDIFF(CURRENT_DATE(), e.HireDate) AS Tenure FROM employees e ORDER BY Tenure DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the product with the highest total sales revenue.",
        "output": "SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM [Order Details] od GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the product with the highest total sales value in the current year.",
        "output": "SELECT ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSalesValue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY ProductName ORDER BY TotalSalesValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees by title?",
        "output": "SELECT e.Title, AVG(e.Salary) AS AverageSalary FROM employees e GROUP BY e.Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly sales growth rate for each product.",
        "output": "SELECT p.ProductID, (SUM(od.Quantity) - LAG(SUM(od.Quantity)) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR_MONTH FROM o.OrderDate))) / LAG(SUM(od.Quantity)) OVER (PARTITION BY p.ProductID ORDER BY EXTRACT(YEAR_MONTH FROM o.OrderDate)) AS GrowthRate FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, EXTRACT(YEAR_MONTH FROM o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from orders in the current month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the order volume trend month-over-month?",
        "output": "SELECT MONTH(OrderDate) AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY YEAR(OrderDate), MONTH(OrderDate) ORDER BY YEAR(OrderDate), MONTH(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many unique customers have each employee worked with?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company had the highest number of shipments last quarter?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS Shipments FROM orders WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY ShipVia ORDER BY Shipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders shipped by each company were delivered on time, and how does it impact customer satisfaction?",
        "output": "SELECT shippers.CompanyName, (COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID)) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue by country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who handled the most orders to international destinations.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS IntlOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShipCountry <> 'Domestic' GROUP BY e.EmployeeID ORDER BY IntlOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of units sold for each product this year?",
        "output": "SELECT `Order Details`.ProductID, SUM(`Order Details`.Quantity) AS UnitsSold FROM orders JOIN `Order Details` ON orders.OrderID = `Order Details`.OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY `Order Details`.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) as OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of each product are currently on order?",
        "output": "SELECT ProductID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest unit price?",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of distinct products ordered?",
        "output": "SELECT COUNT(DISTINCT [Order Details].ProductID) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value?",
        "output": "SELECT AVG(total_value) AS AverageOrderValue FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_value FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID) AS OrderValues;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate for customers over the past year?",
        "output": "SELECT (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()) / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time this quarter?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE QUARTER(o.OrderDate) = QUARTER(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of order fulfillment times?",
        "output": "SELECT DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime, COUNT(OrderID) FROM orders GROUP BY FulfillmentTime ORDER BY FulfillmentTime;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Lifetime Value for each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CLV FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 3 suppliers in terms of product variety.",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductVariety FROM products GROUP BY SupplierID ORDER BY ProductVariety DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the percentage of orders where shipping was faster than required date by more than 3 days.",
        "output": "SELECT (SUM(CASE WHEN ShippedDate < DATE_SUB(RequiredDate, INTERVAL 3 DAY) THEN 1 ELSE 0 END) / COUNT(OrderID)) * 100 AS Percentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the average sales per employee per month?",
        "output": "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue from orders containing discounted items?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenueWithDiscount FROM [Order Details] WHERE [Order Details].Discount > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of unique customers that have placed orders?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the highest number of discontinued products?",
        "output": "SELECT CategoryID, COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which orders were shipped with a discount of more than 10%?",
        "output": "SELECT * FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE OD.Discount > 0.10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales amount generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the overall discount percentage applied across all orders in 2022?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) / SUM(od.UnitPrice * od.Quantity) * 100 FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2022;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in the last year?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the monthly sales growth for the past year.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE() - INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier is based in the USA with the highest number of products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products WHERE Country = 'USA' GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee for the current month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE()) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is most commonly used?",
        "output": "SELECT orders.ShipVia, COUNT(orders.OrderID) AS UsageCount FROM orders GROUP BY orders.ShipVia ORDER BY UsageCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been placed by each contact title?",
        "output": "SELECT ContactTitle, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY ContactTitle ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total value of products in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders processed by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total stock value (UnitsInStock * UnitPrice) for each product?",
        "output": "SELECT ProductID, UnitsInStock * UnitPrice AS StockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all orders that applied a discount over 20%.",
        "output": "SELECT o.OrderID, od.ProductID, od.Discount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the sales generated by employee in the last fiscal year.",
        "output": "SELECT EmployeeID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Evaluate the impact of discontinued products on current inventory value.",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS InventoryValue FROM products WHERE Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products sold in the last quarter?",
        "output": "SELECT SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURDATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the discontinued products and their current stock levels.",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    }
]