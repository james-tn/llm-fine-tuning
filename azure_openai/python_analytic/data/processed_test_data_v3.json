[
    {
        "scenario": "Order Analysis",
        "input": "What was the average order value in Q1 of 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the relevant data\nsql_query = \"\"\"\nSELECT \n    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalValue,\n    COUNT(DISTINCT orders.OrderID) AS OrderCount\nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nWHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31'\n\"\"\"\n\n# Execute the SQL query\ndata = execute_sql_query(sql_query)\n\n# Calculate the average order value\ndata['AvgOrderValue'] = data['TotalValue'] / data['OrderCount']\n\n# Display the result to the user\nshow_to_user(data[['AvgOrderValue']])\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the lowest units in stock?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the products with the lowest units in stock\nsql_query = \"\"\"\nSELECT ProductID, ProductName, UnitsInStock \nFROM products \nORDER BY UnitsInStock ASC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query\nlowest_stock_product_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(lowest_stock_product_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers placed the highest number of orders last year?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query to retrieve customers with highest orders last year\nsql_query = \"\"\"\nSELECT CustomerID, COUNT(OrderID) AS OrderCount \nFROM orders \nWHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 \nGROUP BY CustomerID \nORDER BY OrderCount DESC\n\"\"\"\n\n# Execute the SQL query\ndf_orders = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df_orders)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated by each product and visualize it using a bar chart to compare easily.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT \n    p.ProductName, \n    SUM(od.Quantity * od.UnitPrice) AS TotalRevenue \nFROM \n    [Order Details] od \nINNER JOIN \n    products p ON od.ProductID = p.ProductID \nGROUP BY \n    p.ProductName;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using Plotly\nfig = px.bar(df, x='ProductName', y='TotalRevenue', title='Total Revenue by Product')\n\n# Display the visualization\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers are from the United States?",
        "output": "```python\nsql_query = \"SELECT CustomerID FROM orders WHERE ShipCountry = 'USA'\"\nresult_df = execute_sql_query(sql_query)\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products that are being sold at a discount (UnitPrice in orders < UnitPrice in products).",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get products sold at a discount\nsql_query = \"\"\"\nSELECT p.ProductName \nFROM products p \nJOIN [Order Details] od \nON p.ProductID = od.ProductID \nWHERE od.UnitPrice < p.UnitPrice;\n\"\"\"\n\n# Execute the SQL query\ndiscounted_products_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(discounted_products_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees generated the highest sales revenue in April 2023 and visualize with a bar chart for comparison?",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = '''\nSELECT employees.FirstName, employees.LastName, \nSUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nJOIN employees ON orders.EmployeeID = employees.EmployeeID \nWHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30' \nGROUP BY employees.EmployeeID, employees.FirstName, employees.LastName \nORDER BY total_sales DESC\n'''\n\n# Execute SQL query and get data\ndata = execute_sql_query(sql_query)\n\n# Create a full name column for ease of visualization\ndata['FullName'] = data['FirstName'] + ' ' + data['LastName']\n\n# Create the bar chart using Plotly\nfig = px.bar(data, x='FullName', y='total_sales', \n             title='Top Employees by Sales Revenue in April 2023',\n             labels={'total_sales': 'Total Sales Revenue', 'FullName': 'Employee Name'})\n\n# Show the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value handled by each employee and visualize with a bar chart for employee comparison?",
        "output": "```python\nimport plotly.express as px\n\n# Step 1: Define the SQL query\nsql_query = \"\"\"\nSELECT employees.EmployeeID, \n       AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue \nFROM employees \nJOIN orders ON employees.EmployeeID = orders.EmployeeID \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY employees.EmployeeID;\n\"\"\"\n\n# Step 2: Execute the SQL query and retrieve the result as a DataFrame\ndf = execute_sql_query(sql_query)\n\n# Step 3: Create a bar chart using Plotly\nfig = px.bar(df, x='EmployeeID', y='AvgOrderValue', title='Average Order Value by Employee', labels={'AvgOrderValue': 'Average Order Value', 'EmployeeID': 'Employee ID'})\n\n# Step 4: Display the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total revenue generated by each product and illustrate using a bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query to retrieve data\nsql_query = \"\"\"\nSELECT ProductID, SUM(Quantity * UnitPrice) AS TotalRevenue \nFROM [Order Details] \nGROUP BY ProductID;\n\"\"\"\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using Plotly\nfig = px.bar(df, x='ProductID', y='TotalRevenue', title='Total Revenue by Product')\n\n# Display the chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for each month and represent it with a line chart to observe trends.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query defined\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') as Month, \n       SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) as InventoryTurnoverRatio \nFROM `Order Details` od \nJOIN products p ON od.ProductID = p.ProductID \nGROUP BY DATE_FORMAT(OrderDate, '%Y-%m')\n\"\"\"\n\n# Execute SQL query\ndata = execute_sql_query(sql_query)\n\n# Convert Month to datetime for proper plotting\ndata['Month'] = pd.to_datetime(data['Month'])\n\n# Generate line chart\nfig = px.line(data, x='Month', y='InventoryTurnoverRatio', title='Monthly Inventory Turnover Ratio')\n\n# Display the result\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Visualize the performance of products based on sales and inventory levels for each month in 2022 using a combination chart.",
        "output": "```python\nimport plotly.graph_objects as go\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT products.ProductID, \n       MONTH(orders.OrderDate) AS order_month, \n       SUM([Order Details].Quantity) AS product_performance \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' \nGROUP BY products.ProductID, order_month\n\"\"\"\n\n# Execute the SQL query to get the data\ndf = execute_sql_query(sql_query)\n\n# Prepare the data for visualization\npivot_df = df.pivot(index=\"order_month\", columns=\"ProductID\", values=\"product_performance\").fillna(0)\n\n# Create a combination chart\nfig = go.Figure()\n\n# Add traces for each product\nfor product_id in pivot_df.columns:\n    fig.add_trace(go.Bar(x=pivot_df.index, y=pivot_df[product_id], name=f'Product {product_id}'))\n\n# Set chart title and labels\nfig.update_layout(\n    title='Product Performance Based on Sales (2022)',\n    xaxis_title='Month',\n    yaxis_title='Quantity Sold',\n    xaxis=dict(tickmode='linear'),\n    barmode='stack'\n)\n\n# Show the combination chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated by each customer and represent it with a bar chart for comparison?",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT CustomerID, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY CustomerID \nORDER BY TotalSales DESC;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='CustomerID', y='TotalSales', title='Total Sales Revenue by Customer', labels={'CustomerID': 'Customer ID', 'TotalSales': 'Total Sales Revenue'})\n\n# Show the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has processed the most orders for customers in the USA and visualize the results using a bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS OrderCount \nFROM employees \nJOIN orders ON employees.EmployeeID = orders.EmployeeID \nWHERE orders.ShipCountry = 'USA' \nGROUP BY employees.EmployeeID \nORDER BY OrderCount DESC\nLIMIT 1;\n\"\"\"\n\n# Execute SQL query\ndf = execute_sql_query(sql_query)\n\n# Create bar chart with Plotly\nfig = px.bar(df, x='FirstName', y='OrderCount', text='OrderCount', title='Top Employee Processing USA Orders')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n\n# Show the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product had the highest sales quantity in the last month and use a bar chart to compare top-selling products?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get top-selling products\nsql_query = \"\"\"\nSELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity\nFROM [Order Details] od \nJOIN products p ON od.ProductID = p.ProductID \nWHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) \nGROUP BY p.ProductID, p.ProductName \nORDER BY TotalQuantity DESC;\n\"\"\"\n\n# Execute the SQL query\ndata = execute_sql_query(sql_query)\n\n# Find the product with the highest sales quantity\ntop_product = data.head(1)\n\n# Display the top product details\nshow_to_user(top_product)\n\n# Create a bar chart to compare top-selling products\nfig = px.bar(data.head(10), x='ProductName', y='TotalQuantity', title='Top-Selling Products in the Last Month')\n\n# Display the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "For each employee, what is the average number of orders handled per month in 2023 and visualize the results with a bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the average number of orders per month per employee in 2023\nsql_query = \"\"\"\nSELECT employees.EmployeeID, AVG(order_count) AS avg_orders_per_month \nFROM (\n    SELECT employees.EmployeeID, COUNT(orders.OrderID) AS order_count, \n    MONTH(orders.OrderDate) AS order_month \n    FROM employees \n    LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID \n    WHERE YEAR(orders.OrderDate) = 2023\n    GROUP BY employees.EmployeeID, MONTH(orders.OrderDate)\n) AS temp \nGROUP BY employees.EmployeeID\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='EmployeeID', y='avg_orders_per_month', \n             title='Average Number of Orders per Month for Each Employee in 2023', \n             labels={'avg_orders_per_month': 'Avg Orders per Month', 'EmployeeID': 'Employee ID'})\n\n# Show the figure\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products are still in stock?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find discontinued products still in stock\nsql_query = \"SELECT COUNT(*) AS DiscontinuedInStock FROM products WHERE Discontinued = 1 AND UnitsInStock > 0;\"\n\n# Execute SQL query\ndf = execute_sql_query(sql_query)\n\n# Extract the count from the dataframe\ndiscontinued_in_stock = df['DiscontinuedInStock'].iloc[0]\n\n# Display the result to the user\nshow_to_user(discontinued_in_stock)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the most frequently used shipping method.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the most frequently used shipping method\nsql_query = \"\"\"\nSELECT ShipVia, COUNT(OrderID) AS UseCount\nFROM orders\nGROUP BY ShipVia\nORDER BY UseCount DESC\nLIMIT 1;\n\"\"\"\n\n# Execute SQL query\nmost_used_shipping_method_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(most_used_shipping_method_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not been ordered in the last three months?",
        "output": "```python\nimport pandas as pd\n\n# Define the correct SQL query\nsql_query = \"\"\"\nSELECT ProductName FROM products \nWHERE ProductID NOT IN (\n  SELECT DISTINCT ProductID \n  FROM `Order Details` \n  WHERE OrderID IN (\n    SELECT OrderID \n    FROM orders \n    WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n  )\n);\n\"\"\"\n\n# Execute the SQL query\nproducts_not_ordered_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(products_not_ordered_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average Inventory Turnover Ratio for each month and visualize it using a line chart to show trends?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to calculate Inventory Turnover Ratio\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, \n    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio \nFROM [Order Details] od \nJOIN products p ON od.ProductID = p.ProductID \nJOIN orders o ON od.OrderID = o.OrderID \nGROUP BY DATE_FORMAT(OrderDate, '%Y-%m');\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Convert 'Month' to datetime for proper plotting\ndf['Month'] = pd.to_datetime(df['Month'])\n\n# Create a line chart to visualize the trend of Inventory Turnover Ratio\nfig = px.line(df, x='Month', y='InventoryTurnoverRatio', title='Average Inventory Turnover Ratio per Month')\n\n# Display the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees with the highest salaries.",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to get the top 5 employees with the highest salaries\nsql_query = \"\"\"\nSELECT EmployeeID, FirstName, LastName, Salary \nFROM employees \nORDER BY Salary DESC \nLIMIT 5;\n\"\"\"\n\n# Execute the SQL query\ntop_employees_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(top_employees_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What's the average discount applied to products?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the average discount\nsql_query = \"SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the average discount\naverage_discount = result_df['AverageDiscount'].iloc[0]\nshow_to_user(pd.DataFrame({'AverageDiscount': [average_discount]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales revenue generated each month and illustrate with a line chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, \n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales \nFROM orders o \nJOIN `Order Details` od ON o.OrderID = od.OrderID \nGROUP BY Month;\n\"\"\"\n\n# Execute the SQL query\nsales_data = execute_sql_query(sql_query)\n\n# Ensure 'Month' is in datetime format for correct plotting\nsales_data['Month'] = pd.to_datetime(sales_data['Month'])\n\n# Create a line chart\nfig = px.line(sales_data, x='Month', y='MonthlySales', title='Monthly Sales Revenue', labels={'MonthlySales': 'Sales Revenue', 'Month': 'Month'})\n\n# Show the chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were shipped after the required date each month and visualize the trends with a bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the percentage of late deliveries each month\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, \n       COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) / COUNT(OrderID) AS LateDeliveryRate \nFROM orders \nGROUP BY DATE_FORMAT(OrderDate, '%Y-%m')\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Ensure LateDeliveryRate is in percentage format for plotting\ndf['LateDeliveryRate'] *= 100\n\n# Create a bar chart to visualize the trend of late delivery rates\nfig = px.bar(df, x='Month', y='LateDeliveryRate', \n             title='Monthly Late Delivery Rate',\n             labels={'LateDeliveryRate': 'Late Delivery Rate (%)', 'Month': 'Month'})\n\n# Use the defined utility function to display the figure\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used most frequently?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT ShipVia, COUNT(OrderID) AS UsageCount\nFROM orders\nGROUP BY ShipVia\nORDER BY UsageCount DESC\nLIMIT 1\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Check if result_df is not empty before showing to user\nif not result_df.empty:\n    show_to_user(result_df)\nelse:\n    show_to_user(pd.DataFrame({\"Message\": [\"No data found\"]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate from January 2022 to January 2023 and visualize retention trend with a line graph.",
        "output": "```python\nimport plotly.express as px\nimport pandas as pd\n\n# SQL queries to get unique customer counts\nquery_retained_customers = \"\"\"\nSELECT COUNT(DISTINCT orders.CustomerID) AS retained_customers_count\nFROM orders\nWHERE orders.OrderDate BETWEEN '2022-01-01' AND '2023-01-01'\nAND orders.CustomerID IN (\n    SELECT DISTINCT CustomerID\n    FROM orders\n    WHERE orders.OrderDate < '2022-01-01'\n)\n\"\"\"\n\nquery_existing_customers = \"\"\"\nSELECT COUNT(DISTINCT orders.CustomerID) AS existing_customers_count\nFROM orders\nWHERE orders.OrderDate < '2022-01-01'\n\"\"\"\n\n# Execute the queries\nretained_customers_df = execute_sql_query(query_retained_customers)\nexisting_customers_df = execute_sql_query(query_existing_customers)\n\n# Calculate retention rate\nretained_customers = retained_customers_df['retained_customers_count'].iloc[0]\nexisting_customers = existing_customers_df['existing_customers_count'].iloc[0]\nretention_rate = retained_customers / existing_customers if existing_customers != 0 else 0\n\n# Create a pandas DataFrame for visualization\ndata = {\n    'Date Range': ['2022-01 to 2023-01'],\n    'Retention Rate': [retention_rate]\n}\nretention_df = pd.DataFrame(data)\n\n# Visualization using Plotly\nfig = px.line(retention_df, x='Date Range', y='Retention Rate', title='Customer Retention Rate Trend')\n\n# Show the result\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the year 2021?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT \n    [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) AS OrderValue,\n    orders.OrderID\nFROM \n    orders \nJOIN \n    [Order Details] \nON \n    orders.OrderID = [Order Details].OrderID \nWHERE \n    YEAR(orders.OrderDate) = 2021;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Calculate average order value\naverage_order_value = result_df.groupby('OrderID')['OrderValue'].sum().mean()\n\n# Show the result to the user\nshow_to_user(pd.DataFrame({'AverageOrderValue': [average_order_value]}))\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 3 products with the most number of orders and illustrate with a bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve top 3 products with most orders\nsql_query = \"\"\"\nSELECT p.ProductID, p.ProductName, COUNT(od.OrderID) AS NumberOfOrders\nFROM [Order Details] od\nJOIN products p ON od.ProductID = p.ProductID\nGROUP BY p.ProductID, p.ProductName\nORDER BY NumberOfOrders DESC\nLIMIT 3;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='ProductName', y='NumberOfOrders', title='Top 3 Products with Most Orders')\n\n# Show the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the average monthly sales generated by each region and present with a multi-line chart for each region.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL query to execute\nsql_query = \"\"\"\nSELECT territories.RegionID, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) /\n       COUNT(DISTINCT DATE_TRUNC('month', orders.OrderDate)) AS avg_monthly_sales \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nJOIN employees ON orders.EmployeeID = employees.EmployeeID \nJOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID \nJOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID \nGROUP BY territories.RegionID\n\"\"\"\n\n# Execute SQL query\ndf = execute_sql_query(sql_query)\n\n# Multi-line chart\nfig = px.line(df, x=df.index, y='avg_monthly_sales', color='RegionID', title='Average Monthly Sales by Region')\n\n# Display the figure\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the order with the highest discount applied.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find the order with the highest discount\nsql_query = \"SELECT OrderID, MAX(Discount) as MaxDiscount FROM [Order Details] GROUP BY OrderID ORDER BY MaxDiscount DESC LIMIT 1;\"\n\n# Execute the SQL query and retrieve the data\norder_with_max_discount = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(order_with_max_discount)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly total sales revenue over the last year and plot with a time series line chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to fetch monthly total sales revenue over the last year\nsql_query = \"\"\"\nSELECT MONTH(o.OrderDate) AS Month, \n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM orders o \nJOIN [Order Details] od \nON o.OrderID = od.OrderID \nWHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) - 1\nGROUP BY MONTH(o.OrderDate) \nORDER BY Month;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Plot the time series line chart\nfig = px.line(df, x='Month', y='TotalSales', labels={'Month': 'Month', 'TotalSales': 'Total Sales Revenue'},\n              title='Monthly Total Sales Revenue Over the Last Year')\n\n# Show the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units are currently in stock for each product?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductName, UnitsInStock FROM products;\"\n\n# Execute SQL query and retrieve data\ndf = execute_sql_query(sql_query)\n\n# Display the data to user\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have birthdays in the current month.",
        "output": "```python\nfrom datetime import datetime\nimport pandas as pd\n\n# Fetch current month\ncurrent_month = datetime.now().month\n\n# Define the SQL query\nsql_query = f\"\"\"\nSELECT e.EmployeeID, e.FirstName, e.LastName \nFROM employees e \nWHERE MONTH(e.BirthDate) = {current_month};\n\"\"\"\n\n# Execute SQL query\nemployees_with_birthday = execute_sql_query(sql_query)\n\n# Display the results\nshow_to_user(employees_with_birthday)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales revenue for each product and display with a sorted bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to fetch data\nsql_query = \"\"\"\nSELECT P.ProductID, SUM(OD.Quantity * OD.UnitPrice) AS TotalSalesRevenue \nFROM [Order Details] OD \nJOIN products P ON OD.ProductID = P.ProductID \nGROUP BY P.ProductID;\n\"\"\"\n\n# Execute the SQL query and store the result in a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Sort the dataframe by TotalSalesRevenue in descending order\ndf_sorted = df.sort_values(by='TotalSalesRevenue', ascending=False)\n\n# Create a bar chart using plotly express\nfig = px.bar(df_sorted, x='ProductID', y='TotalSalesRevenue', title='Total Sales Revenue by Product')\n\n# Show the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who is the highest paid employee and what is their total sales?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = '''\nSELECT e.EmployeeID, e.Salary, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY e.EmployeeID \nORDER BY e.Salary DESC \nLIMIT 1;\n'''\n\n# Execute the SQL query and get the data\ndf = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given for each supplier's products and visualize with a bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT p.SupplierID, AVG(od.Discount) AS AvgDiscount \nFROM products p \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nGROUP BY p.SupplierID;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using Plotly\nfig = px.bar(df, x='SupplierID', y='AvgDiscount', title='Average Discount by Supplier')\n\n# Display the plot\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales revenue generated in the last month.",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to calculate total sales revenue for the last month\nsql_query = \"\"\"\nSELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM orders o \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nWHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);\n\"\"\"\n\n# Execute the SQL query\nsales_data = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(sales_data.iloc[0]['TotalSales'])\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales per employee for each month and illustrate with a stacked bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# Define SQL query\nsql_query = \"\"\"\nSELECT e.EmployeeID, \n       strftime('%Y-%m', o.OrderDate) as OrderMonth, \n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY e.EmployeeID, OrderMonth;\n\"\"\"\n\n# Execute SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Create a stacked bar chart\nfig = px.bar(result_df, x='OrderMonth', y='TotalSales', color='EmployeeID', \n             title='Total Sales per Employee for Each Month', \n             labels={'TotalSales': 'Total Sales', 'OrderMonth': 'Order Month'}, \n             barmode='stack')\n\n# Show the chart\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the total number of units sold compare between discontinued and active products and visualize with a comparative bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT products.Discontinued, \n       SUM([Order Details].Quantity) AS TotalUnitsSold \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nGROUP BY products.Discontinued\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a comparative bar chart using Plotly\nfig = px.bar(df, x='Discontinued', y='TotalUnitsSold',\n             labels={'Discontinued': 'Product Status', 'TotalUnitsSold': 'Total Units Sold'},\n             title='Total Units Sold: Discontinued vs Active Products',\n             color='Discontinued')\n\n# Show the result\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Count the total number of orders placed by each customer.",
        "output": "```python\nimport pandas as pd\n\n# Construct the SQL query\nsql_query = \"SELECT CustomerID, COUNT(*) AS total_orders FROM orders GROUP BY CustomerID;\"\n\n# Execute the SQL query and get the result as a pandas dataframe\ndf_orders = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df_orders)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product categories with the lowest total sales revenue and display with a bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to identify the product category with the lowest total sales revenue\nsql_query = \"\"\"\nSELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue\nFROM [Order Details] od\nJOIN products p ON od.ProductID = p.ProductID\nGROUP BY p.CategoryID\nORDER BY TotalRevenue ASC\nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to visualize the total sales revenue by the lowest product category\nfig = px.bar(df, x='CategoryID', y='TotalRevenue', title='Lowest Total Sales Revenue by Product Category')\n\n# Display the chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product categories with the highest average unit price.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find the product categories with the highest average unit price\nsql_query = \"\"\"\nSELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice\nFROM products\nGROUP BY CategoryID\nORDER BY AverageUnitPrice DESC;\n\"\"\"\n\n# Execute the SQL query\nproduct_categories_df = execute_sql_query(sql_query)\n\n# Display the resulting dataframe to the user\nshow_to_user(product_categories_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders included products with a discount of more than 10%?",
        "output": "```python\nsql_query = \"\"\"\nSELECT COUNT(*) as order_count\nFROM orders o\nJOIN [Order Details] od ON o.OrderID = od.OrderID\nWHERE od.Discount > 0.1;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df['order_count'][0])\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance ranking of products based on sales quantity?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity\nFROM [Order Details] od\nJOIN products p ON od.ProductID = p.ProductID\nGROUP BY p.ProductID, p.ProductName\nORDER BY TotalQuantity DESC;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Ensure that the DataFrame is sorted by TotalQuantity in descending order\ndf = df.sort_values(by='TotalQuantity', ascending=False)\n\n# Display the result\nshow_to_user(df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the orders grouped by required dates and their total freight costs.",
        "output": "```python\nimport pandas as pd\n\n# SQL query\nsql_query = \"SELECT RequiredDate, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY RequiredDate;\"\n\n# Execute query and retrieve dataframe\ndf = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the month-over-month growth rate of total sales for December 2023, including a line chart to illustrate trends over the months.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL query to get relevant data\nsql_query = \"\"\"\nSELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS OrderMonth,\n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales\nFROM orders o\nJOIN [Order Details] od ON o.OrderID = od.OrderID\nWHERE DATE_FORMAT(o.OrderDate, '%Y-%m') IN ('2023-11', '2023-12')\nGROUP BY OrderMonth\nORDER BY OrderMonth;\n\"\"\"\n\n# Execute the SQL query and store the result in a dataframe\nsales_data = execute_sql_query(sql_query)\n\n# Calculate Month-over-Month Growth Rate\nsales_data['MoM_GrowthRate'] = sales_data['TotalSales'].pct_change()\n\n# Extract December 2023 Growth Rate\ndecember_growth_rate = sales_data[sales_data['OrderMonth'] == '2023-12']['MoM_GrowthRate'].values[0]\n\n# Plotting the trend line chart for Total Sales\nfig = px.line(\n    sales_data,\n    x='OrderMonth',\n    y='TotalSales',\n    title='Total Sales Trend (Nov - Dec 2023)',\n    labels={'TotalSales': 'Total Sales ($)', 'OrderMonth': 'Month'}\n)\n\n# Display the plot\nshow_to_user(fig)\n\n# Display the December Growth Rate\nshow_to_user(pd.DataFrame({'December 2023 MoM Growth Rate': [december_growth_rate]}))\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How does the average unit price of products vary across categories, using a bar chart to visualize differences?",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT products.CategoryID, AVG(products.UnitPrice) AS AverageUnitPrice\nFROM products\nGROUP BY products.CategoryID;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart\nfig = px.bar(df, x='CategoryID', y='AverageUnitPrice', title=\"Average Unit Price Across Categories\")\n\n# Show the result\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping city for the current year?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to retrieve the most common shipping city for the current year\nsql_query = \"\"\"\nSELECT ShipCity, COUNT(*) AS OrderCount \nFROM orders \nWHERE YEAR(OrderDate) = YEAR(CURDATE()) \nGROUP BY ShipCity \nORDER BY OrderCount DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query and get the result in a pandas dataframe\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a reorder level of zero?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT COUNT(*) AS ZeroReorderProducts FROM products WHERE ReorderLevel = 0\"\n\n# Execute the SQL query and get the result as a pandas dataframe\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df['ZeroReorderProducts'].iloc[0])\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated by each product, visualized with a bar chart for comparison?",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query\nsql_query = \"\"\"\nSELECT p.ProductID, \n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue \nFROM [Order Details] od \nINNER JOIN products p ON od.ProductID = p.ProductID \nGROUP BY p.ProductID;\n\"\"\"\n\n# Execute the SQL query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='ProductID', y='TotalRevenue', title='Total Revenue by Product')\n\n# Show the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the total quantity sold for each product, excluding discontinued products.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold \nFROM products \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nWHERE products.Discontinued = 0 \nGROUP BY products.ProductID, products.ProductName;\n\"\"\"\n\n# Execute SQL query and retrieve data into a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Show the results to the user\nshow_to_user(df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the average discount applied across all products.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to determine the average discount\nsql_query = \"SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Extract the average discount value from the dataframe\naverage_discount = result_df['AverageDiscount'].iloc[0]\n\n# Display the result to the user\nshow_to_user(pd.DataFrame({'Average Discount': [average_discount]}))\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed each month in the last year, using a bar chart to show trends over time?",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount \nFROM orders \nWHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) \nGROUP BY Month \nORDER BY Month;\n\"\"\"\n\n# Execute the SQL query\norders_df = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(orders_df, x='Month', y='OrderCount', title='Number of Orders Placed Each Month in the Last Year')\n\n# Display the chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the count of products in each category, supplied by supplier.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the count of products in each category, supplied by supplier\nsql_query = \"\"\"\nSELECT s.SupplierID, s.CompanyName, p.CategoryID, COUNT(p.ProductID) AS ProductCount \nFROM suppliers s \nJOIN products p ON s.SupplierID = p.SupplierID \nGROUP BY s.SupplierID, s.CompanyName, p.CategoryID;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for March 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define SQL Query to get order dates and shipped dates\nsql_query = \"\"\"\nSELECT o.ShippedDate, o.OrderDate\nFROM orders o\nWHERE o.OrderDate BETWEEN '2023-03-01' AND '2023-03-31';\n\"\"\"\n\n# Execute SQL Query\ndf = execute_sql_query(sql_query)\n\n# Calculate the average fulfillment time\ndf['ShippedDate'] = pd.to_datetime(df['ShippedDate'])\ndf['OrderDate'] = pd.to_datetime(df['OrderDate'])\ndf['FulfillmentTime'] = (df['ShippedDate'] - df['OrderDate']).dt.days\naverage_fulfillment_time = df['FulfillmentTime'].mean()\n\n# Display result\nshow_to_user(pd.DataFrame({'AverageFulfillmentTime': [average_fulfillment_time]}))\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 3 suppliers based on the total sales value of their products, using a bar chart for visualization.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the top 3 suppliers by total sales value\nsql_query = \"\"\"\nSELECT SupplierID, SUM([Order Details].UnitPrice * Quantity) AS TotalSalesValue \nFROM products \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nGROUP BY SupplierID \nORDER BY TotalSalesValue DESC \nLIMIT 3;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart visualization\nfig = px.bar(df, x='SupplierID', y='TotalSalesValue', title='Top 3 Suppliers by Total Sales Value')\n\n# Display the result\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products that need reordering.",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to find products that need reordering\nsql_query = \"SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;\"\n\n# Execute the query\ndf = execute_sql_query(sql_query)\n\n# Display the filtered result to the user; ensure only the 'ProductName' column is shown\nshow_to_user(df['ProductName'])\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time by month for 2023, visualized with a line chart to show changes over time?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month,\nAVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time\nFROM orders\nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY month\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Convert 'month' column to datetime\ndf['month'] = pd.to_datetime(df['month'])\n\n# Create a line chart\nfig = px.line(df, x='month', y='avg_fulfillment_time', title='Average Order Fulfillment Time by Month for 2023')\n\n# Show the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have less than 10 units in stock?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductName, UnitsInStock FROM products WHERE UnitsInStock < 10;\"\n\n# Execute the SQL query and retrieve the data\nproducts_df = execute_sql_query(sql_query)\n\n# Display the resulting dataframe to the user\nshow_to_user(products_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee processed the most orders?",
        "output": "```python\nimport pandas as pd\n\n# SQL query\nsql_query = \"\"\"\nSELECT EmployeeID, COUNT(OrderID) AS TotalOrders \nFROM orders \nGROUP BY EmployeeID \nORDER BY TotalOrders DESC \nLIMIT 1;\n\"\"\"\n\n# Execute SQL query\norder_data = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(order_data)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customer with the most late shipments.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT c.CustomerID, COUNT(o.OrderID) AS LateOrderCount \nFROM customers c \nJOIN orders o ON c.CustomerID = o.CustomerID \nWHERE o.RequiredDate < o.ShippedDate \nGROUP BY c.CustomerID \nORDER BY LateOrderCount DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the orders placed in the last 30 days and their total freight cost.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find orders in the last 30 days\nsql_query = \"\"\"\nSELECT o.OrderID, o.OrderDate, o.ShippedDate, o.Freight \nFROM orders o \nWHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);\n\"\"\"\n\n# Execute the SQL query\norders_df = execute_sql_query(sql_query)\n\n# Calculate the total freight cost\ntotal_freight_cost = orders_df['Freight'].sum()\n\n# Prepare the result dataframe\nresult_df = pd.DataFrame({\n    'Total Freight Cost': [total_freight_cost]\n})\n\n# Show the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the number of discontinued products.",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to determine the number of discontinued products\nsql_query = \"SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;\"\n\n# Execute the query using the provided utility function\nresult_df = execute_sql_query(sql_query)\n\n# Extract the count value from the dataframe\ndiscontinued_count = result_df.iloc[0]['DiscontinuedProducts']\n\n# Display the result to the user\nshow_to_user(discontinued_count)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order per month? Include a visualization to show trends over time.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost \nFROM orders \nGROUP BY Month;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Ensure the 'Month' column is sorted correctly\ndf['Month'] = pd.to_datetime(df['Month'])\n\n# Sort the dataframe by the 'Month' column\ndf = df.sort_values('Month')\n\n# Create a line plot for average shipping cost per month\nfig = px.line(df, x='Month', y='AvgShippingCost', title='Average Shipping Cost per Order per Month')\n\n# Show the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find out how many orders each employee managed in a specific date range. Visualize the employee performance comparison.",
        "output": "```python\nimport plotly.express as px\n\n# Define the date range\nstart_date = '2023-01-01'\nend_date = '2023-12-31'\n\n# Create the SQL query\nsql_query = f\"\"\"\nSELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount\nFROM employees e\nJOIN orders o ON e.EmployeeID = o.EmployeeID\nWHERE o.OrderDate BETWEEN '{start_date}' AND '{end_date}'\nGROUP BY e.EmployeeID;\n\"\"\"\n\n# Execute the SQL query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='EmployeeID', y='OrderCount', title='Employee Order Management Performance')\n\n# Show the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been discontinued?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductName FROM products WHERE Discontinued = 1;\"\n\n# Execute the SQL query to get the discontinued products\ndiscontinued_products_df = execute_sql_query(sql_query)\n\n# Use the utility function to display the data to the user\nshow_to_user(discontinued_products_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly inventory turnover ratio? Use a visualization to highlight changes over time.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT DATEPART(month, OrderDate) AS Month, \n       SUM(OD.Quantity * OD.UnitPrice) / AVG(P.UnitsInStock) AS InventoryTurnoverRatio \nFROM [Order Details] OD \nJOIN products P ON OD.ProductID = P.ProductID \nGROUP BY DATEPART(month, OrderDate);\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Ensure Month is treated as categorical for correct plotting\ndf['Month'] = df['Month'].astype(str)\n\n# Sort the dataframe by Month to ensure correct plotting\ndf = df.sort_values(by='Month')\n\n# Visualize the data\nfig = px.line(df, x='Month', y='InventoryTurnoverRatio', title='Monthly Inventory Turnover Ratio')\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are associated with the highest total order quantities? Visualize the top products by order quantity.",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query\nsql_query = \"\"\"\nSELECT p.ProductName, SUM(od.Quantity) AS TotalOrderedQuantity \nFROM products p \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nGROUP BY p.ProductID, p.ProductName \nORDER BY TotalOrderedQuantity DESC;\n\"\"\"\ndata = execute_sql_query(sql_query)\n\n# Visualize the top products by order quantity\nfig = px.bar(data, x='ProductName', y='TotalOrderedQuantity', title='Top Products by Order Quantity')\n\n# Display the figure to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names of products that are currently discontinued?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find product names that are discontinued\nsql_query = \"SELECT ProductName FROM products WHERE Discontinued = 1;\"\n\n# Execute the SQL query\ndiscontinued_products_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(discontinued_products_df[['ProductName']])\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for all orders made in the year 2022?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the total freight cost for orders made in 2022\nsql_query = \"\"\"\nSELECT SUM(Freight) AS TotalFreightCost \nFROM orders \nWHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31';\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# As result_df will have a single value DataFrame, extract the value\ntotal_freight_cost = result_df['TotalFreightCost'].iloc[0]\n\n# Display the result to the user\nshow_to_user(total_freight_cost)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in each month? Include a line chart to show monthly revenue trends.",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, \nSUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY month;\n\"\"\"\n\n# Execute SQL Query\ndf = execute_sql_query(sql_query)\n\n# Ensure the month column is treated as a string for proper line chart visualization\ndf['month'] = df['month'].astype(str)\n\n# Create Line Chart\nfig = px.line(df, x='month', y='TotalSales', title='Monthly Sales Revenue Trends')\n\n# Show the result to user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the CustomerID and the total number of orders for each customer who has ordered more than 10 times.",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to retrieve the data\nsql_query = \"\"\"\nSELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count\nFROM customers\nINNER JOIN orders ON customers.CustomerID = orders.CustomerID\nGROUP BY customers.CustomerID\nHAVING COUNT(orders.OrderID) > 10\n\"\"\"\n\n# Execute the SQL query and store the result in a dataframe\ncustomer_orders_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(customer_orders_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped over a week late in August 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to find the number of late orders in August 2023\nsql_query = \"\"\"\nSELECT COUNT(OrderID) AS LateOrders\nFROM orders\nWHERE DATEDIFF(ShippedDate, RequiredDate) > 7\nAND OrderDate BETWEEN '2023-08-01' AND '2023-08-31';\n\"\"\"\n\n# Execute the SQL query and get result in a dataframe\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nlate_orders_count = df.iloc[0]['LateOrders'] if not df.empty else 0\nshow_to_user(pd.DataFrame({'Late Orders in August 2023': [late_orders_count]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee achieved the highest sales in 2022? Use a visualization for employee sales comparison.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL query to fetch employee sales data for 2022\nsql_query = \"\"\"\nSELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales\nFROM orders o\nJOIN [Order Details] od ON o.OrderID = od.OrderID\nWHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY o.EmployeeID\nORDER BY TotalSales DESC;\n\"\"\"\n\n# Execute the SQL query\nsales_data = execute_sql_query(sql_query)\n\n# Get the employee with the highest sales\ntop_employee = sales_data.iloc[0]\n\n# Visualize the employee sales comparison using a bar chart\nfig = px.bar(sales_data, x='EmployeeID', y='TotalSales', title='Employee Sales Comparison 2022')\n\n# Display the visualization result\nshow_to_user(fig)\n\n# Display the top employee with the highest sales\nshow_to_user(top_employee)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products? Include a bar chart to show sales figures.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get top 5 best-selling products\nsql_query = \"\"\"\nSELECT p.ProductName, SUM(od.Quantity) AS TotalSales \nFROM products p \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nGROUP BY p.ProductName \nORDER BY TotalSales DESC \nLIMIT 5;\n\"\"\"\n\n# Execute the SQL query and get the dataframe\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to show sales figures\nfig = px.bar(df, x='ProductName', y='TotalSales', title='Top 5 Best-Selling Products')\n\n# Display the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a discount applied in more than 10 orders?",
        "output": "```python\nimport pandas as pd\n\n# SQL query\nsql_query = \"\"\"\nSELECT p.ProductName, COUNT(*) AS OrderCount \nFROM products p \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nWHERE od.Discount > 0.0 \nGROUP BY p.ProductName \nHAVING COUNT(*) > 10;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for June 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL query\nsql_query = \"\"\"\nSELECT \n    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / \n    COUNT(DISTINCT orders.OrderID) AS avg_order_value \nFROM \n    [Order Details] \nJOIN \n    orders ON [Order Details].OrderID = orders.OrderID \nWHERE \n    orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Extracting average order value\navg_order_value = df['avg_order_value'].iloc[0]\n\n# Display the result\nshow_to_user(avg_order_value)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average value of orders placed in January 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(df['avg_order_value'].iloc[0])\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers along with their total spent amounts, ordered by highest to lowest total spent. Use a bar chart to visualize spending.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpent \nFROM customers c \nJOIN orders o ON c.CustomerID = o.CustomerID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY c.CustomerID \nORDER BY TotalSpent DESC;\n\"\"\"\n\n# Execute the query using the provided utility function\ndataframe = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(dataframe, x='CustomerID', y='TotalSpent', title='Total Spent by Customer', labels={'TotalSpent': 'Total Spent', 'CustomerID': 'Customer ID'})\n\n# Display the result\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for Q1 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to retrieve necessary data\nsql_query = \"\"\"\nSELECT\n    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value\nFROM [Order Details]\nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'\n\"\"\"\n\n# Execute the SQL query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Extracting the average order value from the dataframe\navg_order_value = df['avg_order_value'][0]\n\n# Display the average order value to the user\nshow_to_user(avg_order_value)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List orders where the shipping cost was above average.",
        "output": "```python\nimport pandas as pd\n\n# Execute the SQL query to get the average freight value\navg_freight_query = \"SELECT AVG(Freight) AS average_freight FROM orders\"\navg_freight_df = execute_sql_query(avg_freight_query)\naverage_freight = avg_freight_df.iloc[0]['average_freight']\n\n# Query to get orders where the shipping cost is above average\nabove_avg_orders_query = f\"SELECT * FROM orders WHERE Freight > {average_freight}\"\nabove_avg_orders_df = execute_sql_query(above_avg_orders_query)\n\n# Display the result to the user\nshow_to_user(above_avg_orders_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to Europe?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT AVG(Freight) AS AverageFreightCost \nFROM orders \nWHERE ShipCountry IN ('Austria', 'Belgium', 'Denmark', 'Finland', 'France', 'Germany', 'Greece', 'Ireland', 'Italy', \n'Netherlands', 'Norway', 'Poland', 'Portugal', 'Spain', 'Sweden', 'Switzerland', 'United Kingdom')\n\"\"\"\n\n# Execute the SQL query and retrieve the data\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees by title and visualize the distribution?",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query to get the average salary by title\nsql_query = \"SELECT Title, AVG(Salary) AS AvgSalary FROM employees GROUP BY Title;\"\ndf = execute_sql_query(sql_query)\n\n# Create and show the visualization of the salary distribution by title\nfig = px.bar(df, x='Title', y='AvgSalary', title='Average Salary by Title', labels={'AvgSalary':'Average Salary'})\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Visualize the total number of orders for each product.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT p.ProductName, COUNT(od.OrderID) AS OrderCount\nFROM products p\nJOIN [Order Details] od ON p.ProductID = od.ProductID\nGROUP BY p.ProductName;\n\"\"\"\n\n# Execute the SQL query\ndata = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(data, x='ProductName', y='OrderCount', title='Total Number of Orders for Each Product')\n\n# Display the visualization\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 products with the highest unit price.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the top 5 products with the highest unit price\nsql_query = \"SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Visualize the total freight cost for each shipping company in 2023.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT shippers.CompanyName, SUM(orders.Freight) AS total_freight_cost\nFROM orders\nJOIN shippers ON orders.ShipVia = shippers.ShipperID\nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY shippers.CompanyName\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar plot of total freight cost for each shipping company\nfig = px.bar(df, x='CompanyName', y='total_freight_cost', title='Total Freight Cost by Shipping Company in 2023')\n\n# Display the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders that were shipped within 3 days of being placed?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query to execute\nsql_query = \"\"\"\nSELECT OrderDate, ShippedDate FROM orders;\n\"\"\"\n\n# Execute the SQL query to retrieve data\norders_df = execute_sql_query(sql_query)\n\n# Calculate the number of orders shipped within 3 days\norders_df['DaysToShip'] = (orders_df['ShippedDate'] - orders_df['OrderDate']).dt.days\nwithin_three_days_count = orders_df[orders_df['DaysToShip'] <= 3].shape[0]\n\n# Calculate the total number of orders\ntotal_orders_count = orders_df.shape[0]\n\n# Calculate the percentage\npercentage_within_three_days = (within_three_days_count / total_orders_count) * 100\n\n# Prepare the results as a dataframe\nresult_df = pd.DataFrame({\n    \"Percentage of Orders Shipped Within Three Days\": [percentage_within_three_days]\n})\n\n# Show the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered with a discount?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find products ordered with a discount\nsql_query = \"\"\"\nSELECT DISTINCT p.ProductName \nFROM products p \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nWHERE od.Discount > 0;\n\"\"\"\n\n# Execute the query\ndiscounted_products_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(discounted_products_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped via each shipping method per month and illustrate the trend?",
        "output": "```python\nimport plotly.express as px\nimport pandas as pd\n\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ShipVia, COUNT(OrderID) AS OrdersShipped \nFROM orders \nGROUP BY Month, ShipVia;\n\"\"\"\n\n# Execute the SQL query\norders_data = execute_sql_query(sql_query)\n\n# Pivot the data to have shipping methods in separate columns\npivoted_data = orders_data.pivot(index='Month', columns='ShipVia', values='OrdersShipped').reset_index()\n\n# Create a line plot\nfig = px.line(pivoted_data, x='Month', y=pivoted_data.columns[1:], title='Orders Shipped via Each Method per Month',\n              labels={'value': 'Orders Shipped', 'variable': 'Shipping Method'}, markers=True)\n\n# Show the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Visualize the total number of products supplied by each supplier.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"SELECT SupplierID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY SupplierID;\"\n\n# Execute SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart with plotly\nfig = px.bar(df, x='SupplierID', y='TotalProducts', title='Total Products Supplied by Each Supplier')\n\n# Show the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;\"\n\n# Execute the SQL query\nproducts_to_reorder_df = execute_sql_query(sql_query)\n\n# Display the products that need to be reordered\nshow_to_user(products_to_reorder_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Visualize which products have the highest total sales volume in quantity.",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query\nsql_query = \"\"\"\nSELECT p.ProductName, SUM(od.Quantity) AS TotalSalesQuantity \nFROM [Order Details] od \nJOIN products p ON od.ProductID = p.ProductID \nGROUP BY p.ProductName \nORDER BY TotalSalesQuantity DESC;\n\"\"\"\n\n# Execute the query\ndata = execute_sql_query(sql_query)\n\n# Plot\nfig = px.bar(data, x='ProductName', y='TotalSalesQuantity', \n             title='Products with Highest Total Sales Volume in Quantity')\n\n# Show the plot\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Visualize how many orders were placed and fulfilled in each month of 2023.",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, \n       COUNT(orders.OrderID) AS orders_placed, \n       COUNT(CASE WHEN orders.ShippedDate IS NOT NULL THEN 1 END) AS orders_fulfilled \nFROM orders \nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' \nGROUP BY month \nORDER BY month\n\"\"\"\n\n# Execute the SQL query and retrieve data\ndf = execute_sql_query(sql_query)\n\n# Visualize the data\nfig = px.bar(df, x='month', y=['orders_placed', 'orders_fulfilled'], \n             labels={'value': 'Number of Orders', 'variable': 'Order Type'}, \n             title='Orders Placed and Fulfilled in 2023',\n             barmode='group')\n\n# Show the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What was the total sales revenue generated in the year 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to calculate total sales revenue for the year 2023\nsql_query = \"\"\"\nSELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales\nFROM [Order Details]\nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\n\"\"\"\n\n# Execute the SQL query\nsales_data_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(sales_data_df)\n```\n",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier supplies the highest number of different products?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount \nFROM products \nGROUP BY SupplierID \nORDER BY ProductCount DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query and retrieve the data\nresult_df = execute_sql_query(sql_query)\n\n# Ensure column names are correct and display the result to the user\nresult_df.columns = ['SupplierID', 'ProductCount']\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT AVG(orders.Freight) AS shipping_cost_per_order\nFROM orders\nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\n\"\"\"\n\n# Execute the SQL query\nshipping_cost_df = execute_sql_query(sql_query)\n\n# Ensure that only the average cost is presented\naverage_cost = shipping_cost_df.iloc[0]['shipping_cost_per_order']\n\n# Convert the average cost to a DataFrame\nresult_df = pd.DataFrame({'shipping_cost_per_order': [average_cost]})\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total value of orders shipped in the first quarter of 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT QUARTER(o.OrderDate) AS OrderQuarter, \nSUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue \nFROM orders o \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nWHERE YEAR(o.OrderDate) = 2023 \nGROUP BY OrderQuarter;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Filter for the first quarter and retrieve total value\ntotal_value_q1 = df[df['OrderQuarter'] == 1]['TotalValue'].values[0]\n\n# Prepare the result for display\nresult = pd.DataFrame({\n    'OrderQuarter': [1],\n    'TotalValue': [total_value_q1]\n})\n\n# Display the result\nshow_to_user(result)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Retention Rate for the last 6 months?",
        "output": "```python\nimport pandas as pd\n\n# Retrieve customer count for the last 6 months\nsql_query_recent = \"\"\"\nSELECT COUNT(DISTINCT orders.CustomerID) AS customer_count_recent \nFROM orders \nWHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE();\n\"\"\"\nrecent_data = execute_sql_query(sql_query_recent)\nrecent_customers = recent_data['customer_count_recent'].iloc[0]\n\n# Retrieve total customer count for comparison for customer retention\nsql_query_previous = \"\"\"\nSELECT COUNT(DISTINCT orders.CustomerID) AS customer_population_before \nFROM orders \nWHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 12 MONTH) AND DATE_SUB(CURDATE(), INTERVAL 6 MONTH);\n\"\"\"\nprevious_data = execute_sql_query(sql_query_previous)\nprevious_customers = previous_data['customer_population_before'].iloc[0]\n\n# Calculate Customer Retention Rate\ncustomer_retention_rate = recent_customers / previous_customers if previous_customers != 0 else 0\n\n# Create a DataFrame to display\nretention_df = pd.DataFrame({\n    'CustomerRetentionRate': [customer_retention_rate]\n})\n\n# Use utility function to show the result\nshow_to_user(retention_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the most common job title among the employees?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the most common job title\nsql_query = \"\"\"\nSELECT Title, COUNT(*) AS TitleCount\nFROM employees\nGROUP BY Title\nORDER BY TitleCount DESC\nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query and get the result as a pandas dataframe\njob_title_df = execute_sql_query(sql_query)\n\n# Extract the most common job title and display it to the user\nmost_common_title = job_title_df.iloc[0]['Title']\nshow_to_user(most_common_title)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the difference in days between the hire date and the birthdate of employees.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get employee data\nsql_query = \"\"\"\nSELECT EmployeeID, HireDate, BirthDate FROM employees;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Calculate the difference in days between hire date and birth date\ndf['HireDate'] = pd.to_datetime(df['HireDate'])\ndf['BirthDate'] = pd.to_datetime(df['BirthDate'])\ndf['DaysDifference'] = (df['HireDate'] - df['BirthDate']).dt.days\n\n# Select necessary columns\nresult_df = df[['EmployeeID', 'DaysDifference']]\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products are discontinued?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find the number of discontinued products\nsql_query = \"SELECT COUNT(*) AS discontinued_products FROM products WHERE products.Discontinued = 1\"\n\n# Execute the SQL query\ndiscontinued_products_df = execute_sql_query(sql_query)\n\n# Extract the count of discontinued products\ndiscontinued_products_count = discontinued_products_df.iloc[0]['discontinued_products']\n\n# Display the result\nshow_to_user(discontinued_products_count)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders that took more than 10 days to fulfill in 2021.",
        "output": "```python\nimport pandas as pd\n\n# Define SQL query\nsql_query = \"\"\"\nSELECT OrderID \nFROM orders \nWHERE YEAR(OrderDate) = 2021 \nAND DATEDIFF(ShippedDate, OrderDate) > 10;\n\"\"\"\n\n# Execute the SQL query\norders_df = execute_sql_query(sql_query)\n\n# Show the results to the user\nshow_to_user(orders_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the total sales revenue generated each month in the year 2022? Please include a time series chart to visualize monthly trends.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query as provided\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * \n           (1 - [Order Details].Discount)) AS TotalSales \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nWHERE YEAR(OrderDate) = 2022 \nGROUP BY DATE_FORMAT(OrderDate, '%Y-%m');\n\"\"\"\n\n# Execute the SQL query\nsales_data = execute_sql_query(sql_query)\n\n# Convert 'Month' column to a datetime object for sorting\nsales_data['Month'] = pd.to_datetime(sales_data['Month'])\n\n# Sort the dataframe by 'Month'\nsales_data = sales_data.sort_values(by='Month')\n\n# Create the time series chart\nfig = px.line(sales_data, x='Month', y='TotalSales', title='Monthly Sales Revenue for 2022')\n\n# Display the result\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the total sales revenue for the month of January 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM orders o \nJOIN `Order Details` od ON o.OrderID = od.OrderID \nWHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-01';\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Extract the total sales value\ntotal_sales = result_df.iloc[0, 0]\n\n# Display the result\nshow_to_user(pd.DataFrame({'TotalSales': [total_sales]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for orders placed between January 1, 2023, and December 31, 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT \n    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value\nFROM \n    [Order Details]\nJOIN \n    orders ON [Order Details].OrderID = orders.OrderID\nWHERE \n    orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\n\"\"\"\n\n# Execute the SQL query and retrieve the data in a pandas dataframe\nresult_df = execute_sql_query(sql_query)\n\n# Extract the average order value\navg_order_value = result_df['avg_order_value'].iloc[0]\n\n# Display the result to the user\nshow_to_user(avg_order_value)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has received the highest number of orders?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find the city with the highest number of orders\nsql_query = \"\"\"\nSELECT ShipCity, COUNT(OrderID) as TotalOrders \nFROM orders \nGROUP BY ShipCity \nORDER BY TotalOrders DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category has the highest total sales in 2023? Use a bar chart to visualize sales by category.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get total sales by product category in 2023\nsql_query = \"\"\"\nSELECT categories.CategoryName, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nJOIN categories ON products.CategoryID = categories.CategoryID \nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' \nGROUP BY categories.CategoryName \nORDER BY total_sales DESC\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='CategoryName', y='total_sales', title='Total Sales by Product Category in 2023')\n\n# Show the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average reorder level across all products?",
        "output": "```python\nsql_query = \"SELECT AVG(ReorderLevel) AS AverageReorderLevel FROM products;\"\nresult_df = execute_sql_query(sql_query)\naverage_reorder_level = result_df['AverageReorderLevel'].iloc[0]\nshow_to_user(average_reorder_level)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value of products currently in stock?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT SUM(UnitsInStock * UnitPrice) AS TotalInventoryValue FROM products;\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Extract the total inventory value from the dataframe\ntotal_inventory_value = df.loc[0, 'TotalInventoryValue']\n\n# Prepare a dataframe to display\nresult_df = pd.DataFrame({'TotalInventoryValue': [total_inventory_value]})\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average quantity of products ordered per order.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT AVG(Quantity) AS AverageQuantity FROM [Order Details];\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders shipped within the same country as the customer?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the number of orders shipped within the same country as the customer\nsql_query_same_country = \"\"\"\nSELECT COUNT(*) as count_same_country \nFROM orders o \nJOIN customers c ON o.CustomerID = c.CustomerID \nWHERE o.ShipCountry = c.Country;\n\"\"\"\n\n# SQL query to get the total number of orders\nsql_query_total_orders = \"\"\"\nSELECT COUNT(*) as total_orders \nFROM orders;\n\"\"\"\n\n# Execute the SQL queries\nresult_same_country = execute_sql_query(sql_query_same_country)\nresult_total_orders = execute_sql_query(sql_query_total_orders)\n\n# Calculate the percentage of orders shipped within the same country\npercentage_same_country = (result_same_country['count_same_country'][0] / result_total_orders['total_orders'][0]) * 100\n\n# Prepare the result for display\nresult_df = pd.DataFrame({'percent_same_country': [percentage_same_country]})\n\n# Use the show_to_user function to display the result\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who were hired this year.",
        "output": "```python\nfrom datetime import datetime\nimport pandas as pd\n\n# Construct the SQL query\ncurrent_year = datetime.now().year\nsql_query = f\"SELECT * FROM employees WHERE YEAR(HireDate) = {current_year};\"\n\n# Execute the SQL query and retrieve data\nemployees_hired_this_year = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(employees_hired_this_year)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated each year? Visualize the trends with a line graph.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT EXTRACT(YEAR FROM OrderDate) AS Year, \nSUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS YearlyRevenue \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY Year \nORDER BY Year;\n\"\"\"\n\n# Execute the SQL query\ndataframe = execute_sql_query(sql_query)\n\n# Create a line graph using Plotly\nfig = px.line(dataframe, x='Year', y='YearlyRevenue', title='Total Revenue Generated Each Year', labels={'YearlyRevenue': 'Revenue'})\n\n# Show the figure to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total quantity ordered for each product. Use a bar chart for better visualization.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"SELECT ProductID, SUM(Quantity) AS total_quantity FROM [Order Details] GROUP BY ProductID;\"\n\n# Execute the SQL query using the provided utility function\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='ProductID', y='total_quantity', title='Total Quantity Ordered by Product')\n\n# Display the figure to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders have been placed by customers in Germany in the year 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to fetch order count\nsql_query = \"\"\"\nSELECT COUNT(o.OrderID) as OrderCount \nFROM orders o \nJOIN customers c ON o.CustomerID = c.CustomerID \nWHERE c.Country = 'Germany' \nAND o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\n\"\"\"\n\n# Execute the SQL query\norder_count_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(order_count_df['OrderCount'][0])\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average age of employees.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT BirthDate FROM employees;\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Calculate the average age\ndf['Age'] = (pd.to_datetime('today') - pd.to_datetime(df['BirthDate'])) / pd.Timedelta(days=365.25)\navg_age = df['Age'].mean()\n\n# Display the result to the user\nshow_to_user(pd.DataFrame({'AvgAge': [avg_age]}))\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given on orders placed in 2022?",
        "output": "```python\nimport pandas as pd\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Extract total_discount from the dataframe\ntotal_discount = result_df['total_discount'].iloc[0]\n\n# Show the result to the user\nshow_to_user(total_discount)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer region had the highest average order fulfillment time in the past month? Include a heat map for regional comparison.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime \nFROM orders \nWHERE OrderDate >= CURDATE() - INTERVAL 1 MONTH \nGROUP BY ShipRegion \nORDER BY AvgFulfillmentTime DESC;\n\"\"\"\n\n# Execute SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a heat map for regional comparison\nfig = px.density_heatmap(df, x='ShipRegion', y='AvgFulfillmentTime', \n                         z='AvgFulfillmentTime',\n                         color_continuous_scale='Viridis', \n                         title='Average Order Fulfillment Time by Region')\n\n# Display the result\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average price per unit of all products?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to calculate the average price per unit of all products\nsql_query = \"SELECT AVG(UnitPrice) AS AveragePrice FROM products;\"\n\n# Execute the SQL query and get the result in a dataframe\ndf = execute_sql_query(sql_query)\n\n# Display the average price to the user\naverage_price = df.at[0, 'AveragePrice']\nshow_to_user(pd.DataFrame({'Average Price': [average_price]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average order value for each customer. Use a histogram to visualize the distribution.",
        "output": "```python\nimport plotly.express as px\n\n# Define SQL query\nsql_query = \"\"\"\nSELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) as average_order_value \nFROM customers c \nJOIN orders o ON c.CustomerID = o.CustomerID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY c.CustomerID;\n\"\"\"\n\n# Execute SQL query to get data\ndf = execute_sql_query(sql_query)\n\n# Create histogram to visualize distribution of average order value\nfig = px.histogram(df, x='average_order_value', nbins=30, title=\"Distribution of Average Order Value per Customer\")\n\n# Display the plot\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for the month of April 2023? Visualize the results with a pie chart.",
        "output": "```python\nimport plotly.express as px\n\n# The SQL query to get the on-time delivery rate\nsql_query = \"\"\"\nSELECT COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate \nFROM orders \nWHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30'\n\"\"\"\n\n# Execute the SQL query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Extract the on-time delivery rate from the dataframe\non_time_delivery_rate = df.loc[0, 'on_time_delivery_rate']\n\n# Create a pie chart to visualize the on-time delivery rate\ndata = {'On-Time': on_time_delivery_rate, 'Late': 1 - on_time_delivery_rate}\nlabels = list(data.keys())\nvalues = list(data.values())\n\nfig = px.pie(names=labels, values=values, title=\"On-Time Delivery Rate for April 2023\")\n\n# Show the pie chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for each month in 2023? Represent findings using a line chart to observe trends over the months.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, \nCOUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE NULL END) * 1.0 / COUNT(*) AS on_time_delivery_rate \nFROM orders \nWHERE YEAR(OrderDate) = 2023 \nGROUP BY month;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Sort the dataframe by month to ensure correct order in the plot\ndf['month'] = pd.to_datetime(df['month'], format='%Y-%m')\ndf = df.sort_values(by='month')\n\n# Create a line chart to represent on-time delivery rate over the months\nfig = px.line(df, x='month', y='on_time_delivery_rate', title='On-Time Delivery Rate for Each Month in 2023', labels={'on_time_delivery_rate': 'On-Time Delivery Rate', 'month': 'Month'})\n\n# Display the plot\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Visualize the total number of units on order for each product in 2022 using a bar chart to compare across products.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT products.ProductID, SUM([Order Details].UnitsOnOrder) AS units_on_order\nFROM products\nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID\nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY products.ProductID\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart\nfig = px.bar(df, x='ProductID', y='units_on_order', title='Units on Order for Each Product in 2022', labels={'units_on_order':'Units on Order'})\n\n# Show the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and prices of products that have less than 20 units in stock?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock < 20;\"\n\n# Execute the query and retrieve the results in a dataframe\nproducts_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(products_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total quantity of products sold per product category. Use a pie chart to display the proportion of sales across categories.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to calculate total quantity sold per product category\nsql_query = '''\nSELECT CategoryID, SUM([Order Details].Quantity) AS TotalQuantity \nFROM products \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nGROUP BY CategoryID\n'''\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a pie chart\nfig = px.pie(df, names='CategoryID', values='TotalQuantity', title='Total Quantity Sold per Product Category')\n\n# Display the chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders that were shipped to Germany.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT * FROM orders WHERE ShipCountry = 'Germany';\"\n\n# Execute the query and get the data\norders_to_germany_df = execute_sql_query(sql_query)\n\n# Show the data to the user\nshow_to_user(orders_to_germany_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 3 employees based on total sales generated? Use a bar chart to compare their performance.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY e.EmployeeID \nORDER BY TotalSales DESC \nLIMIT 3;\n\"\"\"\n\n# Execute the SQL query to get the data\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to visualize the top 3 employees by total sales\nfig = px.bar(df, x='EmployeeID', y='TotalSales', title='Top 3 Employees by Total Sales')\n\n# Show the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total sales for each product? Visualize with a bar chart for easy comparison.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT products.ProductName, \n    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nGROUP BY products.ProductName;\n\"\"\"\n\n# Execute the query to get the data\ndf = execute_sql_query(sql_query)\n\n# Visualize the results with a bar chart\nfig = px.bar(df, x='ProductName', y='TotalSales', title='Total Sales per Product')\n\n# Display the result\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the orders that have not been shipped within the required date.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query to get the orders that have not been shipped within the required date\nsql_query = \"\"\"\nSELECT orders.OrderID, orders.RequiredDate, orders.ShippedDate\nFROM orders\nWHERE orders.ShippedDate IS NULL OR orders.ShippedDate > orders.RequiredDate;\n\"\"\"\n\n# Execute the query and get the result in a pandas DataFrame\norders_df = execute_sql_query(sql_query)\n\n# Use the show_to_user function to display the result\nshow_to_user(orders_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products have been discontinued?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to count discontinued products\nsql_query = \"SELECT COUNT(*) AS discontinued_count FROM products WHERE products.Discontinued = 1\"\n\n# Execute the SQL query to get the data\ndf = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(df.iloc[0])\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total units ordered for each supplier? Show with a bar chart to highlight key suppliers.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query as per the business request\nsql_query = \"\"\"\nSELECT s.SupplierID, SUM(od.Quantity) AS TotalUnitsOrdered \nFROM suppliers s \nJOIN products p ON s.SupplierID = p.SupplierID \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nGROUP BY s.SupplierID\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using Plotly\nfig = px.bar(df, x='SupplierID', y='TotalUnitsOrdered', title='Total Units Ordered for Each Supplier')\n\n# Display the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the orders that were placed but never shipped in 2022.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find orders placed but never shipped in 2022\nsql_query = \"\"\"\nSELECT OrderID FROM orders WHERE ShippedDate IS NULL AND YEAR(OrderDate) = 2022\n\"\"\"\n\n# Execute the SQL query\norders_df = execute_sql_query(sql_query)\n\n# Display the results to the user\nshow_to_user(orders_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer? Visualize using a bar chart to identify key customers.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get total revenue by customer\nsql_query = \"\"\"\nSELECT c.CustomerID, \n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue \nFROM customers c \nJOIN orders o ON c.CustomerID = o.CustomerID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY c.CustomerID;\n\"\"\"\n\n# Execute the query to get the data\nrevenue_df = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(revenue_df, x='CustomerID', y='TotalRevenue', title='Total Revenue by Customer')\n\n# Display the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in the month of January 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the total sales revenue for January 2023\nsql_query = \"\"\"\nSELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nWHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31'\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the total sales only\ntotal_sales = result_df['TotalSales'].iloc[0]\nshow_to_user(pd.DataFrame({'TotalSales': [total_sales]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of each product sold? Use a bar chart to compare quantities sold per product.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the total quantity of each product sold\nsql_query = \"\"\"\nSELECT products.ProductID, SUM([Order Details].Quantity) AS TotalQuantity \nFROM products \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nGROUP BY products.ProductID;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Ensure column names are correctly referenced\nfig = px.bar(df, x='ProductID', y='TotalQuantity', title='Total Quantity Sold per Product')\n\n# Display the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 customers by order value? Represent using a bar chart to see the top contributors.",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query\nsql_query = '''\nSELECT customers.CustomerID, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue \nFROM customers \nINNER JOIN orders ON customers.CustomerID = orders.CustomerID \nINNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY customers.CustomerID \nORDER BY TotalOrderValue DESC \nLIMIT 5;\n'''\n\n# Execute SQL Query\ndf = execute_sql_query(sql_query)\n\n# Create Bar Chart\nfig = px.bar(df, x='CustomerID', y='TotalOrderValue', title='Top 5 Customers by Order Value')\n\n# Display to User\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are in each category? Use a pie chart to show distribution across categories.",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query to get the data\nsql_query = \"SELECT CategoryID, COUNT(ProductID) AS ProductCount FROM products GROUP BY CategoryID;\"\ndf = execute_sql_query(sql_query)\n\n# Create a pie chart to show distribution across categories\nfig = px.pie(df, names='CategoryID', values='ProductCount', title='Product Distribution Across Categories')\n\n# Display the pie chart\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees who report to each manager.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT \n    Manager.LastName AS ManagerLastName, \n    Manager.FirstName AS ManagerFirstName, \n    Subordinate.LastName AS EmployeeLastName, \n    Subordinate.FirstName AS EmployeeFirstName \nFROM employees AS Subordinate \nJOIN employees AS Manager \nON Subordinate.ReportsTo = Manager.EmployeeID;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the most sales in the last year? Use a bar chart for clearer comparison.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get total sales for each employee for the last year\nsql_query = \"\"\"\nSELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nWHERE YEAR(o.OrderDate) = YEAR(CURDATE()) \nGROUP BY e.EmployeeID \nORDER BY TotalSales DESC LIMIT 1;\n\"\"\"\n\n# Execute the query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to display the sales comparison\nfig = px.bar(df, x='EmployeeID', y='TotalSales', title='Total Sales by Employee for the Last Year')\n\n# Display the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products need to be reordered soon?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to retrieve products that need to be reordered\nsql_query = \"\"\"\nSELECT ProductName\nFROM products\nWHERE UnitsInStock <= ReorderLevel;\n\"\"\"\n\n# Execute the SQL query\nreorder_products_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(reorder_products_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee handle in the first quarter of this year? Use a bar chart for easy comparison.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = '''\nSELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nWHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' \nGROUP BY e.EmployeeID;\n'''\n\n# Execute the SQL query to get the data\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='EmployeeID', y='OrderCount', title='Orders Handled by Each Employee in Q1 2023', labels={'EmployeeID':'Employee ID', 'OrderCount':'Order Count'})\n\n# Show the result\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales for each product category this year, and can it be visualized using a bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query provided\nsql_query = \"\"\"\nSELECT categories.CategoryName, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nJOIN products ON [Order Details].ProductID = products.ProductID \nJOIN categories ON products.CategoryID = categories.CategoryID \nWHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) \nGROUP BY categories.CategoryName\n\"\"\"\n\n# Execute SQL query to get the data\nsales_data_df = execute_sql_query(sql_query)\n\n# Create a bar chart\nfig = px.bar(sales_data_df, x='CategoryName', y='TotalSales', title='Total Sales for Each Product Category This Year')\n\n# Show the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the total freight cost for all orders shipped via each shipping method in 2022 and illustrate it with a pie chart.",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query to get the data\nsql_query = \"\"\"\nSELECT ShipVia, SUM(Freight) AS TotalFreight \nFROM orders \nWHERE YEAR(OrderDate) = 2022 \nGROUP BY ShipVia;\n\"\"\"\ndata = execute_sql_query(sql_query)\n\n# Create a pie chart of the total freight cost by shipping method\nfig = px.pie(data_frame=data, names='ShipVia', values='TotalFreight', title='Total Freight Cost by Shipping Method (2022)')\n\n# Show the pie chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the five cities with the highest total sales and present them in a ranked bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT ShipCity, \n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM orders o \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY ShipCity \nORDER BY TotalSales DESC \nLIMIT 5;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Check if the dataframe is not empty\nif not df.empty:\n    # Create a ranked bar chart using plotly\n    fig = px.bar(df, x='ShipCity', y='TotalSales', \n                 title=\"Top 5 Cities by Total Sales\", \n                 labels={'ShipCity': 'City', 'TotalSales': 'Total Sales'})\n    \n    # Show the figure using the provided utility function\n    show_to_user(fig)\nelse:\n    show_to_user(\"No data available to display.\")\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total number of units ordered for each product category and visualize it with a histogram.",
        "output": "```python\nimport plotly.express as px\n\n# Define SQL query\nsql_query = \"\"\"\nSELECT c.CategoryID, SUM(od.Quantity) AS TotalUnitsOrdered \nFROM [Order Details] od \nINNER JOIN products p ON od.ProductID = p.ProductID \nINNER JOIN categories c ON p.CategoryID = c.CategoryID \nGROUP BY c.CategoryID;\n\"\"\"\n\n# Execute SQL query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart of total units ordered for each product category\nfig = px.bar(df, x='CategoryID', y='TotalUnitsOrdered', title='Total Units Ordered per Product Category')\n\n# Display the plotly figure\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly trend of order placements for the current year, and how can a line chart be used to represent it?",
        "output": "```python\nimport plotly.express as px\n\n# Define SQL query\nsql_query = \"\"\"\nSELECT MONTH(OrderDate) AS Month, COUNT(*) AS NumberOfOrders \nFROM orders \nWHERE YEAR(OrderDate) = YEAR(CURDATE()) \nGROUP BY MONTH(OrderDate);\n\"\"\"\n\n# Execute SQL query\norders_df = execute_sql_query(sql_query)\n\n# Sort the DataFrame by Month to ensure the line chart is ordered correctly\norders_df = orders_df.sort_values(by='Month')\n\n# Create line chart using plotly\nfig = px.line(orders_df, x='Month', y='NumberOfOrders', title='Monthly Trend of Order Placements')\n\n# Display plot\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How long has each employee been working at the company?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the employee duration\nsql_query = \"SELECT employees.EmployeeID, DATEDIFF(CURDATE(), employees.HireDate) AS DaysWorked FROM employees;\"\n\n# Execute the SQL query and retrieve the data\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need reordering?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to identify products that need reordering\nsql_query = \"SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;\"\n\n# Execute the SQL query and retrieve the data\nproducts_to_reorder_df = execute_sql_query(sql_query)\n\n# Display the resulting dataframe to the user\nshow_to_user(products_to_reorder_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a reorder level higher than 20?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT * FROM products WHERE ReorderLevel > 20;\"\n\n# Execute the SQL query using the provided utility function\nresult_df = execute_sql_query(sql_query)\n\n# Count the number of rows (products) with ReorderLevel > 20\nhigh_reorder_products_count = result_df.shape[0]\n\n# Create a DataFrame to hold the count\ncount_df = pd.DataFrame({'HighReorderProducts': [high_reorder_products_count]})\n\n# Display the result using the provided utility function\nshow_to_user(count_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the customers who have not placed any orders in the current year.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL queries\nquery_customers = \"SELECT CustomerID FROM customers;\"\nquery_orders_current_year = \"SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= DATE_FORMAT(NOW(), '%Y-01-01');\"\n\n# Execute the SQL queries\ncustomers_df = execute_sql_query(query_customers)\norders_df = execute_sql_query(query_orders_current_year)\n\n# Find customers who have not placed any orders in the current year\ninactive_customers_df = customers_df[~customers_df['CustomerID'].isin(orders_df['CustomerID'])]\n\n# Show result to the user\nshow_to_user(inactive_customers_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 customers who have incurred the highest total freight costs and display in a ranked list.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT CustomerID, SUM(Freight) AS TotalFreight \nFROM orders \nGROUP BY CustomerID \nORDER BY TotalFreight DESC \nLIMIT 5;\n\"\"\"\n\n# Execute the SQL query to retrieve data\ndf = execute_sql_query(sql_query)\n\n# Ensure the result is sorted and ranked properly\ndf = df.sort_values(by='TotalFreight', ascending=False).reset_index(drop=True)\n\n# Display the ranked list of top 5 customers by total freight costs\nshow_to_user(df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many units of each product were sold in the first quarter of 2023, and can this be shown in a grouped bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\n    SELECT products.ProductID, SUM([Order Details].Quantity) AS units_sold \n    FROM [Order Details] \n    JOIN products ON [Order Details].ProductID = products.ProductID \n    JOIN orders ON [Order Details].OrderID = orders.OrderID \n    WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' \n    GROUP BY products.ProductID\n\"\"\"\n\n# Execute the SQL query and get the data\ndf = execute_sql_query(sql_query)\n\n# Create a grouped bar chart using plotly\nfig = px.bar(df, x='ProductID', y='units_sold', title='Units Sold Per Product in Q1 2023', barmode='group')\n\n# Show the chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped via each shipping method in 2023, and illustrate it with a bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\n    SELECT ShipVia, COUNT(OrderID) AS OrderCount\n    FROM orders\n    WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\n    GROUP BY ShipVia\n\"\"\"\n\n# Execute the SQL query and retrieve data as a pandas dataframe\norder_data = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(order_data, x='ShipVia', y='OrderCount', title='Orders Shipped Via Each Method in 2023')\n\n# Display the figure to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed each month in the current year and visualize with a line chart?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the number of orders placed each month in the current year\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS TotalOrders \nFROM orders \nWHERE YEAR(OrderDate) = YEAR(CURDATE()) \nGROUP BY OrderMonth \nORDER BY OrderMonth;\n\"\"\"\n\n# Execute the query and retrieve the data as a pandas dataframe\norders_data = execute_sql_query(sql_query)\n\n# Create a line chart using plotly\nfig = px.line(orders_data, x='OrderMonth', y='TotalOrders', title='Monthly Orders in Current Year', labels={'OrderMonth': 'Month', 'TotalOrders': 'Number of Orders'})\n\n# Display the chart\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest average discount and illustrate it with a bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the product with the highest average discount\nsql_query = \"\"\"\nSELECT ProductID, AVG(Discount) AS AvgDiscount \nFROM [Order Details] \nGROUP BY ProductID \nORDER BY AvgDiscount DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Check if the dataframe is not empty\nif not df.empty:\n    # Create a bar chart to illustrate the product with the highest average discount\n    fig = px.bar(df, x=\"ProductID\", y=\"AvgDiscount\", title=\"Product with the Highest Average Discount\")\n\n    # Show the result to the user\n    show_to_user(fig)\nelse:\n    print(\"No data returned from the query.\")\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What percentage of total stock does each product contribute, and can this be visualized in a pie chart?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve the required data\nsql_query = \"\"\"\nSELECT p.ProductID, \nROUND(p.UnitsInStock / (SELECT SUM(UnitsInStock) FROM products) * 100, 2) AS StockPercentage \nFROM products p;\n\"\"\"\n\n# Execute the SQL query and retrieve the data as a pandas DataFrame\ndf = execute_sql_query(sql_query)\n\n# Ensure that 'ProductID' and 'StockPercentage' are treated as strings and numeric\ndf['ProductID'] = df['ProductID'].astype(str)\ndf['StockPercentage'] = df['StockPercentage'].astype(float)\n\n# Generate a pie chart using Plotly\nfig = px.pie(df, names='ProductID', values='StockPercentage', title='Percentage Contribution of Total Stock by Product')\n\n# Display the pie chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee processed the highest number of orders last month?",
        "output": "```python\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\n# Calculate last month's year and month\ntoday = datetime.today()\nfirst_day_of_current_month = today.replace(day=1)\nlast_month_end = first_day_of_current_month - timedelta(days=1)\nlast_month_year = last_month_end.year\nlast_month = last_month_end.month\n\n# Define SQL query\nsql_query = f\"\"\"\nSELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nWHERE YEAR(o.OrderDate) = {last_month_year} \nAND MONTH(o.OrderDate) = {last_month} \nGROUP BY e.EmployeeID \nORDER BY OrderCount DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query and fetch the data\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the month with the highest total sales, and visualize the monthly sales trend with a line chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get monthly sales data\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') as order_month, \nSUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as total_sales \nFROM orders o \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY order_month \nORDER BY total_sales DESC;\n\"\"\"\n\n# Execute the SQL query\nmonthly_sales_df = execute_sql_query(sql_query)\n\n# Determine the month with the highest total sales\nhighest_sales_row = monthly_sales_df.iloc[0]\n\n# Visualize the monthly sales trend with a line chart\nmonthly_sales_df_sorted = monthly_sales_df.sort_values(by='order_month')\nfig = px.line(monthly_sales_df_sorted, x='order_month', y='total_sales', title='Monthly Sales Trend')\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 5 suppliers based on the total sales revenue and show this in a ranked bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT p.SupplierID, s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue \nFROM products p \nJOIN suppliers s ON p.SupplierID = s.SupplierID \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nGROUP BY p.SupplierID, s.CompanyName \nORDER BY TotalRevenue DESC \nLIMIT 5;\n\"\"\"\n\n# Execute the query\ntop_suppliers_df = execute_sql_query(sql_query)\n\n# Create a ranked bar chart\nfig = px.bar(top_suppliers_df, x='CompanyName', y='TotalRevenue', \n             title='Top 5 Suppliers by Total Sales Revenue', \n             text='TotalRevenue', \n             labels={'TotalRevenue': 'Total Revenue', 'CompanyName': 'Supplier Name'})\n\n# Show the visualization\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer generated the highest lifetime value?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find the customer with the highest lifetime value\nsql_query = \"\"\"\nSELECT customers.CustomerID, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CustomerLifetimeValue\nFROM customers\nINNER JOIN orders ON customers.CustomerID = orders.CustomerID\nINNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID\nGROUP BY customers.CustomerID\nORDER BY CustomerLifetimeValue DESC\nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees live in each country and illustrate it with a map or bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT Country, COUNT(EmployeeID) AS EmployeeCount \nFROM employees \nGROUP BY Country;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using Plotly\nfig = px.bar(df, x='Country', y='EmployeeCount', title='Number of Employees by Country')\n\n# Show the visualization\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Visualize the total sales revenue for the month of January 2023 to identify trends or patterns using time-series or bar charts.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL Query\nsql_query = \"\"\"\nSELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, \n       DAY(OrderDate) as SaleDay\nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nWHERE MONTH(OrderDate) = 1 AND YEAR(OrderDate) = 2023\nGROUP BY DAY(OrderDate)\nORDER BY SaleDay;\n\"\"\"\n\n# Execute the query\nsales_data = execute_sql_query(sql_query)\n\n# Visualize the data with a time-series line chart\nfig = px.line(sales_data, x='SaleDay', y='TotalSales', title='Total Sales Revenue - January 2023', labels={'SaleDay': 'Day of January', 'TotalSales': 'Total Sales Revenue'})\n\n# Display the visualization\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find and visualize the top 5 cities with the highest average shipping cost to compare differences using a bar chart or map.",
        "output": "```python\nimport plotly.express as px\n\n# Define SQL query\nsql_query = \"\"\"\nSELECT ShipCity, AVG(Freight) AS AverageFreight \nFROM orders \nGROUP BY ShipCity \nORDER BY AverageFreight DESC \nLIMIT 5;\n\"\"\"\n\n# Execute SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart\nfig = px.bar(df, x='ShipCity', y='AverageFreight', title='Top 5 Cities with Highest Average Shipping Cost', labels={'AverageFreight':'Average Freight'})\n\n# Show the chart\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products need to be reordered (units in stock less than reorder level)?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;\"\n\n# Execute the SQL query\nproducts_to_reorder_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(products_to_reorder_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Visualize the top 5 products by sales revenue using a bar chart for comparative analysis.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve top 5 products by sales revenue\nsql_query = \"\"\"\nSELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales \nFROM [Order Details] \nGROUP BY ProductID \nORDER BY TotalSales DESC \nLIMIT 5;\n\"\"\"\n\n# Execute the SQL query using provided utility function\nsales_data = execute_sql_query(sql_query)\n\n# Ensure ProductID is treated as a categorical variable for plotting\nsales_data['ProductID'] = sales_data['ProductID'].astype(str)\n\n# Create a bar chart using Plotly\nfig = px.bar(sales_data, x='ProductID', y='TotalSales', title='Top 5 Products by Sales Revenue')\n\n# Display the bar chart using provided utility function\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Analyze and visualize the correlation between employee hire date and performance using scatter plots or correlation matrices.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL query provided\nsql_query = \"\"\"\nSELECT employees.EmployeeID, employees.HireDate, \nSUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales \nFROM employees \nJOIN orders ON employees.EmployeeID = orders.EmployeeID \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY employees.EmployeeID, employees.HireDate \nORDER BY employees.HireDate;\n\"\"\"\n\n# Execute SQL query to retrieve data\ndf = execute_sql_query(sql_query)\n\n# Ensure HireDate is in datetime format\ndf['HireDate'] = pd.to_datetime(df['HireDate'])\n\n# Calculate performance metric (e.g., using TotalSales as a proxy for performance)\n# Assuming we want to standardize it\ndf['Performance'] = (df['TotalSales'] - df['TotalSales'].mean()) / df['TotalSales'].std()\n\n# Visualize the correlation between HireDate and Performance\nfig = px.scatter(df, x='HireDate', y='Performance', \n                 title='Correlation between Hire Date and Performance',\n                 labels={'HireDate': 'Hire Date', 'Performance': 'Performance'})\n\n# Display the figure\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many new customers were acquired in May 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to count distinct new customers acquired in May 2023\nsql_query = \"\"\"\nSELECT COUNT(DISTINCT customers.CustomerID) AS new_customers \nFROM customers \nLEFT JOIN orders ON customers.CustomerID = orders.CustomerID \nWHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31'\nAND customers.CustomerID NOT IN (\n    SELECT CustomerID \n    FROM orders \n    WHERE OrderDate < '2023-05-01')\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that are currently in stock?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to get suppliers with products currently in stock\nsql_query = \"SELECT DISTINCT SupplierID FROM products WHERE UnitsInStock > 0\"\n\n# Execute the SQL query\nsupplier_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(supplier_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Visualize the number of employees in each country to identify distribution using a map or bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query and fetch data\nsql_query = \"SELECT Country, COUNT(*) AS NumEmployees FROM employees GROUP BY Country;\"\nemployees_df = execute_sql_query(sql_query)\n\n# Create a map visualization using Plotly\nfig_bar = px.bar(employees_df, x='Country', y='NumEmployees', title='Number of Employees per Country')\n\n# Show the bar chart to the user\nshow_to_user(fig_bar)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Visualize the average fulfillment time for orders by month to identify seasonal trends using a line chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the data\nsql_query = \"\"\"\n    SELECT EXTRACT(MONTH FROM OrderDate) AS Month, \n    AVG(DATEDIFF(DAY, OrderDate, ShippedDate)) AS AvgFulfillmentTime \n    FROM orders \n    GROUP BY EXTRACT(MONTH FROM OrderDate)\n\"\"\"\n\n# Execute the SQL query to get a dataframe\ndata = execute_sql_query(sql_query)\n\n# Convert the Month column to integer in case it's not already\ndata['Month'] = data['Month'].astype(int)\n\n# Sort the dataframe by Month to ensure correct order in the visualization\ndata = data.sort_values('Month')\n\n# Create a line chart\nfig = px.line(data, x='Month', y='AvgFulfillmentTime', \n              title='Average Fulfillment Time by Month',\n              labels={'AvgFulfillmentTime': 'Average Fulfillment Time (Days)', 'Month': 'Month'})\n\n# Show the line chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many days on average does it take to fulfill an order?",
        "output": "```python\nimport pandas as pd\n\n# Execute SQL query and retrieve data\ndf = execute_sql_query(\"SELECT OrderDate, ShippedDate FROM orders\")\n\n# Calculate average fulfillment time\ndf['FulfillmentTime'] = (pd.to_datetime(df['ShippedDate']) - pd.to_datetime(df['OrderDate'])).dt.days\navg_fulfillment_time = df['FulfillmentTime'].mean()\n\n# Create a DataFrame to display the result\nresult_df = pd.DataFrame({'AvgFulfillmentTime': [avg_fulfillment_time]})\n\n# Display result to user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied per product?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query\nsql_query = \"SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];\"\n\n# Execute SQL query and retrieve data as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Display the average discount result to the user\naverage_discount = df['AverageDiscount'].iloc[0]\nshow_to_user(pd.DataFrame({'AverageDiscount': [average_discount]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers have supplied the most products?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get suppliers and the count of products they supplied\nsql_query = \"\"\"\nSELECT s.SupplierID, COUNT(p.ProductID) AS TotalProductsSupplied \nFROM suppliers s \nJOIN products p ON s.SupplierID = p.SupplierID \nGROUP BY s.SupplierID \nORDER BY TotalProductsSupplied DESC;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Visualize which regions have the highest on-time delivery rates using a bar chart or heat map.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT ShipRegion, \n       (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID)) AS OnTimeDeliveryRate \nFROM orders \nGROUP BY ShipRegion \nORDER BY OnTimeDeliveryRate DESC;\n\"\"\"\n\n# Execute the SQL query to get the data\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using Plotly\nfig = px.bar(df, x='ShipRegion', y='OnTimeDeliveryRate', \n             title='On-Time Delivery Rates by Region',\n             labels={'OnTimeDeliveryRate': 'On-Time Delivery Rate (%)', 'ShipRegion': 'Region'})\n\n# Show the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were handled by employees who were hired in the year 2020?",
        "output": "```python\nsql_query = \"\"\"\n    SELECT COUNT(orders.OrderID) AS TotalOrders\n    FROM employees\n    JOIN orders ON employees.EmployeeID = orders.EmployeeID\n    WHERE YEAR(HireDate) = 2020;\n\"\"\"\n\n# Execute the SQL query using the provided function\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Visualize the average discount applied to products per month using a line chart to identify trends.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to fetch the required data\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, \n       AVG(Discount) AS AverageDiscount \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nGROUP BY month;\n\"\"\"\n\n# Execute the SQL query\ndata = execute_sql_query(sql_query)\n\n# Convert 'month' column to string if needed (ensure consistent data type)\ndata['month'] = data['month'].astype(str)\n\n# Create a line chart using plotly\nfig = px.line(data, x='month', y='AverageDiscount', title='Average Discount per Month')\n\n# Display the chart\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time between order date and required date?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to calculate average time between order date and required date\nsql_query = \"\"\"\nSELECT OrderDate, RequiredDate FROM orders;\n\"\"\"\n\n# Execute the SQL query and get the result in a dataframe\ndf = execute_sql_query(sql_query)\n\n# Calculate the average time between order date and required date\ndf['OrderDate'] = pd.to_datetime(df['OrderDate'])\ndf['RequiredDate'] = pd.to_datetime(df['RequiredDate'])\ndf['LeadTime'] = (df['RequiredDate'] - df['OrderDate']).dt.days\naverage_lead_time = df['LeadTime'].mean()\n\n# Display the result to the user\nshow_to_user(pd.DataFrame({'AverageLeadTime': [average_lead_time]}))\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have a stock level below their reorder level?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT COUNT(ProductName) as NumProductsBelowReorder FROM products WHERE UnitsInStock < ReorderLevel;\"\n\n# Execute the query and get the result as a Pandas DataFrame\nproducts_below_reorder = execute_sql_query(sql_query)\n\n# Prepare the result to show to user\nresult_df = pd.DataFrame({'Number of Products Below Reorder Level': products_below_reorder['NumProductsBelowReorder']})\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders were delayed more than five days past the required date?",
        "output": "```python\nimport pandas as pd\n\n# Retrieve all orders\nall_orders_df = execute_sql_query(\"SELECT OrderID, ShippedDate, RequiredDate FROM orders\")\n\n# Calculate the delay in days\nall_orders_df['DelayDays'] = (all_orders_df['ShippedDate'] - all_orders_df['RequiredDate']).dt.days\n\n# Filter orders delayed more than 5 days\ndelayed_orders_df = all_orders_df[all_orders_df['DelayDays'] > 5][['OrderID']]\n\n# Display the result to the user\nshow_to_user(delayed_orders_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the average fulfillment time\nsql_query = \"\"\"\nSELECT AVG(DATE_PART('day', ShippedDate::timestamp - OrderDate::timestamp)) AS AverageFulfillmentTime FROM orders;\n\"\"\"\n\n# Execute the SQL query and retrieve the data\ndf = execute_sql_query(sql_query)\n\n# Extract the average fulfillment time from the dataframe\naverage_fulfillment_time = df.loc[0, 'AverageFulfillmentTime']\n\n# Display the result to the user\nshow_to_user(pd.DataFrame({'AverageFulfillmentTime': [average_fulfillment_time]}))\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate and visualize the total value of current inventory (UnitPrice * UnitsInStock) for all products using a pie chart or bar chart for better understanding.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"SELECT UnitPrice, UnitsInStock FROM products;\"\n\n# Execute the SQL query to get the data\ndf = execute_sql_query(sql_query)\n\n# Calculate the total inventory value\ntotal_inventory_value = (df['UnitPrice'] * df['UnitsInStock']).sum()\n\n# Create a bar chart to visualize the total inventory value\nfig = px.bar(x=['Total Inventory Value'], y=[total_inventory_value], \n             title='Total Value of Current Inventory', labels={'x': 'Category', 'y': 'Value'})\n\n# Display the chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier? Visualize the average lead time using a bar chart to compare suppliers effectively.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT products.SupplierID, \n       AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime \nFROM products \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nGROUP BY products.SupplierID;\n\"\"\"\n\n# Execute the SQL query to get the data\ndf = execute_sql_query(sql_query)\n\n# Ensure 'AverageLeadTime' is treated as a float for plotting\ndf['AverageLeadTime'] = df['AverageLeadTime'].astype(float)\n\n# Create a bar chart using Plotly\nfig = px.bar(df, x='SupplierID', y='AverageLeadTime', \n             title='Average Lead Time for Each Supplier',\n             labels={'AverageLeadTime': 'Average Lead Time (days)'}, \n             height=400)\n\n# Show the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all orders including the details of the employee who handled them.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT orders.OrderID, orders.CustomerID, orders.OrderDate, \n       employees.LastName, employees.FirstName \nFROM orders \nJOIN employees ON orders.EmployeeID = employees.EmployeeID;\n\"\"\"\n\n# Execute the SQL query\norders_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(orders_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total quantity of products ordered from each employee? Use a pie chart to illustrate the proportion of total orders handled by each employee.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT e.EmployeeID, SUM(od.Quantity) AS TotalQuantity \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY e.EmployeeID;\n\"\"\"\n\n# Execute the SQL query and retrieve the data into a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Create a pie chart using plotly express\nfig = px.pie(df, names='EmployeeID', values='TotalQuantity', \n             title='Proportion of Total Orders Handled by Each Employee')\n\n# Display the pie chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late in the last month?",
        "output": "```python\nimport pandas as pd\nfrom datetime import datetime\n\n# Calculate the last month details\ntoday = datetime.today()\nfirst_day_of_this_month = today.replace(day=1)\nlast_month = first_day_of_this_month - pd.DateOffset(days=1)\nlast_month_year = last_month.year\nlast_month_number = last_month.month\n\n# SQL query to count late orders in the last month\nsql_query = f\"\"\"\nSELECT COUNT(orders.OrderID) AS Late_Orders\nFROM orders\nWHERE orders.RequiredDate < orders.ShippedDate\nAND MONTH(orders.OrderDate) = {last_month_number}\nAND YEAR(orders.OrderDate) = {last_month_year};\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped late (i.e., shipped after the required date)?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to count late orders\nsql_query = \"SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;\"\n\n# Execute the SQL query\nlate_orders_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(late_orders_df['LateOrders'][0])\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most orders shipped on time? Display the comparison using a bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get employee IDs and count of on-time orders\nsql_query = \"\"\"\nSELECT e.EmployeeID, COUNT(o.OrderID) AS OnTimeOrders\nFROM employees e\nJOIN orders o ON e.EmployeeID = o.EmployeeID\nWHERE o.ShippedDate <= o.RequiredDate\nGROUP BY e.EmployeeID;\n\"\"\"\n\n# Execute the SQL query to get the data\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly express\nfig = px.bar(df, x='EmployeeID', y='OnTimeOrders', title='On-Time Orders by Employee')\n\n# Display the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most frequently ordered product? Use a bar chart to show frequency counts for the top ordered products.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query to get the frequency of ordered products\nsql_query = \"\"\"\nSELECT p.ProductName, COUNT(od.ProductID) AS OrderCount \nFROM [Order Details] od \nJOIN products p ON od.ProductID = p.ProductID \nGROUP BY p.ProductName \nORDER BY OrderCount DESC\n\"\"\"\n\n# Execute the SQL query and retrieve the result into a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Correcting the code: Select only the top products\ndf_top = df.head(10)  # Assuming we want to display top 10 products\n\n# Create a bar chart using plotly to visualize the frequency counts for the top ordered products\nfig = px.bar(df_top, x='ProductName', y='OrderCount', title='Top Ordered Products by Frequency')\n\n# Display the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a unit price greater than 50?",
        "output": "```python\nsql_query = \"SELECT ProductName FROM products WHERE UnitPrice > 50;\"\nproducts_df = execute_sql_query(sql_query)\nshow_to_user(products_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product were ordered last month? Visualize the data using a bar chart for a clear comparison.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT products.ProductID, \n       SUM([Order Details].Quantity) AS UnitsOrderedLastMonth \nFROM products \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nWHERE [Order Details].OrderDate >= DATEADD(month, -1, GETDATE()) \nGROUP BY products.ProductID;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='ProductID', y='UnitsOrderedLastMonth', \n             title='Units Ordered Last Month by Product', \n             labels={'UnitsOrderedLastMonth':'Units Ordered', 'ProductID':'Product ID'})\n\n# Display the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the highest on-time delivery rate? A bar chart can show the on-time delivery rates for easy comparison.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL query to fetch the data\nsql_query = \"\"\"\nSELECT shippers.CompanyName, \n    COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) / \n    CAST(COUNT(orders.OrderID) AS float) AS on_time_delivery_rate \nFROM orders \nJOIN shippers ON orders.ShipVia = shippers.ShipperID \nGROUP BY shippers.CompanyName \nORDER BY on_time_delivery_rate DESC\n\"\"\"\n\n# Execute the SQL query and get the result into a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Display the company with the highest on-time delivery rate\ntop_company = df.iloc[0]\nshow_to_user(top_company)\n\n# Create a bar chart for on-time delivery rates\nfig = px.bar(df, x='CompanyName', y='on_time_delivery_rate', \n             title='On-Time Delivery Rates by Shipping Company')\n\n# Show the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total discount amount given for each product? Use a bar chart to display the total discount amounts.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve total discount amount for each product\nsql_query = \"\"\"\nSELECT p.ProductName, \n       SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount \nFROM products p \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nGROUP BY p.ProductName;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to display the total discount amounts\nfig = px.bar(df, x='ProductName', y='TotalDiscount', title='Total Discount Amount for Each Product')\n\n# Show the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total number of products sold by each employee. Represent the data using a bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the data\nsql_query = \"\"\"\nSELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProductsSold\nFROM employees\nINNER JOIN orders ON employees.EmployeeID = orders.EmployeeID\nINNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID\nGROUP BY employees.EmployeeID\n\"\"\"\n\n# Execute the SQL query\ndata = execute_sql_query(sql_query)\n\n# Create a bar chart\nfig = px.bar(data, x='EmployeeID', y='TotalProductsSold', title='Total Products Sold by Each Employee')\n\n# Show the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers who have not placed any orders in the last year.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to list customers who have not placed any orders in the last year\nsql_query = \"\"\"\nSELECT c.CustomerID, c.CompanyName \nFROM customers c \nLEFT JOIN orders o ON c.CustomerID = o.CustomerID \nWHERE o.OrderID IS NULL OR o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n\"\"\"\n\n# Execute SQL query and retrieve data as a pandas dataframe\ncustomer_data = execute_sql_query(sql_query)\n\n# Remove duplicates to ensure unique customer results\nunique_customer_data = customer_data.drop_duplicates()\n\n# Display the result to the user\nshow_to_user(unique_customer_data)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with a unit price greater than the average unit price across all products.",
        "output": "```python\nimport pandas as pd\n\n# Execute the SQL query to fetch the product data\nproducts_df = execute_sql_query(\"SELECT ProductID, ProductName, UnitPrice FROM products\")\n\n# Calculate the average unit price\naverage_price = products_df['UnitPrice'].mean()\n\n# Filter products with a unit price greater than the average\nfiltered_products_df = products_df[products_df['UnitPrice'] > average_price][['ProductID', 'ProductName']]\n\n# Display the result to user\nshow_to_user(filtered_products_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most frequently ordered product in 2023? Use a bar chart to compare the frequencies.",
        "output": "```python\nimport plotly.express as px\n\n# Define SQL query to get order counts for 2023\nsql_query = \"\"\"\nSELECT products.ProductID, products.ProductName, COUNT([Order Details].OrderID) AS order_count \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nWHERE YEAR([Order Details].OrderDate) = 2023\nGROUP BY products.ProductID, products.ProductName \nORDER BY order_count DESC\n\"\"\"\n\n# Execute SQL query\ndata = execute_sql_query(sql_query)\n\n# Create a bar chart using Plotly\nfig = px.bar(data, x='ProductName', y='order_count', title='Most Frequently Ordered Products in 2023')\n\n# Show the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and IDs of all products that are currently out of stock?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductID, ProductName FROM products WHERE UnitsInStock = 0;\"\n\n# Execute the SQL query to retrieve the data\nout_of_stock_products = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(out_of_stock_products)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products were low on stock (below reorder level) in August 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL Query\nsql_query = \"\"\"\nSELECT products.ProductID \nFROM products \nWHERE products.UnitsInStock < products.ReorderLevel \nAND MONTH(products.RecordDate) = 8 \nAND YEAR(products.RecordDate) = 2023\n\"\"\"\n\n# Execute the query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Count the number of products low on stock\nlow_stock_count = df['ProductID'].nunique()  # Use nunique to count distinct ProductIDs\n\n# Create a result dataframe to show the count\nresult_df = pd.DataFrame({\"LowStockCount\": [low_stock_count]})\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of products available in the inventory?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the total number of products\nsql_query = \"SELECT COUNT(*) as total_products FROM products;\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(df['total_products'].iloc[0])\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the highest on-time delivery rate? Display the rates using a bar chart for a better comparison.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve the shipping company's on-time delivery data\nsql_query = \"\"\"\nSELECT ShipVia, \n       SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS OnTimeDeliveryRate \nFROM orders \nGROUP BY ShipVia \nORDER BY OnTimeDeliveryRate DESC;\n\"\"\"\n\n# Execute the SQL query using the provided function\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly for better comparison\nfig = px.bar(df, x='ShipVia', y='OnTimeDeliveryRate', title='On-Time Delivery Rate by Shipping Company', labels={'ShipVia': 'Shipping Company', 'OnTimeDeliveryRate': 'On-Time Delivery Rate'})\n\n# Display the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products in terms of total units sold? Visualize the top products using a bar chart for better insights.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve top 5 products by total units sold\nsql_query = '''\nSELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsSold\nFROM products\nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID\nGROUP BY products.ProductID, products.ProductName\nORDER BY TotalUnitsSold DESC\nLIMIT 5;\n'''\n\n# Execute the SQL query\ndf_top_products = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df_top_products, x='ProductName', y='TotalUnitsSold',\n             title='Top 5 Products by Total Units Sold',\n             labels={'TotalUnitsSold': 'Total Units Sold', 'ProductName': 'Product Name'})\n\n# Show the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the monthly average shipping cost?",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL Query to retrieve monthly average shipping cost\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AvgShippingCost \nFROM orders \nGROUP BY Month;\n\"\"\"\n\n# Execute SQL query\ndf = execute_sql_query(sql_query)\n\n# Plot the result\nfig = px.line(df, x='Month', y='AvgShippingCost', title='Monthly Average Shipping Cost')\n\n# Display the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has the highest sales in Q1 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT employees.EmployeeID, \nSUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nJOIN employees ON orders.EmployeeID = employees.EmployeeID \nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' \nGROUP BY employees.EmployeeID \nORDER BY employee_sales DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query and retrieve the data\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total revenue generated from each product sold in 2022? Visualize the revenue distribution across products.",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query\nsql_query = \"\"\"\nSELECT \n    products.ProductID, \n    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' \nGROUP BY products.ProductID\n\"\"\"\n\n# Execute the SQL query to retrieve data\ndata = execute_sql_query(sql_query)\n\n# Ensure ProductID is treated as a string for visualization purposes\ndata['ProductID'] = data['ProductID'].astype(str)\n\n# Visualize the revenue distribution across products\nfig = px.bar(data, x='ProductID', y='total_revenue', title='Total Revenue by Product in 2022')\n\n# Show the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most ordered product in terms of quantity?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\n    SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantityOrdered \n    FROM [Order Details] \n    JOIN products \n    ON [Order Details].ProductID = products.ProductID \n    GROUP BY products.ProductName \n    ORDER BY TotalQuantityOrdered DESC \n    LIMIT 1;\n\"\"\"\n\n# Execute the query\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have less than 10 units in stock?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductID FROM products WHERE UnitsInStock < 10;\"\n\n# Execute the query and get the result as a DataFrame\ndf = execute_sql_query(sql_query)\n\n# Count the number of products with less than 10 units in stock\nproduct_count = len(df)\n\n# Display the result to the user\nshow_to_user(product_count)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 products with the highest total sales revenue. Visualize the sales revenue comparison among these products.",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query\nsql_query = \"\"\"\nSELECT products.ProductID, products.ProductName, \nSUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nGROUP BY products.ProductID, products.ProductName \nORDER BY TotalSales DESC \nLIMIT 5;\n\"\"\"\n\n# Execute the SQL query\ntop_products_df = execute_sql_query(sql_query)\n\n# Visualize the sales revenue comparison among the top 5 products\nfig = px.bar(top_products_df, \n             x='ProductName', \n             y='TotalSales', \n             title='Top 5 Products by Total Sales Revenue', \n             labels={'TotalSales': 'Total Sales Revenue', 'ProductName': 'Product Name'})\n\n# Show the result\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest and lowest inventory turnover ratio? Visualize the turnover ratios for comparison.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query to get inventory turnover ratios\nsql_query = \"\"\"\nSELECT \n    p.ProductName, \n    SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio \nFROM \n    products p \nJOIN \n    [Order Details] od \nON \n    p.ProductID = od.ProductID \nGROUP BY \n    p.ProductName\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Sort to find the highest and lowest inventory turnover ratios\nsorted_df = df.sort_values(by='InventoryTurnoverRatio', ascending=False)\n\n# Filter for products with the highest and lowest inventory turnover ratios\nhighest_df = sorted_df.head(1)\nlowest_df = sorted_df.tail(1)\ncomparison_df = highest_df.append(lowest_df)\n\n# Visualize the turnover ratios for comparison\nfig = px.bar(comparison_df, x='ProductName', y='InventoryTurnoverRatio', title='Highest and Lowest Inventory Turnover Ratios for Products')\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees with the highest and lowest order counts. Visualize the order counts for each employee.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nGROUP BY e.EmployeeID \nORDER BY OrderCount DESC \nLIMIT 1 \nUNION \nSELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nGROUP BY e.EmployeeID \nORDER BY OrderCount ASC \nLIMIT 1;\n\"\"\"\n\n# Execute the query\nemployees_df = execute_sql_query(sql_query)\n\n# Adjust FirstName for proper visualization if multiple employees have the same name\nemployees_df['FullName'] = employees_df['FirstName'] + ' ' + employees_df['LastName']\n\n# Generate a bar plot for order counts\nfig = px.bar(employees_df, x='FullName', y='OrderCount', color='OrderCount', \n             title='Order Counts for Employees with Highest and Lowest Orders')\n\n# Show the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee handled the most orders?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the EmployeeID with the most orders\nsql_query = '''\nSELECT EmployeeID, COUNT(OrderID) AS OrderCount \nFROM orders \nGROUP BY EmployeeID \nORDER BY OrderCount DESC \nLIMIT 1;\n'''\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Since we need only EmployeeID, extract it from the dataframe\nmost_orders_employee = result_df['EmployeeID'].iloc[0]\n\n# Display the EmployeeID to the user\nshow_to_user(most_orders_employee)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average lead time for each supplier in delivered products. Visualize the lead times to compare suppliers.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT suppliers.SupplierID, CompanyName, \nAVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime \nFROM suppliers \nJOIN products ON suppliers.SupplierID = products.SupplierID \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nGROUP BY suppliers.SupplierID, CompanyName;\n\"\"\"\n\n# Execute SQL query and get the data\ndata = execute_sql_query(sql_query)\n\n# Create a bar plot of average lead time per supplier\nfig = px.bar(data, x='CompanyName', y='AverageLeadTime', title='Average Lead Time by Supplier')\n\n# Show the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount given in orders for the year 2023?",
        "output": "```python\nsql_query = \"\"\"\nSELECT AVG([Order Details].Discount) AS avg_discount\nFROM [Order Details]\nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\n\"\"\"\n\n# Execute SQL query to get the average discount\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time by month? Visualize the monthly fulfillment times.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to fetch required data\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, \n       AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgOrderFulfillmentTime \nFROM orders \nGROUP BY Month;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Convert 'Month' to string to ensure proper sorting by month\ndf['Month'] = df['Month'].astype(str)\n\n# Create line plot using Plotly\nfig = px.line(df, x='Month', y='AvgOrderFulfillmentTime', title='Average Order Fulfillment Time by Month')\n\n# Display the plot\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated by each employee? Visualize employee contribution to revenue.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query provided\nsql_query = \"\"\"\nSELECT EmployeeID, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalRevenue \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY EmployeeID;\n\"\"\"\n\n# Execute the SQL query and get the results in a pandas DataFrame\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly to visualize employee contribution to revenue\nfig = px.bar(df, x='EmployeeID', y='TotalRevenue', title='Employee Contribution to Revenue')\n\n# Display the figure\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the total freight cost incurred in the year 2023.",
        "output": "```python\nimport pandas as pd\n\n# Execute the SQL query to get the data\nresult_df = execute_sql_query(\"SELECT SUM(Freight) AS TotalFreightCost2023 FROM orders WHERE YEAR(OrderDate) = 2023;\")\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify which month has the highest number of orders historically. Visualize the order count by month.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get order counts by month\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount \nFROM orders \nGROUP BY DATE_FORMAT(OrderDate, '%Y-%m')\n\"\"\"\n\n# Execute the SQL query\norder_data = execute_sql_query(sql_query)\n\n# Visualize order count by month\nfig = px.bar(order_data, x='Month', y='OrderCount', title='Order Count by Month')\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average number of products per order.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query to calculate the average number of products per order\nsql_query = \"SELECT AVG(od.Quantity) AS AverageProductsPerOrder FROM [Order Details] od;\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Correctly extract the average products per order from the result dataframe\naverage_products_per_order = result_df['AverageProductsPerOrder'][0]\n\n# Display the result\nshow_to_user(pd.DataFrame({'Average Products Per Order': [average_products_per_order]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest total sales in 2022?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to retrieve the product with the highest total sales in 2022\nsql_query = \"\"\"\nSELECT products.ProductID, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' \nGROUP BY products.ProductID \nORDER BY total_sales DESC \nLIMIT 1\n\"\"\"\n\n# Execute the SQL query and retrieve the result as a pandas dataframe\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed in each quarter of 2022? Visualize the quarterly order distribution.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the number of orders per quarter for 2022\nsql_query = \"\"\"\nSELECT QUARTER(orders.OrderDate) AS order_quarter, COUNT(orders.OrderID) AS total_orders\nFROM orders\nWHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'\nGROUP BY order_quarter\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Sort the dataframe by order_quarter to ensure the correct order in visualization\ndf = df.sort_values(by='order_quarter')\n\n# Create a bar chart to visualize the quarterly order distribution\nfig = px.bar(df, x='order_quarter', y='total_orders', title='Quarterly Orders Distribution in 2022',\n             labels={'order_quarter': 'Quarter', 'total_orders': 'Total Orders'})\n\n# Display the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers placed orders in the last quarter?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query to get unique customer IDs\nsql_query = \"\"\"\nSELECT DISTINCT CustomerID\nFROM orders\nWHERE OrderDate >= DATEADD(MONTH, -3, GETDATE());\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Count the unique customers\nunique_customers_count = len(result_df['CustomerID'].unique())\n\n# Display the result to the user\nshow_to_user(pd.DataFrame({'unique_customers': [unique_customers_count]}))\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top three products that generate the most sales revenue? Visualize their sales revenue for comparison.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue \nFROM [Order Details] od \nGROUP BY od.ProductID \nORDER BY TotalRevenue DESC \nLIMIT 3;\n\"\"\"\n\n# Execute the query to get data\ndata = execute_sql_query(sql_query)\n\n# Ensure the dataframe has columns in the correct case\ndata.columns = ['ProductID', 'TotalRevenue']\n\n# Create a bar chart for visualization\nfig = px.bar(data, x='ProductID', y='TotalRevenue', title='Top 3 Products by Sales Revenue')\n\n# Show the figure to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names of products that have been discontinued?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to get discontinued products\nsql_query = \"SELECT ProductName FROM products WHERE Discontinued = 1;\"\n\n# Execute the SQL query to retrieve the dataframe\ndiscontinued_products_df = execute_sql_query(sql_query)\n\n# Display the names of products that have been discontinued\nshow_to_user(discontinued_products_df['ProductName'])\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier has supplied the most quantity of products?",
        "output": "```python\nimport pandas as pd\n\n# Define SQL query\nsql_query = \"\"\"\nSELECT SupplierID, SUM(UnitsOnOrder) AS TotalQuantitySupplied \nFROM products \nGROUP BY SupplierID \nORDER BY TotalQuantitySupplied DESC \nLIMIT 1;\n\"\"\"\n\n# Execute SQL query and get the result as a DataFrame\nresult_df = execute_sql_query(sql_query)\n\n# Correctly display just the SupplierID\nmax_supplier_id = result_df['SupplierID'].iloc[0]\n\n# Display the SupplierID to the user\nshow_to_user(max_supplier_id)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the average discount given by each employee.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount\nFROM employees e\nJOIN orders o ON e.EmployeeID = o.EmployeeID\nJOIN [Order Details] od ON o.OrderID = od.OrderID\nGROUP BY e.EmployeeID;\n\"\"\"\n\n# Execute the SQL query and get the results as a DataFrame\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which month had the highest number of orders placed? Provide a visualization to compare monthly order volumes.",
        "output": "```python\nimport plotly.express as px\n\n# Query to get monthly order counts\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount\nFROM orders\nGROUP BY DATE_FORMAT(OrderDate, '%Y-%m')\nORDER BY Month\n\"\"\"\n\n# Execute the SQL query\nmonthly_order_data = execute_sql_query(sql_query)\n\n# Find the month with the highest number of orders\nhighest_order_month = monthly_order_data.loc[monthly_order_data['OrderCount'].idxmax()]\n\n# Visualize monthly order volumes\nfig = px.bar(monthly_order_data, x='Month', y='OrderCount', \n             title=f\"Monthly Order Volumes (Highest: {highest_order_month['Month']})\", \n             labels={'OrderCount': 'Number of Orders'})\n\n# Show the visualization\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Retrieve the contact information for all suppliers located in a specific region.",
        "output": "```python\nimport pandas as pd\n\n# Define the specific region\nspecified_region = 'specified_region'\n\n# Create the SQL query\nsql_query = f\"\"\"\nSELECT SupplierID, CompanyName, ContactName, Phone, City, Region\nFROM suppliers\nWHERE Region = '{specified_region}';\n\"\"\"\n\n# Execute the SQL query and retrieve the data\nsuppliers_df = execute_sql_query(sql_query)\n\n# Display the retrieved data\nshow_to_user(suppliers_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the discount amount for each order in January 2023.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to fetch the required data\nsql_query = \"\"\"\nSELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS DiscountAmount\nFROM orders o\nJOIN [Order Details] od ON o.OrderID = od.OrderID\nWHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'\nGROUP BY o.OrderID;\n\"\"\"\n\n# Execute the SQL query to get the results in a dataframe\ndf = execute_sql_query(sql_query)\n\n# Show the results to the user\nshow_to_user(df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total sales by month? Use a line or bar chart to illustrate monthly sales trends.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the total sales by month\nsql_query = \"\"\"\nSELECT \n    YEAR(o.OrderDate) AS Year, \n    MONTH(o.OrderDate) AS Month, \n    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM \n    orders o \nINNER JOIN [Order Details] od \nON o.OrderID = od.OrderID \nGROUP BY \n    YEAR(o.OrderDate), \n    MONTH(o.OrderDate) \nORDER BY \n    Year, \n    Month;\n\"\"\"\n\n# Execute the query and get the dataframe\nsales_data = execute_sql_query(sql_query)\n\n# Ensure we use the 'Year' and 'Month' columns combined for correct x-axis\nsales_data['YearMonth'] = sales_data['Year'].astype(str) + '-' + sales_data['Month'].astype(str).str.zfill(2)\n\n# Create a line chart to illustrate monthly sales trends\nfig = px.line(sales_data, x='YearMonth', y='TotalSales', title='Monthly Sales Trends', labels={'YearMonth': 'Month', 'TotalSales': 'Total Sales'}, markers=True)\n\n# Display the figure\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the highest number of products?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT CategoryID, COUNT(ProductID) AS NumberOfProducts \nFROM products \nGROUP BY CategoryID \nORDER BY NumberOfProducts DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query to get the data\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products received the highest total discount? Present this data with a bar chart for better comparison.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT products.ProductName, \n       SUM([Order Details].Discount) AS TotalDiscount \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nGROUP BY products.ProductName \nORDER BY TotalDiscount DESC;\n\"\"\"\n\n# Execute the query\ndf = execute_sql_query(sql_query)\n\n# Correct column names for Plotly\ndf.columns = ['ProductName', 'TotalDiscount']\n\n# Create a bar chart\nfig = px.bar(df, x='ProductName', y='TotalDiscount', title='Products with the Highest Total Discount')\n\n# Show the chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions have the highest average order value? Use a bar chart to compare average order values across regions.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT ShipRegion, \n       AVG([Order Details].UnitPrice * [Order Details].Quantity * \n       (1 - [Order Details].Discount)) AS AverageOrderValue \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY ShipRegion \nORDER BY AverageOrderValue DESC\n\"\"\"\n\n# Execute SQL query to get the data\ndata = execute_sql_query(sql_query)\n\n# Create a bar chart to compare average order values across regions\nfig = px.bar(data, x='ShipRegion', y='AverageOrderValue', \n             title='Average Order Value by Region',\n             labels={'ShipRegion': 'Region', 'AverageOrderValue': 'Average Order Value'})\n\n# Show the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 3 customers by revenue in the last quarter. Include a bar chart to visualize customer revenue comparison.",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query using the provided utility function\nsql_query = \"\"\"\nSELECT customers.CustomerID, \nSUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as Revenue \nFROM customers \nJOIN orders ON customers.CustomerID = orders.CustomerID \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nWHERE orders.OrderDate > DATE_SUB(NOW(), INTERVAL 3 MONTH) \nGROUP BY customers.CustomerID \nORDER BY Revenue DESC \nLIMIT 3;\n\"\"\"\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to visualize customer revenue comparison\nfig = px.bar(df, x='CustomerID', y='Revenue', title='Top 3 Customers by Revenue in the Last Quarter')\n\n# Display the bar chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered before the required date in 2022?",
        "output": "```python\nimport pandas as pd\n\n# Execute the SQL query using the utility function\norders_df = execute_sql_query(\"SELECT OrderDate, ShippedDate, RequiredDate FROM orders\")\n\n# Filter orders for the year 2022\norders_2022 = orders_df[pd.to_datetime(orders_df['OrderDate']).dt.year == 2022]\n\n# Calculate the number of orders delivered on or before the required date\ndelivered_on_time = orders_2022[orders_2022['ShippedDate'] <= orders_2022['RequiredDate']].shape[0]\n\n# Calculate the percentage\nbefore_required_date_rate = (delivered_on_time / orders_2022.shape[0]) * 100\n\n# Create a DataFrame to display the result\nresult_df = pd.DataFrame({'BeforeRequiredDateRate': [before_required_date_rate]})\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time in April 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time\nFROM orders\nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID\nJOIN products ON [Order Details].ProductID = products.ProductID\nWHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30'\nGROUP BY products.SupplierID\nORDER BY supplier_lead_time ASC\nLIMIT 1\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the employees reporting to each manager?",
        "output": "```python\nimport pandas as pd\n\n# Define SQL query\nsql_query = \"\"\"\nSELECT m.EmployeeID AS ManagerID, \n       m.LastName AS ManagerLastName, \n       m.FirstName AS ManagerFirstName, \n       e.EmployeeID AS EmployeeID, \n       e.LastName AS EmployeeLastName, \n       e.FirstName AS EmployeeFirstName \nFROM employees e \nJOIN employees m ON e.ReportsTo = m.EmployeeID;\n\"\"\"\n\n# Execute SQL query and retrieve data\ndf = execute_sql_query(sql_query)\n\n# Display the results\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the average discount applied to orders in January 2023.",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to find average discount\nsql_query = \"\"\"\nSELECT AVG(od.Discount) AS AvgDiscount \nFROM orders o \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nWHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';\n\"\"\"\n\n# Execute the query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales for employees located in a specific region.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales\nFROM employees e\nJOIN orders o ON e.EmployeeID = o.EmployeeID\nJOIN [Order Details] od ON o.OrderID = od.OrderID\nWHERE e.Region = 'specific region'\nGROUP BY e.EmployeeID;\n\"\"\"\n\n# Execute the query and get the result as a dataframe\nsales_data_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(sales_data_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the names of all suppliers who are located in Germany?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT CompanyName FROM suppliers WHERE Country = 'Germany';\"\n\n# Execute the query\nsuppliers_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(suppliers_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the average order value in June 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to calculate average order value in June 2023\nsql_query = \"\"\"\nSELECT \n    SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue \nFROM orders o \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nWHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-06';\n\"\"\"\n\n# Execute the query and retrieve the result in a dataframe\ndf = execute_sql_query(sql_query)\n\n# Display the average order value to the user\nshow_to_user(df['AvgOrderValue'].iloc[0])\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average freight cost for each customer. Use a bar chart to compare freight costs across customers.",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query to retrieve the data\nsql_query = \"SELECT CustomerID, AVG(Freight) AS AvgFreight FROM orders GROUP BY CustomerID;\"\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to compare freight costs across customers\nfig = px.bar(df, x='CustomerID', y='AvgFreight', title='Average Freight Cost per Customer', labels={'AvgFreight': 'Average Freight Cost', 'CustomerID': 'Customer ID'})\n\n# Display the chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed on weekends in the last three months? Present the data with a bar chart for each weekend.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL query to get the number of orders placed on weekends in the last three months\nsql_query = \"\"\"\nSELECT DAY(OrderDate) AS Day, MONTH(OrderDate) AS Month, YEAR(OrderDate) AS Year, COUNT(OrderID) AS WeekendOrders \nFROM orders \nWHERE DAYOFWEEK(OrderDate) IN (1, 7) \nAND OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY Year, Month, Day\n\"\"\"\n\n# Execute the SQL query and get the dataframe\ndf = execute_sql_query(sql_query)\n\n# Combine the day, month, and year into a single date column\ndf['OrderDate'] = pd.to_datetime(df[['Year', 'Month', 'Day']])\n\n# Create a bar chart with Plotly\nfig = px.bar(df, x='OrderDate', y='WeekendOrders', title='Weekend Orders in the Last 3 Months')\n\n# Display the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in the year 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Display the result\ntotal_sales = df['total_sales'].iloc[0]\nshow_to_user(total_sales)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have been ordered but not yet shipped?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query\nsql_query = \"SELECT COUNT(orders.OrderID) AS Products_Not_Shipped FROM orders WHERE orders.ShippedDate IS NULL;\"\n\n# Execute the query\ndf_orders_not_shipped = execute_sql_query(sql_query)\n\n# Prepare result to show\nresult_df = pd.DataFrame({'Products_Not_Shipped': [df_orders_not_shipped['Products_Not_Shipped'].iloc[0]]})\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are low in stock and need reordering?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT ProductName \nFROM products \nWHERE UnitsInStock <= ReorderLevel \nAND Discontinued = 0;\n\"\"\"\n\n# Execute the SQL query to get the data\nlow_stock_products_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(low_stock_products_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped but not yet delivered by the required date?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT COUNT(*) AS Count FROM orders WHERE ShippedDate > RequiredDate;\"\n\n# Execute the SQL query\ndf_result = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df_result['Count'][0])\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average number of products per order.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to determine the average number of products per order\nsql_query = \"\"\"\nSELECT AVG(ProductCount) AS AverageProductsPerOrder \nFROM (\n    SELECT OrderID, COUNT(ProductID) AS ProductCount \n    FROM [Order Details] \n    GROUP BY OrderID\n) AS ProductCounts;\n\"\"\"\n\n# Execute the SQL query\naverage_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(average_df['AverageProductsPerOrder'])\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that are currently discontinued?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT DISTINCT suppliers.SupplierID, suppliers.CompanyName \nFROM suppliers \nJOIN products ON suppliers.SupplierID = products.SupplierID \nWHERE products.Discontinued = 1;\n\"\"\"\n\n# Execute the SQL query and get the result as a pandas dataframe\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the most commonly ordered product quantities?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT products.ProductID, SUM([Order Details].Quantity) AS MostCommonQuantities \nFROM products \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID \nGROUP BY products.ProductID \nORDER BY MostCommonQuantities DESC;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the most expensive product by unit price.",
        "output": "```python\nimport pandas as pd\n\nsql_query = \"SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;\"\ndf = execute_sql_query(sql_query)\n\nmost_expensive_product = df['ProductName'].iloc[0]\n\nresult_df = pd.DataFrame({'Most Expensive Product': [most_expensive_product]})\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top 5 highest priced products with a visualization to compare prices.",
        "output": "```python\nimport plotly.express as px\n\n# Define SQL query\nsql_query = \"SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;\"\n\n# Execute the SQL query and store the result in a dataframe\ndf = execute_sql_query(sql_query)\n\n# Generate a bar chart to compare prices\nfig = px.bar(df, x='ProductName', y='UnitPrice', title='Top 5 Highest Priced Products')\n\n# Display the visualization\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers with their respective regions and count of orders placed, visualizing order counts geographically.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT \n    customers.CustomerID, \n    customers.Region, \n    COUNT(orders.OrderID) AS total_orders \nFROM \n    customers \nLEFT JOIN \n    orders \nON \n    customers.CustomerID = orders.CustomerID \nGROUP BY \n    customers.CustomerID, customers.Region;\n\"\"\"\n\n# Execute SQL query\ndata = execute_sql_query(sql_query)\n\n# Aggregate total_orders by region\naggregated_data = data.groupby('Region', as_index=False)['total_orders'].sum()\n\n# Visualize order counts geographically\nfig = px.bar(aggregated_data, x='Region', y='total_orders', color='Region', \n             title='Order Counts by Region')\n\n# Show the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the top 5 cities with the highest number of orders, using a bar chart for comparison.",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query to get the top 5 cities with highest number of orders\nsql_query = \"\"\"\nSELECT ShipCity, COUNT(OrderID) AS OrderCount \nFROM orders \nGROUP BY ShipCity \nORDER BY OrderCount DESC \nLIMIT 5;\n\"\"\"\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='ShipCity', y='OrderCount', title='Top 5 Cities with Highest Number of Orders')\n\n# Show the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of each product sold, visualized with a bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the total quantity of each product sold\nsql_query = \"SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;\"\n\n# Execute SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='ProductID', y='TotalQuantity', title='Total Quantity Sold by Product')\n\n# Show the result to user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the total sales and the number of orders for each customer in March 2023 with a bar chart for comparison.",
        "output": "```python\nimport plotly.express as px\n\n# The SQL query to execute\nsql_query = \"\"\"\nSELECT O.CustomerID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales, \nCOUNT(O.OrderID) AS OrderCount \nFROM orders O \nJOIN [Order Details] OD ON O.OrderID = OD.OrderID \nWHERE DATE_FORMAT(O.OrderDate, '%Y-%m') = '2023-03' \nGROUP BY O.CustomerID;\n\"\"\"\n\n# Execute the SQL query\ndata = execute_sql_query(sql_query)\n\n# Create a bar chart for comparison\nfig = px.bar(data, x='CustomerID', y=['TotalSales', 'OrderCount'], \n             barmode='group', \n             title='Total Sales and Number of Orders for Each Customer in March 2023')\n\n# Display the result\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units have been sold for each product, grouped by supplier, visualized with a stacked bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve the required data\nsql_query = '''\nSELECT s.SupplierName, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold \nFROM suppliers s \nJOIN products p ON s.SupplierID = p.SupplierID \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nGROUP BY s.SupplierName, p.ProductName;\n'''\n\n# Execute the SQL query to get the data in a dataframe\ndf = execute_sql_query(sql_query)\n\n# Create the stacked bar chart using plotly\nfig = px.bar(df, x='SupplierName', y='TotalQuantitySold', color='ProductName', \n             title='Units Sold for Each Product by Supplier', \n             labels={'TotalQuantitySold': 'Total Quantity Sold', 'SupplierName': 'Supplier'})\n\n# Show the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the percentage of orders shipped within 5 days of the order date.",
        "output": "```python\nimport pandas as pd\n\n# Execute query to retrieve all orders data\norders_df = execute_sql_query(\"SELECT OrderID, OrderDate, ShippedDate FROM orders\")\n\n# Calculate percentage of orders shipped within 5 days\norders_df['DaysDifference'] = (orders_df['ShippedDate'] - orders_df['OrderDate']).dt.days\nwithin_5_days = orders_df['DaysDifference'] <= 5\npercentage_within_5_days = within_5_days.sum() * 100.0 / len(orders_df)\n\n# Prepare the result as a dataframe\nresult_df = pd.DataFrame({\n    'PercentageWithin5Days': [percentage_within_5_days]\n})\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity ordered across all products by month, with a line chart to show trends?",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT MONTH(OrderDate) AS OrderMonth, \n       YEAR(OrderDate) AS OrderYear, \n       SUM(Quantity) AS TotalQuantityOrdered \nFROM [Order Details] \nGROUP BY YEAR(OrderDate), MONTH(OrderDate);\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Sort data by year and month for proper trend visualization\ndf.sort_values(by=['OrderYear', 'OrderMonth'], inplace=True)\n\n# Concatenate year and month for the x-axis\ndf['YearMonth'] = df['OrderYear'].astype(str) + '-' + df['OrderMonth'].astype(str)\n\n# Create a line chart using Plotly\nfig = px.line(df, x='YearMonth', y='TotalQuantityOrdered', \n              labels={'YearMonth': 'Year-Month', 'TotalQuantityOrdered': 'Total Quantity Ordered'},\n              title='Monthly Total Quantity Ordered Across All Products')\n\n# Show the line chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has generated the highest revenue, and visualize this with a bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to fetch data\nsql_query = \"\"\"\nSELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS Revenue\nFROM [Order Details]\nGROUP BY ProductID\nORDER BY Revenue DESC;\n\"\"\"\n\n# Execute the SQL query and get the data in a pandas DataFrame\ndata_df = execute_sql_query(sql_query)\n\n# Visualize the revenue of each product\nfig = px.bar(data_df, x='ProductID', y='Revenue', title='Product Revenue')\n\n# Show the visualization\nshow_to_user(fig)\n\n# Determine the product with the highest revenue\nhighest_revenue_product = data_df.iloc[0]\nshow_to_user(highest_revenue_product)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average order value for each customer with a bar chart for comparison.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to calculate average order value for each customer\nsql_query = \"\"\"\nSELECT c.CustomerID, \n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue\nFROM customers c \nINNER JOIN orders o ON c.CustomerID = o.CustomerID \nINNER JOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY c.CustomerID;\n\"\"\"\n\n# Execute the SQL query and get the result into a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly to visualize average order value for each customer\nfig = px.bar(df, x='CustomerID', y='AverageOrderValue', title='Average Order Value per Customer')\n\n# Display the plot\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time for orders delivered by each supplier, visualized with a bar chart?",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query\nsql_query = \"\"\"\nSELECT products.SupplierID, \n       AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nJOIN products ON [Order Details].ProductID = products.ProductID \nGROUP BY products.SupplierID\n\"\"\"\ndata = execute_sql_query(sql_query)\n\n# Create the bar chart\nfig = px.bar(data, x='SupplierID', y='avg_lead_time', title='Average Lead Time by Supplier')\n\n# Display the chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide products that are currently out of stock?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find suppliers providing out-of-stock products\nsql_query = \"\"\"\nSELECT s.SupplierName \nFROM suppliers s \nJOIN products p ON s.SupplierID = p.SupplierID \nWHERE p.UnitsInStock = 0;\n\"\"\"\n\n# Execute the SQL query\nout_of_stock_suppliers_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(out_of_stock_suppliers_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units on order are there for each product?",
        "output": "```python\nimport pandas as pd\n\n# SQL query\nsql_query = \"SELECT ProductName, UnitsOnOrder FROM products\"\n\n# Execute the SQL query and retrieve the data\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of each product are currently in stock?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query\nsql_query = \"SELECT ProductID, ProductName, UnitsInStock FROM products;\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Show the results to the user\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest unit price but lowest sales quantity?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find the product with the highest unit price but lowest sales quantity\nsql_query = \"\"\"\nSELECT products.ProductID, products.ProductName \nFROM products \nWHERE products.UnitPrice = (SELECT MAX(products.UnitPrice) FROM products) \nAND products.ProductID NOT IN (\n    SELECT ProductID \n    FROM [Order Details] \n    WHERE Quantity > 0\n)\n\"\"\"\n\n# Execute the SQL query using the provided utility function\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales in terms of quantity in March 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\n    SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity \n    FROM [Order Details] \n    JOIN products ON [Order Details].ProductID = products.ProductID \n    JOIN orders ON [Order Details].OrderID = orders.OrderID \n    WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' \n    GROUP BY products.ProductName \n    ORDER BY total_quantity DESC \n    LIMIT 1\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee for the past year?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT e.EmployeeID, e.FirstName, e.LastName, \nSUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nWHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) \nGROUP BY e.EmployeeID;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Display the results to the user\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Visualize the average number of days between order placement and order shipping by customer.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT CustomerID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageDaysToShip\nFROM orders\nGROUP BY CustomerID;\n\"\"\"\n\n# Execute the SQL query\ndata = execute_sql_query(sql_query)\n\n# Create a bar chart to visualize the average days to ship by customer\nfig = px.bar(data, x='CustomerID', y='AverageDaysToShip', \n             title='Average Days to Ship by Customer',\n             labels={'CustomerID': 'Customer ID', 'AverageDaysToShip': 'Average Days to Ship'})\n\n# Display the visualization\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Visualize the total sales revenue generated by each product category in the last year.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# SQL query to get total sales by product\nsql_query = \"\"\"\nSELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales \nFROM [Order Details] \nJOIN orders ON orders.OrderID = [Order Details].OrderID \nWHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR \nGROUP BY ProductID;\n\"\"\"\n\n# Execute the query\ndata = execute_sql_query(sql_query)\n\n# Assuming we have a separate table to get ProductID to Category mapping\nproduct_category_query = \"\"\"\nSELECT ProductID, CategoryName \nFROM products \nJOIN categories ON products.CategoryID = categories.CategoryID;\n\"\"\"\nproduct_category_data = execute_sql_query(product_category_query)\n\n# Merge the data to include CategoryName\nmerged_data = pd.merge(data, product_category_data, on='ProductID')\n\n# Calculate total sales by Category\ncategory_sales = merged_data.groupby('CategoryName', as_index=False)['TotalSales'].sum()\n\n# Visualize using plotly\nfig = px.bar(category_sales, x='CategoryName', y='TotalSales', title='Total Sales Revenue by Product Category in Last Year')\n\n# Show the visualization\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers that have not supplied any products in the last year.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to identify suppliers not active in last year\nsql_query = \"\"\"\nSELECT suppliers.CompanyName \nFROM suppliers \nLEFT JOIN (\n    SELECT products.SupplierID, COUNT(*) AS ProductCount \n    FROM products \n    JOIN \"Order Details\" ON products.ProductID = \"Order Details\".ProductID \n    JOIN orders ON \"Order Details\".OrderID = orders.OrderID \n    WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n    GROUP BY products.SupplierID\n) AS recent_products \nON suppliers.SupplierID = recent_products.SupplierID \nWHERE recent_products.ProductCount IS NULL;\n\"\"\"\n\n# Execute the query\ninactive_suppliers_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(inactive_suppliers_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have stock levels below their reorder level?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of each product are currently on order?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get units on order for each product\nsql_query = \"SELECT ProductName, UnitsOnOrder FROM products;\"\n\n# Execute SQL query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly sales trend for each product over the last year?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT products.ProductID, FORMAT([Order Details].OrderDate, 'yyyy-MM') AS Month, \nSUM([Order Details].Quantity) AS MonthlySales\nFROM products \nJOIN [Order Details] ON products.ProductID = [Order Details].ProductID\nWHERE [Order Details].OrderDate >= DATEADD(year, -1, GETDATE()) \nGROUP BY products.ProductID, FORMAT([Order Details].OrderDate, 'yyyy-MM');\n\"\"\"\n\n# Execute the query and retrieve data as a dataframe\ndf = execute_sql_query(sql_query)\n\n# Sort the dataframe by Month to ensure the trend line is accurate\ndf = df.sort_values(by='Month')\n\n# Create a line plot for the monthly sales trend of each product\nfig = px.line(df, x='Month', y='MonthlySales', color='ProductID', title='Monthly Sales Trend for Each Product')\n\n# Show the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average discount provided per order.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get order discounts\nsql_query = \"SELECT Discount FROM [Order Details];\"\n\n# Execute the SQL query\norder_details_df = execute_sql_query(sql_query)\n\n# Calculate the average discount per order\navg_discount = order_details_df['Discount'].mean()\n\n# Prepare the result in a DataFrame for display\nresult_df = pd.DataFrame({'AvgDiscount': [avg_discount]})\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Visualize the average quantity per unit for products supplied by each supplier.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"\"\"\nSELECT s.SupplierID, s.SupplierName, AVG(CAST(p.QuantityPerUnit AS DECIMAL)) AS AverageQuantityPerUnit\nFROM suppliers s\nJOIN products p ON s.SupplierID = p.SupplierID\nGROUP BY s.SupplierID, s.SupplierName;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Visualize the data\nfig = px.bar(df, x='SupplierName', y='AverageQuantityPerUnit',\n             title='Average Quantity Per Unit by Supplier',\n             labels={'AverageQuantityPerUnit': 'Average Quantity Per Unit', 'SupplierName': 'Supplier Name'})\n\n# Show to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Visualize the average shipping cost per order for the current year.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\nfrom datetime import datetime\n\n# SQL query to get the average shipping cost per order for the current year\nsql_query = \"\"\"\nSELECT AVG(orders.Freight) AS shipping_cost_per_order \nFROM orders \nWHERE YEAR(orders.OrderDate) = YEAR(CURDATE())\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a DataFrame to use for plotting\ncurrent_year = datetime.now().year\nplot_df = pd.DataFrame({\n    'Year': [current_year],\n    'Average Shipping Cost': df['shipping_cost_per_order']\n})\n\n# Visualize the result\nfig = px.bar(plot_df, x='Year', y='Average Shipping Cost',\n             labels={'Year': 'Year', 'Average Shipping Cost': 'Average Shipping Cost'},\n             title='Average Shipping Cost Per Order for the Current Year')\n\n# Display the result\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Visualize the top 3 regions by total sales revenue.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve the top 3 regions by total sales revenue\nsql_query = \"\"\"\nSELECT customers.Region, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSalesRevenue \nFROM customers \nINNER JOIN orders ON customers.CustomerID = orders.CustomerID \nINNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY customers.Region \nORDER BY TotalSalesRevenue DESC \nLIMIT 3;\n\"\"\"\n\n# Execute the SQL query and get the results in a DataFrame\ndf = execute_sql_query(sql_query)\n\n# Visualize the data using plotly\nfig = px.bar(df, x='Region', y='TotalSalesRevenue', title='Top 3 Regions by Total Sales Revenue')\n\n# Show the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Visualize how many orders were placed each month.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS TotalOrders\nFROM orders\nGROUP BY OrderMonth;\n\"\"\"\n\n# Execute the SQL query to retrieve the data\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to visualize the number of orders placed each month\nfig = px.bar(df, x='OrderMonth', y='TotalOrders', title='Monthly Orders Count', labels={'OrderMonth': 'Order Month', 'TotalOrders': 'Total Orders'})\n\n# Display the visualization\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest cumulative discount in terms of dollar value?",
        "output": "```python\n# Define the SQL query\nsql_query = \"\"\"\nSELECT p.ProductID, p.ProductName, \n       SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount \nFROM [Order Details] od \nJOIN products p ON od.ProductID = p.ProductID \nGROUP BY p.ProductID, p.ProductName \nORDER BY TotalDiscount DESC LIMIT 1;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many different suppliers are there?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query\nsql_query = \"SELECT COUNT(DISTINCT SupplierID) as distinct_suppliers FROM products;\"\n\n# Execute SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Extract the count from the dataframe and display\ndistinct_suppliers_count = result_df['distinct_suppliers'][0]\nshow_to_user(pd.DataFrame({'Distinct Suppliers Count': [distinct_suppliers_count]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Visualize the correlation between freight cost and fulfillment time.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query\nsql_query = \"SELECT Freight, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders;\"\n\n# Execute the query and retrieve data\ndf = execute_sql_query(sql_query)\n\n# Create a scatter plot to visualize the correlation\nfig = px.scatter(df, x='Freight', y='FulfillmentTime', \n                 title='Correlation between Freight Cost and Fulfillment Time',\n                 labels={'Freight': 'Freight Cost', 'FulfillmentTime': 'Fulfillment Time (days)'})\n\n# Show the plot\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee made the highest sales on a specific date?",
        "output": "```python\nfrom datetime import datetime\nimport pandas as pd\n\n# Define the date for which we want to find the highest sales\ntarget_date = 'YYYY-MM-DD'\n\n# SQL query to find the employee with the highest sales on the specific date\nsql_query = f\"\"\"\nSELECT e.EmployeeID, e.FirstName, e.LastName, \n       SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nWHERE o.OrderDate = '{target_date}' \nGROUP BY e.EmployeeID \nORDER BY TotalSales DESC LIMIT 1;\n\"\"\"\n\n# Execute the SQL query using the provided utility function\nresult_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products in each category? (Consider visualizing the average unit prices by category using a bar chart for easier comparison.)",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to execute\nsql_query = \"SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;\"\n\n# Execute the SQL query and store the result in a dataframe\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to visualize the average unit prices by category\nfig = px.bar(df, x='CategoryID', y='AveragePrice', title='Average Unit Price by Category')\n\n# Show the figure to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales revenue in 2022?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find the product with highest sales revenue in 2022\nsql_query = \"\"\"\nSELECT products.ProductID, \n       products.ProductName,\n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_sales \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' \nGROUP BY products.ProductID, products.ProductName\nORDER BY product_sales DESC \nLIMIT 1\n\"\"\"\n\n# Execute the SQL query and retrieve the result in a pandas dataframe\nresult_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been placed by each customer? (A bar chart can be used to visualize the number of orders per customer.)",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the order count per customer\nsql_query = \"SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID\"\n\n# Execute the SQL query\norders_df = execute_sql_query(sql_query)\n\n# Creating a bar chart using plotly\nfig = px.bar(orders_df, x='CustomerID', y='OrderCount', title='Number of Orders per Customer')\n\n# Display the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the most sales in Q4 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT employees.EmployeeID, \n       SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nJOIN employees ON orders.EmployeeID = employees.EmployeeID \nWHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' \nGROUP BY employees.EmployeeID \nORDER BY total_sales DESC \nLIMIT 1\n\"\"\"\n\n# Execute the SQL query using the utility function\nsales_data_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(sales_data_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the maximum, minimum, and average salary of the employees? (A box plot can visualize salary distribution effectively.)",
        "output": "```python\nimport plotly.express as px\n\n# Define SQL query\nsql_query = \"SELECT MAX(Salary) AS MaxSalary, MIN(Salary) AS MinSalary, AVG(Salary) AS AvgSalary FROM employees;\"\n\n# Execute SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display max, min, and average salary\nshow_to_user(result_df)\n\n# Query to get salary data for box plot\nsalary_query = \"SELECT Salary FROM employees;\"\n\n# Execute query to get all salaries\nsalary_df = execute_sql_query(salary_query)\n\n# Create box plot for salary distribution\nfig = px.box(salary_df, y='Salary', title='Salary Distribution')\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given per order in the last week?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to retrieve average discount per order in the last week\nsql_query = \"\"\"\nSELECT AVG([Order Details].Discount) AS Average_Discount \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nWHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK);\n\"\"\"\n\n# Execute SQL query and get the result as a dataframe\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df['Average_Discount'][0])\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for the year 2022?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to calculate average order value for the year 2022\nsql_query = \"\"\"\nSELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) \n       / COUNT(DISTINCT orders.OrderID) AS avg_order_value \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Extract the average order value from the DataFrame\naverage_order_value = df['avg_order_value'].iloc[0]\n\n# Display the result to user\nshow_to_user(average_order_value)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in the last quarter of 2022? (Consider visualizing this using a bar chart for better insights.)",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\n  SELECT CustomerID, COUNT(OrderID) AS OrderCount \n  FROM orders \n  WHERE OrderDate BETWEEN '2022-10-01' AND '2022-12-31' \n  GROUP BY CustomerID\n\"\"\"\n\n# Execute the SQL query and get the result as a dataframe\norders_data = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(orders_data, x='CustomerID', y='OrderCount', title='Orders by Customer in Q4 2022')\n\n# Show the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products ordered in each month of the current year? (A line chart or bar chart can illustrate monthly totals.)",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.Quantity) AS TotalQuantityOrdered \nFROM `Order Details` od \nJOIN orders o ON od.OrderID = o.OrderID \nWHERE YEAR(OrderDate) = YEAR(CURDATE()) \nGROUP BY Month;\n\"\"\"\n\n# Execute SQL query and get data\ndf = execute_sql_query(sql_query)\n\n# Create a line chart to represent the total quantity ordered each month\nfig = px.line(df, x='Month', y='TotalQuantityOrdered', title='Total Quantity of Products Ordered Each Month in Current Year', labels={'TotalQuantityOrdered': 'Total Quantity Ordered'})\n\n# Display the figure to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many orders included products with more than a 10% discount?",
        "output": "```python\nimport pandas as pd\n\n# Define SQL query to count distinct orders with more than 10% discount\nsql_query = \"\"\"\nSELECT COUNT(DISTINCT od.OrderID) as NumberOfOrders \nFROM [Order Details] od \nWHERE od.Discount > 0.10\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(result_df['NumberOfOrders'][0])\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for the past month?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio\nFROM [Order Details] od\nJOIN products p ON od.ProductID = p.ProductID\nJOIN orders o ON od.OrderID = o.OrderID\nWHERE EXTRACT(MONTH FROM o.OrderDate) = EXTRACT(MONTH FROM CURRENT_DATE - INTERVAL '1 MONTH')\nAND EXTRACT(YEAR FROM o.OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE - INTERVAL '1 MONTH');\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 3 cities with the most orders placed. (A bar chart can be useful to visualize and compare the top cities.)",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the top 3 cities with the most orders placed\nsql_query = \"\"\"\nSELECT ShipCity, COUNT(*) AS total_orders \nFROM orders \nGROUP BY ShipCity \nORDER BY total_orders DESC \nLIMIT 3;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to visualize the top cities\nfig = px.bar(df, x='ShipCity', y='total_orders', title='Top 3 Cities with Most Orders', labels={'ShipCity': 'City', 'total_orders': 'Total Orders'})\n\n# Display the result to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for orders shipped to 'Canada'?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT AVG(Freight) AS AverageShippingCost FROM orders WHERE ShipCountry = 'Canada';\"\n\n# Execute the SQL query to get the data\ndf = execute_sql_query(sql_query)\n\n# Since the result is a single value in a DataFrame, extract and print it.\naverage_shipping_cost = df['AverageShippingCost'][0]\n\n# Display the result to the user\nshow_to_user(pd.DataFrame({'AverageShippingCost': [average_shipping_cost]}))\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the retention rate of customers comparing the first half of 2023 to the previous year? (A line graph could help show changes in retention rates over time.)",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# Define SQL queries\nfirst_half_2023_query = \"\"\"\nSELECT COUNT(DISTINCT o.CustomerID) AS customer_count_2023_1H\nFROM orders o \nWHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'\n\"\"\"\n\nprevious_year_query = \"\"\"\nSELECT COUNT(DISTINCT o.CustomerID) AS customer_count_prev_year\nFROM orders o \nWHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'\n\"\"\"\n\n# Execute queries\nfirst_half_2023_df = execute_sql_query(first_half_2023_query)\nprevious_year_df = execute_sql_query(previous_year_query)\n\n# Calculate retention rate\ncustomer_retention_rate = (first_half_2023_df['customer_count_2023_1H'][0] / \n                           previous_year_df['customer_count_prev_year'][0])\n\n# Create DataFrame for visualization\nretention_data = pd.DataFrame({\n    'Period': ['First Half 2023'],\n    'Retention Rate': [customer_retention_rate]\n})\n\n# Visualize retention rate\nfig = px.line(retention_data, x='Period', y='Retention Rate', \n              title='Customer Retention Rate: First Half 2023 vs Previous Year')\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many distinct products have been ordered?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get the distinct product IDs\nsql_query = \"SELECT DISTINCT ProductID FROM [Order Details];\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Calculate the count of distinct products\ndistinct_product_count = len(result_df)\n\n# Display the result to the user\nshow_to_user(pd.DataFrame({'DistinctProducts': [distinct_product_count]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed each month by each customer? (A stacked bar chart might provide a clear visual representation.)",
        "output": "```python\nimport plotly.express as px\n\n# Step 1: Execute SQL Query\nsql_query = \"\"\"\nSELECT c.CustomerID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS OrderMonth, \nCOUNT(o.OrderID) AS OrderCount \nFROM customers c \nJOIN orders o ON c.CustomerID = o.CustomerID \nGROUP BY c.CustomerID, OrderMonth;\n\"\"\"\ndf = execute_sql_query(sql_query)\n\n# Step 2: Create a stacked bar chart\nfig = px.bar(df, x='OrderMonth', y='OrderCount', color='CustomerID', \n             title='Monthly Orders by Customer', \n             labels={'OrderMonth':'Order Month', \n                     'OrderCount':'Order Count', \n                     'CustomerID':'Customer ID'}, \n             barmode='stack')\n\n# Step 3: Show the plot\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the hire date of the oldest employee?",
        "output": "```python\nimport pandas as pd\n\n# Execute the SQL query to get the oldest employee's hire date\nsql_query = \"SELECT e.FirstName, e.LastName, e.HireDate FROM employees e ORDER BY e.HireDate ASC LIMIT 1\"\noldest_employee_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(oldest_employee_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many order details entries have a discount greater than 10%?",
        "output": "```python\nimport pandas as pd\n\n# The SQL query to get the count of order details entries with a discount greater than 10%\nsql_query = \"SELECT COUNT(*) as count FROM [Order Details] WHERE Discount > 0.1;\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the count result to the user\nshow_to_user(result_df['count'][0])\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average lead time? (A bar chart can highlight differences among suppliers.)",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve data on suppliers and their average lead time\nsql_query = \"\"\"\nSELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime \nFROM suppliers s \nJOIN products p ON s.SupplierID = p.SupplierID \nJOIN [Order Details] od ON p.ProductID = od.ProductID \nJOIN orders o ON od.OrderID = o.OrderID \nGROUP BY s.CompanyName \nORDER BY AverageLeadTime DESC\n\"\"\"\n\n# Execute the SQL query and get the data in a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to highlight differences among suppliers\nfig = px.bar(df, x='CompanyName', y='AverageLeadTime', title='Average Lead Time by Supplier')\n\n# Show the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees whose orders had the highest average discount applied. (Consider using a bar chart to visualize discounts by employee.)",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve required data\nsql_query = \"\"\"\nSELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount \nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nJOIN [Order Details] od ON o.OrderID = od.OrderID \nGROUP BY e.EmployeeID \nORDER BY AvgDiscount DESC;\n\"\"\"\n\n# Execute SQL query and retrieve data\ndf = execute_sql_query(sql_query)\n\n# Visualize the average discount by employee using a bar chart\nfig = px.bar(df, x='EmployeeID', y='AvgDiscount', title='Average Discount by Employee')\n\n# Display the figure\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products within each category? Show this using a bar chart of categories along with their average unit prices.",
        "output": "```python\nimport plotly.express as px\n\n# SQL Query to get average unit price per category\nsql_query = \"SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY CategoryID;\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Ensure the data type for CategoryID is string for proper categorical display\ndf['CategoryID'] = df['CategoryID'].astype(str) \n\n# Create a bar chart using plotly\nfig = px.bar(df, x='CategoryID', y='AverageUnitPrice', title='Average Unit Price per Category')\n\n# Display the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have never made a sale.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to retrieve employees who have never made a sale\nsql_query = \"\"\"\nSELECT e.EmployeeID, e.FirstName, e.LastName \nFROM employees e \nLEFT JOIN orders o \nON e.EmployeeID = o.EmployeeID \nWHERE o.OrderID IS NULL\n\"\"\"\n\n# Execute the SQL query\nemployees_without_sales_df = execute_sql_query(sql_query)\n\n# Show the result to the user\nshow_to_user(employees_without_sales_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped but not yet delivered?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT OrderID FROM orders WHERE ShippedDate IS NOT NULL AND RequiredDate IS NULL;\"\n\n# Execute the SQL query\norders_df = execute_sql_query(sql_query)\n\n# Count the number of orders shipped but not yet delivered\nshipped_not_delivered_count = orders_df.shape[0]\n\n# Create a result DataFrame to display\nresult_df = pd.DataFrame({\n    \"Shipped but Not Delivered Count\": [shipped_not_delivered_count]\n})\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders have the highest discounts applied? Visualize the top orders with the highest discounts using a bar chart.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# Define the SQL query to get order discounts\nsql_query = \"\"\"\nSELECT orders.OrderID, MAX([Order Details].Discount) AS MaxDiscount \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY orders.OrderID \nORDER BY MaxDiscount DESC \nLIMIT 10\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Visualize the top orders with the highest discounts\nfig = px.bar(df, x='OrderID', y='MaxDiscount', title='Top Orders with Highest Discounts')\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average time taken to ship an order? Use a histogram to visualize the distribution of shipping times.",
        "output": "```python\nimport plotly.express as px\nimport pandas as pd\n\n# SQL query to get the shipping times\nsql_query = \"\"\"\nSELECT DATEDIFF(ShippedDate, OrderDate) as ShippingTime FROM orders;\n\"\"\"\n\n# Execute the query and get the result as a pandas dataframe\ndf = execute_sql_query(sql_query)\n\n# Calculate the average shipping time\naverage_shipping_time = df['ShippingTime'].mean()\n\n# Display the average shipping time to the user\naverage_df = pd.DataFrame({'AverageShippingTime': [average_shipping_time]})\nshow_to_user(average_df)\n\n# Create a histogram to visualize the distribution of shipping times\nfig = px.histogram(df, x='ShippingTime', title='Distribution of Shipping Times')\n\n# Display the histogram to the user\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the top 5 products by sales for Q2 2023. Represent these top products using a bar chart for better insight.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to list top 5 products by sales for Q2 2023\nsql_query = \"\"\"\nSELECT products.ProductID, \n    SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales \nFROM [Order Details] \nJOIN products ON [Order Details].ProductID = products.ProductID \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' \nGROUP BY products.ProductID \nORDER BY total_sales DESC \nLIMIT 5\n\"\"\"\n\n# Execute the SQL query\ndf_top_products = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df_top_products, x='ProductID', y='total_sales', title='Top 5 Products by Sales for Q2 2023')\n\n# Display the chart\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products from each supplier have not been discontinued?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT suppliers.CompanyName, products.ProductName \nFROM suppliers \nINNER JOIN products \nON suppliers.SupplierID = products.SupplierID \nWHERE products.Discontinued = 0;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders where the quantity ordered exceeded 50 units in 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT COUNT(orders.OrderID) AS large_orders \nFROM [Order Details] \nJOIN orders ON [Order Details].OrderID = orders.OrderID \nWHERE [Order Details].Quantity > 50 \nAND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'\n\"\"\"\n\n# Execute the SQL query and get the result in a dataframe\ndf_large_orders = execute_sql_query(sql_query)\n\n# Extract the count value from the dataframe\nlarge_orders_count = df_large_orders.iloc[0]['large_orders']\n\n# Display the result to the user\nshow_to_user(pd.DataFrame({'Large Orders Count': [large_orders_count]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average quantity of products ordered per order?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT AVG([Order Details].Quantity) AS AverageQuantity FROM [Order Details]\"\n\n# Execute the SQL query\ndf_result = execute_sql_query(sql_query)\n\n# Extract the average quantity and display it\naverage_quantity = df_result['AverageQuantity'].iloc[0]\nshow_to_user(pd.DataFrame({'AverageQuantity': [average_quantity]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the performance of each product based on sales quantities in Q1 2023? Use a line or bar chart to illustrate product performance.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to retrieve the sales quantities for each product in Q1 2023\nsql_query = \"\"\"\nSELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance\nFROM [Order Details]\nJOIN products ON [Order Details].ProductID = products.ProductID\nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'\nGROUP BY products.ProductID\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to illustrate product performance\nfig = px.bar(df, x='ProductID', y='product_performance', title='Product Performance in Q1 2023')\n\n# Display the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 5 customers by the number of orders placed. Show results using a bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# Define SQL query to retrieve top 5 customers by number of orders\nsql_query = \"\"\"\nSELECT CustomerID, COUNT(OrderID) AS OrderCount \nFROM orders \nGROUP BY CustomerID \nORDER BY OrderCount DESC \nLIMIT 5;\n\"\"\"\n\n# Execute the SQL query using the provided utility function\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart using plotly\nfig = px.bar(df, x='CustomerID', y='OrderCount', title='Top 5 Customers by Number of Orders')\n\n# Display the result using the provided utility function\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping time for orders shipped to a specific country in the current month?",
        "output": "```python\nimport pandas as pd\nfrom datetime import datetime\n\n# Set the specified country\nspecified_country = 'specified_country'\n\n# Execute the SQL query to get the average shipping time\n# Use a parameterized query to avoid SQL injection\nquery = \"\"\"\n    SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime \n    FROM orders \n    WHERE DATE_FORMAT(OrderDate, '%%Y-%%m') = DATE_FORMAT(CURDATE(), '%%Y-%%m') \n    AND ShipCountry = %s;\n\"\"\"\nresult_df = execute_sql_query(query, (specified_country,))\n\n# Show the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have purchased more than 5 different products?",
        "output": "```python\nsql_query = \"\"\"\nSELECT customers.CustomerID, customers.CompanyName\nFROM customers\nJOIN orders ON customers.CustomerID = orders.CustomerID\nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID\nGROUP BY customers.CustomerID, customers.CompanyName\nHAVING COUNT(DISTINCT [Order Details].ProductID) > 5\n\"\"\"\n\n# Execute the SQL query\ndf_customers = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(df_customers)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the highest on-time delivery rate? Present this information with a pie chart or bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query to execute.\nsql_query = \"\"\"\nSELECT ShipRegion, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS on_time_rate\nFROM orders\nGROUP BY ShipRegion\nORDER BY on_time_rate DESC\nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query using the provided utility function.\ndf = execute_sql_query(sql_query)\n\n# Visualize the data with a bar chart to show the on-time delivery rates by region.\nfig = px.bar(df, x='ShipRegion', y='on_time_rate', title='On-Time Delivery Rate by Region')\n\n# Display the result to the user.\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed in the current year?",
        "output": "```python\nfrom datetime import datetime\nimport pandas as pd\n\n# SQL query\nsql_query = f\"\"\"\nSELECT COUNT(*) AS TotalOrders FROM orders \nWHERE YEAR(OrderDate) = YEAR(CURRENT_DATE);\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Show the total orders to the user\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total discount given on all orders in the last month.",
        "output": "```python\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\n# Calculate the start date for the last month\nstart_date_last_month = (datetime.now().replace(day=1) - timedelta(days=1)).replace(day=1).strftime('%Y-%m-%d')\n\n# SQL query to calculate the total discount\nsql_query = f\"\"\"\nSELECT \n    SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount \nFROM \n    orders \nJOIN \n    [Order Details] ON orders.OrderID = [Order Details].OrderID \nWHERE \n    orders.OrderDate >= '{start_date_last_month}';\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a stock level below their reorder level?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query to find products with stock below reorder level\nsql_query = \"SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;\"\n\n# Execute the SQL query using the provided utility function\ndf = execute_sql_query(sql_query)\n\n# Display the resulting dataframe to the user using the provided utility function\nshow_to_user(df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest number of orders placed? Show this with a bar chart of months and their corresponding order numbers.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the number of orders per month\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS NumberOfOrders\nFROM orders\nGROUP BY Month\nORDER BY NumberOfOrders DESC\n\"\"\"\n\n# Execute the SQL query and get the result as a pandas dataframe\norders_df = execute_sql_query(sql_query)\n\n# Create a bar chart showing the number of orders per month\nfig = px.bar(orders_df, x=\"Month\", y=\"NumberOfOrders\", title=\"Number of Orders per Month\")\n\n# Show the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee with the largest average order size. Visualize this using a bar chart.",
        "output": "```python\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT employees.EmployeeID, \n       AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderSize \nFROM employees \nJOIN orders ON employees.EmployeeID = orders.EmployeeID \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nGROUP BY employees.EmployeeID \nORDER BY AvgOrderSize DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Check if the dataframe is empty\nif df.empty:\n    raise ValueError(\"No data returned from the query.\")\n\n# Create a bar chart to visualize the result\nfig = px.bar(df, x='EmployeeID', y='AvgOrderSize', title='Employee with Largest Average Order Size')\n\n# Show the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many distinct customers placed orders each month? Use a line chart to show trends over the months.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the required data\nsql_query = \"\"\"\nSELECT DATE_TRUNC('month', o.OrderDate) AS Month, \n       COUNT(DISTINCT o.CustomerID) AS UniqueCustomers \nFROM orders o \nGROUP BY Month;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Ensure 'Month' column is recognized as a date\ndf['Month'] = pd.to_datetime(df['Month'])\n\n# Create a line chart using the data\nfig = px.line(df, x='Month', y='UniqueCustomers', title='Distinct Customers Placing Orders Each Month', labels={'Month': 'Month', 'UniqueCustomers': 'Number of Unique Customers'})\n\n# Display the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the average discounts applied per order?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT OrderID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY OrderID;\"\n\n# Execute the SQL query using the provided utility function\norder_discounts_df = execute_sql_query(sql_query)\n\n# Display the data analysis result\nshow_to_user(order_discounts_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for orders made in February 2023?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query\nsql_query = \"\"\"\nSELECT DATEDIFF(o.ShippedDate, o.OrderDate) AS FulfillmentTime \nFROM orders o \nWHERE MONTH(o.OrderDate) = 2 AND YEAR(o.OrderDate) = 2023;\n\"\"\"\n\n# Execute the query and retrieve data\norders_df = execute_sql_query(sql_query)\n\n# Calculate the average fulfillment time\navg_fulfillment_time = orders_df['FulfillmentTime'].mean()\n\n# Display the result\nshow_to_user(pd.DataFrame({'AvgFulfillmentTime': [avg_fulfillment_time]}))\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Get a list of employees and the number of orders they have handled.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount\nFROM employees e \nJOIN orders o ON e.EmployeeID = o.EmployeeID \nGROUP BY e.EmployeeID, e.FirstName, e.LastName;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for the product 'Chai' in May 2023?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio\nFROM [Order Details]\nJOIN products ON [Order Details].ProductID = products.ProductID\nJOIN orders ON [Order Details].OrderID = orders.OrderID\nWHERE products.ProductName = 'Chai'\nAND orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31'\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Extract the inventory turnover ratio value\ninventory_turnover_ratio = df.iloc[0]['inventory_turnover_ratio']\n\n# Display the result\nshow_to_user(inventory_turnover_ratio)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the shortest average order fulfillment time?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime \nFROM orders \nGROUP BY ShipVia \nORDER BY AverageFulfillmentTime ASC \nLIMIT 1;\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the number of products sold with discounts?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT ProductID \nFROM [Order Details] \nWHERE Discount > 0;\n\"\"\"\n\n# Execute the query to retrieve data\nresult_df = execute_sql_query(sql_query)\n\n# Count distinct ProductID\nproducts_with_discount = result_df['ProductID'].nunique()\n\n# Send the result to the user\nshow_to_user(pd.DataFrame({'ProductsWithDiscount': [products_with_discount]}))\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time per employee?",
        "output": "```python\nimport pandas as pd\n\n# Execute the SQL query\ndf = execute_sql_query(\"\"\"\nSELECT EmployeeID, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageFulfillmentTime \nFROM orders \nGROUP BY EmployeeID;\n\"\"\")\n\n# Display the result to the user\nshow_to_user(df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average number of units ordered per order?",
        "output": "```python\nimport pandas as pd\n\n# SQL Query to execute\nsql_query = \"SELECT AVG(Quantity) AS AvgQuantityPerOrder FROM [Order Details];\"\n\n# Execute the query and get the result in a dataframe\nresult_df = execute_sql_query(sql_query)\n\n# Since the result is a single value, extract and display it\navg_quantity_per_order = result_df['AvgQuantityPerOrder'].iloc[0]\n\n# Create a dataframe to display the result\ndisplay_df = pd.DataFrame({'AvgQuantityPerOrder': [avg_quantity_per_order]})\n\n# Show the result to the user\nshow_to_user(display_df)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the total revenue generated from orders shipped to Germany.",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue \nFROM orders \nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID \nWHERE orders.ShipCountry = 'Germany';\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result\ntotal_revenue = result_df['TotalRevenue'][0] if not result_df.empty else 0\nshow_to_user(pd.DataFrame({'TotalRevenue': [total_revenue]}))\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the freights cost totals for each month in 2023 and visualize them to identify trends.",
        "output": "```python\nimport pandas as pd\nimport plotly.express as px\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight \nFROM orders \nWHERE YEAR(OrderDate) = 2023 \nGROUP BY Month;\n\"\"\"\n\n# Execute the SQL query\ndata = execute_sql_query(sql_query)\n\n# Convert Month to datetime for proper sorting\ndata['Month'] = pd.to_datetime(data['Month'])\n\n# Visualize the results\nfig = px.line(data, x='Month', y='TotalFreight', title='Monthly Freight Costs in 2023', markers=True)\nshow_to_user(fig)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have an average unit price above $20?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT CategoryName \nFROM categories c \nJOIN products p ON c.CategoryID = p.CategoryID \nGROUP BY c.CategoryName \nHAVING AVG(p.UnitPrice) > 20;\n\"\"\"\n\n# Execute the query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(result_df)\n```",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the suppliers for orders placed in the first quarter of this year?",
        "output": "```python\nimport pandas as pd\n\n# SQL query to find suppliers for orders placed in the first quarter of 2023\nsql_query = \"\"\"\nSELECT DISTINCT s.CompanyName\nFROM suppliers s\nJOIN products p ON s.SupplierID = p.SupplierID\nJOIN [Order Details] od ON p.ProductID = od.ProductID\nJOIN orders o ON od.OrderID = o.OrderID\nWHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'\n\"\"\"\n\n# Execute the SQL query\nsuppliers_df = execute_sql_query(sql_query)\n\n# Display the results to the user\nshow_to_user(suppliers_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales quantity for each product and visualize to compare performance across products?",
        "output": "```python\nimport plotly.express as px\n\n# Execute the SQL query to retrieve the data\nsql_query = \"SELECT ProductID, SUM(Quantity) AS TotalSales FROM [Order Details] GROUP BY ProductID;\"\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart to visualize total sales quantity for each product\nfig = px.bar(df, x='ProductID', y='TotalSales', title='Total Sales Quantity for Each Product')\n\n# Display the visualization to the user\nshow_to_user(fig)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the highest number of orders?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"\"\"\nSELECT ShipCity, COUNT(OrderID) as NumberOfOrders \nFROM orders \nGROUP BY ShipCity \nORDER BY NumberOfOrders DESC \nLIMIT 1;\n\"\"\"\n\n# Execute the query\nresult_df = execute_sql_query(sql_query)\n\n# Display the result\nshow_to_user(result_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each shipping method and visualize to compare performance?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to fetch the relevant data\nsql_query = \"\"\"\nSELECT ShipVia, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageFulfillmentTime\nFROM orders\nGROUP BY ShipVia;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Rename columns if necessary\ndf.columns = ['ShipVia', 'AverageFulfillmentTime']\n\n# Create a visualization to compare average fulfillment times\nfig = px.bar(df, x='ShipVia', y='AverageFulfillmentTime', title='Average Order Fulfillment Time by Shipping Method')\n\n# Display the plot to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which customers have placed orders in the last month?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query to get customers who placed orders in the last month.\nsql_query = \"SELECT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);\"\n\n# Execute the SQL query and retrieve the data.\ndf_customers = execute_sql_query(sql_query)\n\n# Remove duplicate CustomerIDs if any.\ndf_unique_customers = df_customers.drop_duplicates()\n\n# Display the customer data to the user.\nshow_to_user(df_unique_customers)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers who have placed orders within the last 30 days.",
        "output": "```python\nimport pandas as pd\n\n# SQL query to get customers who have placed orders in the last 30 days\nsql_query = \"\"\"\nSELECT DISTINCT CustomerID\nFROM orders \nWHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY);\n\"\"\"\n\n# Execute the SQL query\ncustomers_last_30_days = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(customers_last_30_days)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and unit prices of all products?",
        "output": "```python\nimport pandas as pd\n\n# Define the SQL query\nsql_query = \"SELECT ProductName, UnitPrice FROM products;\"\n\n# Execute the query and get the results in a DataFrame\nproducts_df = execute_sql_query(sql_query)\n\n# Display the result to the user\nshow_to_user(products_df)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the monthly sales performance for each product and visualize to identify sales trends.",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to execute\nsql_query = \"\"\"\nSELECT \n    p.ProductID, \n    p.ProductName, \n    EXTRACT(MONTH FROM o.OrderDate) AS Month, \n    SUM(od.Quantity) AS MonthlySales \nFROM [Order Details] od \nJOIN products p \nON od.ProductID = p.ProductID \nJOIN orders o \nON od.OrderID = o.OrderID \nGROUP BY p.ProductID, p.ProductName, EXTRACT(MONTH FROM o.OrderDate);\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Ensure the 'Month' column is treated as an integer for correct x-axis ordering\ndf['Month'] = df['Month'].astype(int)\n\n# Create the visualization\nfig = px.line(\n    df, \n    x='Month', \n    y='MonthlySales', \n    color='ProductName',\n    labels={'MonthlySales': 'Monthly Sales', 'Month': 'Month'},\n    title='Monthly Sales Performance for Each Product'\n)\n\n# Show the visualization\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated last month?",
        "output": "```python\n# Define the SQL query\nsql_query = \"\"\"\nSELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales_Revenue\nFROM orders\nJOIN [Order Details] ON orders.OrderID = [Order Details].OrderID\nWHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)\nAND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);\n\"\"\"\n\n# Execute the SQL query\nresult_df = execute_sql_query(sql_query)\n\n# Extract the total sales revenue from the result\ntotal_sales_revenue = result_df.loc[0, 'Total_Sales_Revenue']\n\n# Show the result to the user\nshow_to_user(total_sales_revenue)\n```",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees have handled the most orders, and can this be illustrated using a bar chart to compare the number of orders handled by each employee?",
        "output": "```python\nimport plotly.express as px\n\n# SQL query to get the data\nsql_query = \"\"\"\nSELECT EmployeeID, COUNT(OrderID) AS OrdersHandled\nFROM orders\nGROUP BY EmployeeID\nORDER BY OrdersHandled DESC;\n\"\"\"\n\n# Execute the SQL query\ndf = execute_sql_query(sql_query)\n\n# Create a bar chart\nfig = px.bar(df, x='EmployeeID', y='OrdersHandled', title='Number of Orders Handled by Each Employee')\n\n# Show the bar chart to the user\nshow_to_user(fig)\n```",
        "difficulty": "medium"
    }
]