[
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 cities with the highest order volume.",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY orders.ShipCity ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest sales revenue in January 2023?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount given on orders in 2022?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for March 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales generated in February 2023?",
        "output": "SELECT SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') = '2023-02';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for the current month?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed the highest number of orders?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY OrderCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly product performance in terms of sales quantity.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE DATE_FORMAT(orderdate, '%Y-%m') = 'yyyy-mm' GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the inventory turnover ratio for product ID 7 for February 2023.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].ProductID = 7 AND orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total number of products sold by each employee in a given year.",
        "output": "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE strftime('%Y', o.OrderDate) = ? GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the most frequently ordered product.",
        "output": "SELECT products.ProductID, products.ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products had the highest quantity ordered in the last year?",
        "output": "SELECT ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY ProductID ORDER BY TotalQuantity DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue for orders shipped to each country?",
        "output": "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in the last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= CURDATE() - INTERVAL 1 MONTH;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total units on order for all products?",
        "output": "SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(OrderID) AS TotalLateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping methods are used most frequently?",
        "output": "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales for each employee in each country?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered more than 1000 times?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalOrdered FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 1000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue generated by each product?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order in December 2021?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE MONTH(OrderDate) = 12 AND YEAR(OrderDate) = 2021;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders included a discount in January 2023?",
        "output": "SELECT COUNT(DISTINCT o.OrderID) AS DiscountedOrders FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' AND od.Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers who have supplied products that are discontinued.",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 cities by number of suppliers?",
        "output": "SELECT City, COUNT(*) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest number of units in stock?",
        "output": "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated from orders placed in the last month?",
        "output": "SELECT SUM(od.Quantity * (od.UnitPrice - (od.UnitPrice * od.Discount))) AS TotalRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN DATE_TRUNC('MONTH', CURRENT_DATE - INTERVAL '1 MONTH') AND LAST_DAY(CURRENT_DATE - INTERVAL '1 MONTH');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that are discontinued.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer had the highest total sales in the second half of 2022?",
        "output": "SELECT O.CustomerID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') IN ('2022-07', '2022-08', '2022-09', '2022-10', '2022-11', '2022-12') GROUP BY O.CustomerID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees generated the most sales revenue in Q1 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were cancelled?",
        "output": "SELECT COUNT(*) AS CancelledOrders FROM orders WHERE ShippedDate IS NULL",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost in February 2022?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE MONTH(OrderDate) = 2 AND YEAR(OrderDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on time in May 2023?",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders O WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') = '2023-05') AS OnTimeDeliveryRate FROM orders O WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') = '2023-05' AND O.ShippedDate <= O.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the cities with the highest number of suppliers.",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have inventory levels below the reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many days, on average, does it take from placing an order to shipping it?",
        "output": "SELECT AVG(DATE_PART('day', ShippedDate::timestamp - OrderDate::timestamp)) AS AverageDaysToShip FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average delivery time for orders shipped by each shipping company?",
        "output": "SELECT shippers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_delivery_time FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY avg_delivery_time",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have generated the most revenue?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers placed the most orders in the last month?",
        "output": "SELECT orders.CustomerID, COUNT(orders.OrderID) AS Total_Orders FROM orders WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY orders.CustomerID ORDER BY Total_Orders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales per month for each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders placed by each employee in the last year?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average freight cost per order for each month in 2021.",
        "output": "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, AVG(Freight) AS AverageFreight FROM orders WHERE YEAR(OrderDate) = 2021 GROUP BY YEAR(OrderDate), MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top 5 products by total sales.",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 best-performing products in terms of quantity sold in the last month?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the least popular product based on units sold in 2023.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_units FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY total_units ASC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for products in the second quarter of 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the names of all the products that have never been ordered?",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify orders with a total value above $500.",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 500;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the employees who have never had any orders?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales amount generated by each supplier?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with the highest and lowest overall sales revenue.",
        "output": "(SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SalesRevenue DESC LIMIT 1) UNION ALL (SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS SalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SalesRevenue ASC LIMIT 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have a quantity greater than 100?",
        "output": "SELECT COUNT(*) as HighQuantityOrders FROM [Order Details] WHERE Quantity > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the most units on order.",
        "output": "SELECT ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated from all orders?",
        "output": "SELECT SUM(UnitPrice * Quantity) AS TotalRevenue FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products generated the highest sales revenue in the second quarter of 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY products.ProductID ORDER BY sales_revenue DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products ordered by each customer?",
        "output": "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top 3 most discontinued products.",
        "output": "SELECT products.ProductName, COUNT(*) AS DiscontinueCount FROM products WHERE Discontinued = 1 GROUP BY products.ProductName ORDER BY DiscontinueCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of unique customers who placed orders in the last year?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Track the monthly change in order fulfillment time.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders had a freight cost greater than $100 last month?",
        "output": "SELECT COUNT(*) AS HighFreightOrders FROM orders WHERE Freight > 100 AND OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products for each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of orders shipped to?",
        "output": "SELECT ShipCity, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer made the highest number of orders last month?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) AND MONTH(OrderDate) = MONTH(CURDATE()) - 1 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much revenue does each city generate?",
        "output": "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for all orders?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average reorder level for all products?",
        "output": "SELECT AVG(ReorderLevel) FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the suppliers who have shipped orders with an average lead time of less than a week.",
        "output": "SELECT suppliers.SupplierID, CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, CompanyName HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) < 7;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for the year 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS avg_order_value FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 customers by total revenue generated.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM customers INNER JOIN orders ON customers.CustomerID = orders.CustomerID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY total_revenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from orders with no discount?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity) AS TotalRevenue FROM [Order Details] od WHERE od.Discount = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month ORDER BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales by each employee in the United States?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS USASales FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipCountry = 'USA' GROUP BY e.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest average shipping cost over the last year?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ShipCountry ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products with the highest unit prices?",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by employee ID 1001?",
        "output": "SELECT COUNT(*) AS NumberOfOrders FROM orders WHERE EmployeeID = 1001;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders placed in the last month?",
        "output": "SELECT COUNT(*) AS NumberOfOrders FROM orders WHERE OrderDate >= CURRENT_DATE - INTERVAL '1 month';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given for orders placed in December 2021?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate BETWEEN '2021-12-01' AND '2021-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees are older than 50 years?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, FLOOR(DATEDIFF(CURDATE(), e.BirthDate) / 365) AS Age FROM employees e HAVING Age > 50;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity per unit for all products?",
        "output": "SELECT AVG(CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS UNSIGNED)) AS AverageQuantityPerUnit FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total inventory value for each product?",
        "output": "SELECT p.ProductID, p.UnitsInStock * p.UnitPrice AS InventoryValue FROM products p;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given on products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have the highest sales performance in 2023?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest total sales volume?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSalesVolume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalSalesVolume DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are from suppliers based in the same country as the company?",
        "output": "SELECT ProductID, ProductName FROM products WHERE SupplierID IN (SELECT SupplierID FROM suppliers WHERE suppliers.Country = 'USA');",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the total freight cost for shipments to the USA in May 2023?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA' AND OrderDate BETWEEN '2023-05-01' AND '2023-05-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is most commonly used?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS use_count FROM orders GROUP BY ShipVia ORDER BY use_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the most orders in the last three months?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 3 MONTH GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List products that need to be reordered.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are discontinued, and what is the total revenue lost from these products?",
        "output": "SELECT COUNT(*) as DiscontinuedProducts, SUM(od.Quantity * od.UnitPrice) as TotalRevenueLost FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have orders that were shipped later than the required date?",
        "output": "SELECT suppliers.SupplierID, CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order processing time (OrderDate to ShippedDate)?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageProcessingTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total number of orders placed and the total revenue for each employee.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in December 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE MONTH(orders.OrderDate) = 12 AND YEAR(orders.OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue generated for each month of the year.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlyRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many different products were ordered in the last month?",
        "output": "SELECT COUNT(DISTINCT [Order Details].ProductID) AS Unique_Products FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the order IDs of orders that were shipped to 'USA'.",
        "output": "SELECT OrderID FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders had a freight cost greater than $50 in the past year?",
        "output": "SELECT COUNT(OrderID) AS OrdersCount FROM orders WHERE Freight > 50 AND OrderDate >= CURDATE() - INTERVAL 1 YEAR;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders that were shipped late.",
        "output": "SELECT o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have the highest sales by quantity?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales (in quantity) for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS TotalQuantitySold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 10 customers by total sales value in the current year.",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied to orders that include ProductID 42?",
        "output": "SELECT products.ProductID, products.ProductName, AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.ProductID = 42 GROUP BY products.ProductID",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped via each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total cost of goods sold for each month?",
        "output": "SELECT DATEPART(month, OrderDate) AS Month, SUM(OD.Quantity * OD.UnitPrice) AS TotalCostOfGoodsSold FROM [Order Details] OD GROUP BY DATEPART(month, OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products with the highest average selling price discounted.",
        "output": "SELECT p.ProductID, AVG((od.UnitPrice - od.UnitPrice * od.Discount) * od.Quantity) AS AvgSellingPriceDiscounted FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY AvgSellingPriceDiscounted DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many products were ordered with a discount greater than 10%?",
        "output": "SELECT COUNT(*) AS TotalDiscountedProducts FROM [Order Details] WHERE Discount > 0.1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the highest average on-time delivery rate?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units ordered for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Lifetime Value for each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have more than 100 units in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers who have supplied products to more than 3 different countries.",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID = o.ProductID GROUP BY s.SupplierID, s.CompanyName HAVING COUNT(DISTINCT o.ShipCountry) > 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most expensive products?",
        "output": "SELECT s.SupplierID, MAX(p.UnitPrice) AS MaxPrice FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compare the total sales for each employee in the last month to the previous month.",
        "output": "SELECT employees.EmployeeID, SUM(CASE WHEN MONTH(orders.OrderDate) = MONTH(CURDATE()) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) AS LastMonthSales, SUM(CASE WHEN MONTH(orders.OrderDate) = MONTH(CURDATE()) - 2 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) AS PreviousMonthSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have over 500 units in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > 500;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of shipped orders?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) as ShippedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID ORDER BY COUNT(o.OrderID) DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average sales revenue per region for the year 2023?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY region.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of unique customers who placed orders in 2022?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE YEAR(OrderDate) = 2022;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for 'ProductID' 101 in June 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].ProductID = 101 AND orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the ratio of the number of orders handled to the total sales amount for each employee.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSalesAmount, COUNT(orders.OrderID) / SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS OrderToSalesRatio FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID LEFT JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers placed orders that were not delivered on time in 2023?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, orders.OrderID, orders.ShippedDate, orders.RequiredDate FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.ShippedDate > orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the average unit prices of products supplied by each supplier?",
        "output": "SELECT suppliers.SupplierID, CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of orders each product has been part of?",
        "output": "SELECT p.ProductName, COUNT(od.OrderID) AS TotalOrders FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the best lead time performance in the first half of 2022?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, products.OrderDate)) AS supplier_lead_time FROM orders JOIN products ON orders.ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-06-30' GROUP BY products.SupplierID ORDER BY supplier_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are below their reorder level as of today?",
        "output": "SELECT products.ProductID, products.ProductName FROM products WHERE products.UnitsInStock < products.ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by customers from the USA?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') as Month, AVG(DATEDIFF(ShippedDate, OrderDate)) as AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Get the total units on order for each supplier.",
        "output": "SELECT s.SupplierID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of customers in each country?",
        "output": "SELECT Country, COUNT(*) AS NumberOfCustomers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the Inventory Turnover Ratio for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity sold for products that have a discount?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE Discount > 0 GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given on orders placed in the current month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees in terms of sales for the current year.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight costs for orders shipped to each country.",
        "output": "SELECT ShipCountry, SUM(Freight) as TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees who have not processed any orders.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier delivered the most products in terms of quantity?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 best-selling products by quantity?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales performance in Q1 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest average order value?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AverageOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the products that have been ordered but not yet shipped.",
        "output": "SELECT * FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average reorder level of products supplied by each supplier?",
        "output": "SELECT SupplierID, AVG(ReorderLevel) AS AvgReorderLevel FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders that were delivered on or before the required date last month?",
        "output": "SELECT (COUNT(*) * 100) / (SELECT COUNT(*) FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 SECOND MONTH)) AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 SECOND MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the birthdate of the youngest employee?",
        "output": "SELECT e.FirstName, e.LastName, e.BirthDate FROM employees e ORDER BY e.BirthDate DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units in stock for all products?",
        "output": "SELECT SUM(UnitsInStock) AS TotalUnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of products sold in each month of the current year?",
        "output": "SELECT DATE_FORMAT(Orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN Orders ON [Order Details].OrderID = Orders.OrderID WHERE YEAR(Orders.OrderDate) = YEAR(CURRENT_DATE) GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average number of items per order for the current quarter?",
        "output": "SELECT AVG(Quantity) AS AverageItemsPerOrder FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) AND YEAR(OrderDate) = YEAR(CURDATE()));",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders shipped to each region?",
        "output": "SELECT ShipRegion, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied to orders in 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for September 2023?",
        "output": "SELECT SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much sales revenue did each employee generate in March 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Fetch all orders that have not been shipped yet along with the supplier details.",
        "output": "SELECT o.OrderID, s.CompanyName, s.ContactName FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Compare the fulfillment time between different shipping methods.",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the count of orders and total freight cost grouped by shipping methods for the past month?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders, SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 MONTH GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total freight cost for each shipping method.",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total units in stock for each supplier?",
        "output": "SELECT p.SupplierID, SUM(p.UnitsInStock) AS TotalUnitsInStock FROM products p GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and prices of all products currently in stock?",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has hired the most recent employee?",
        "output": "SELECT e.FirstName, e.LastName FROM employees e ORDER BY e.HireDate DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products sold in January 2023?",
        "output": "SELECT SUM(Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between the order date and the shipped date for orders shipped to 'USA'?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingDays FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 customers based on the total revenue they generated?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total discount given for each employee's sales?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM(([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount)) AS TotalDiscount FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID JOIN employees ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered (i.e., their units in stock are below their reorder level)?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each city's customers?",
        "output": "SELECT c.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c INNER JOIN orders o ON c.CustomerID = o.CustomerID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of current inventory based on unit price and units in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders that were shipped from each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS PercentOfTotalOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units sold for each product?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has handled the highest number of distinct customers?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(DISTINCT orders.CustomerID) AS CustomerCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY CustomerCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest unit prices?",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for the last month?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product with the highest unit price and its supplier.",
        "output": "SELECT p.ProductName, p.UnitPrice, s.SupplierName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID ORDER BY p.UnitPrice DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the total number of items ordered in May 2023?",
        "output": "SELECT SUM(od.Quantity) AS TotalItemsOrdered FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-05';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest discount rates applied?",
        "output": "SELECT p.ProductName, MAX(od.Discount) AS HighestDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY HighestDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of units in stock for each product?",
        "output": "SELECT p.ProductName, p.UnitsInStock * p.UnitPrice AS StockValue FROM products p;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which are the top 5 products by sales revenue?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalSalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the number of orders processed by each employee.",
        "output": "SELECT EmployeeID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue generated each month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') as Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each product, including discounts?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * (od.UnitPrice - (od.UnitPrice * od.Discount))) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the shortest average lead time?",
        "output": "SELECT suppliers.CompanyName FROM suppliers INNER JOIN (SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID ORDER BY AvgLeadTime ASC LIMIT 1) AS shortest_lead_time ON suppliers.SupplierID = shortest_lead_time.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for the first half of 2023?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE NULL END) * 100.0 / COUNT(OrderID) AS OnTimeRate FROM orders WHERE YEAR(OrderDate) = 2023 AND MONTH(OrderDate) <= 6;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders have not been shipped yet?",
        "output": "SELECT * FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of late deliveries?",
        "output": "SELECT COUNT(OrderID) as TotalLateDeliveries FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered the most?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer generated the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the number of orders placed by each employee.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many discontinued products are there in the inventory?",
        "output": "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the reorder level for each product.",
        "output": "SELECT ProductName, ReorderLevel FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the last quarter?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been processed by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been placed by each employee?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique customers placed orders in November 2023?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE OrderDate BETWEEN '2023-11-01' AND '2023-11-30';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are currently in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest and lowest sales quantities?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalQuantity DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the orders that were shipped after the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost handled by each employee?",
        "output": "SELECT employees.EmployeeID, employees.LastName, employees.FirstName, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which city has the highest sales revenue in Q4 of 2023?",
        "output": "SELECT orders.ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' GROUP BY orders.ShipCity ORDER BY total_revenue DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the products with the lowest inventory turnover rate?",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice) / AVG(UnitsInStock) AS InventoryTurnoverRate FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductID ORDER BY InventoryTurnoverRate ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the revenue generated per employee.",
        "output": "SELECT o.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders were shipped on time?",
        "output": "SELECT * FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer placed the highest number of orders in 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS total_orders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY total_orders DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List products that need to be reordered (UnitsInStock <= ReorderLevel).",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are discontinued and which suppliers provide them?",
        "output": "SELECT products.ProductName, suppliers.CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for each country?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the customer retention rate for the first quarter of 2023.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' THEN orders.CustomerID END) * 1.0 / COUNT(DISTINCT orders.CustomerID)) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product category?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY inventory_turnover_ratio DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who were hired in the year 2022.",
        "output": "SELECT EmployeeID, LastName, FirstName FROM employees WHERE HireDate BETWEEN '2022-01-01' AND '2022-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products are ordered the most?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales by each product category for the year 2023?",
        "output": "SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY c.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which months had the highest sales volume?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly on-time delivery rate for 2021.",
        "output": "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE YEAR(OrderDate) = 2021 GROUP BY YEAR(OrderDate), MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgOrderFulfillmentTime FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product with the highest inventory turnover ratio in the last month.",
        "output": "SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY p.ProductName ORDER BY InventoryTurnoverRatio DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping destination city?",
        "output": "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with less than 10 units in stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for the last six months?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / (SELECT AVG(UnitsInStock) FROM products WHERE products.Discontinued = 0) AS InventoryTurnoverRatio FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY Month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied to the orders of each customer?",
        "output": "SELECT c.CustomerID, AVG(od.Discount) AS AvgDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the orders that have a freight cost greater than $100.",
        "output": "SELECT OrderID FROM orders WHERE Freight > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of orders shipped late?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS LateOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY employees.EmployeeID ORDER BY LateOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of products ordered per order?",
        "output": "SELECT OrderID, AVG(Quantity) AS AverageProductsOrdered FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products that have a discount applied on them in any order.",
        "output": "SELECT DISTINCT products.ProductID, products.ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders not yet shipped past their required date?",
        "output": "SELECT COUNT(OrderID) AS UnShippedPastRequired FROM orders WHERE ShippedDate IS NULL AND RequiredDate < CURDATE();",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers along with their order count.",
        "output": "SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS OrderCount FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID, customers.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many unique products does each supplier provide?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS UniqueProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the city which received the most shipments.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS ShipmentCount FROM orders GROUP BY ShipCity ORDER BY ShipmentCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for the product with ProductID 5 in March 2022?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.ProductID = 5 AND orders.OrderDate BETWEEN '2022-03-01' AND '2022-03-31'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 10 most frequently ordered products in the past year.",
        "output": "SELECT P.ProductName, COUNT(OD.ProductID) AS Frequency FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE OD.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY P.ProductName ORDER BY Frequency DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the total freight cost incurred in 2023?",
        "output": "SELECT SUM(o.Freight) AS TotalFreightCost FROM orders o WHERE DATE_FORMAT(o.OrderDate, '%Y') = '2023';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which order took the longest to be fulfilled?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS LongestFulfillmentTime FROM orders ORDER BY LongestFulfillmentTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance of each product based on the number of units sold this month?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalUnitsSold FROM [Order Details] WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY ProductID ORDER BY TotalUnitsSold DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 suppliers by total sales in 2023?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest number of units on order?",
        "output": "SELECT ProductID, ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not been ordered in the last year?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE OrderDate >= DATEADD(year, -1, GETDATE()));",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for the last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value per month for 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee process last year?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was most commonly used in 2021?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2021 GROUP BY ShipVia ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 10 products with the highest revenue.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY ProductRevenue DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Lifetime Value (CLTV) for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer retention rate for the past year.",
        "output": "SELECT COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) THEN orders.CustomerID END) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Retention Rate for the last quarter.",
        "output": "SELECT (COUNT(DISTINCT returning_customers.CustomerID) * 100.0 / COUNT(DISTINCT initial_customers.CustomerID)) as retention_rate FROM (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate BETWEEN '2021-10-01' AND '2021-12-31') returning_customers, (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < '2021-07-01') initial_customers;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) as TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier delivered products the fastest in September 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY products.SupplierID ORDER BY supplier_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shippers have the highest on-time delivery rates?",
        "output": "SELECT shippers.ShipperID, SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.ShipperID ORDER BY on_time_delivery_rate DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for orders placed in December 2022?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-12-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the highest total units in stock?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID ORDER BY TotalUnitsInStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are from the 'Eastern' region?",
        "output": "SELECT CompanyName FROM suppliers WHERE Region = 'Eastern';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the customer retention rate for the last six months.",
        "output": "SELECT (COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE())) / (COUNT(DISTINCT CustomerID) FILTER (WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 6 MONTH))) AS RetentionRate FROM orders",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Generate a list of suppliers based on the country and count the number of products they supply.",
        "output": "SELECT s.Country, COUNT(p.ProductID) AS ProductsCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Compute the average time taken by each supplier to deliver products.",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN orders o ON p.ProductID = o.OrderID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied on each product?",
        "output": "SELECT p.ProductID, p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the shipping cost per order for the second quarter of 2023?",
        "output": "SELECT AVG(o.Freight) AS avg_shipping_cost FROM orders o WHERE o.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of products sold in the last month?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(month, -1, GETDATE())) GROUP BY products.ProductName ORDER BY TotalSold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who has managed the most orders.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired in the last year?",
        "output": "SELECT COUNT(*) AS NewHires FROM employees WHERE HireDate >= CURDATE() - INTERVAL 1 YEAR;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have not placed any orders in the past year?",
        "output": "SELECT CustomerID, CompanyName FROM customers WHERE CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the product performance for 'ProductID' 102 for every month of 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].ProductID = 102 AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories of products generate the highest revenue?",
        "output": "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been placed each month in the current year?",
        "output": "SELECT EXTRACT(YEAR_MONTH FROM OrderDate) AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = YEAR(CURDATE()) GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate Customer Lifetime Value for each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as lifetime_value FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in April 2023?",
        "output": "SELECT o.CustomerID, COUNT(*) AS OrderCount FROM orders o WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-04' GROUP BY o.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the top 3 suppliers based on average lead time?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID ORDER BY AverageLeadTime ASC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List full names and titles of all employees.",
        "output": "SELECT FirstName || ' ' || LastName AS FullName, Title FROM employees;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the order with the highest freight cost.",
        "output": "SELECT OrderID, Freight FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average unit price of products provided by each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS avg_unit_price FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales for each employee by country.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName, o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in the last month?",
        "output": "SELECT COUNT(*) AS OrdersLastMonth FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee with the highest average order value excluding freight.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the most products?",
        "output": "SELECT e.EmployeeID, SUM(od.Quantity) AS TotalProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance (total quantity ordered) of each product on a monthly basis?",
        "output": "SELECT ProductID, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalOrdered FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductID, Month ORDER BY ProductID, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped in the city of New York?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCity = 'New York';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 3 regions with the highest number of orders.",
        "output": "SELECT ShipRegion, COUNT(*) as number_of_orders FROM orders GROUP BY ShipRegion ORDER BY number_of_orders DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer placed the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have worked for more than 10 years?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE DATEDIFF(CURDATE(), e.HireDate) > (10 * 365);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to orders for each product?",
        "output": "SELECT p.ProductID, p.ProductName, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales in 2022?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify customers who placed more than 10 orders in 2022.",
        "output": "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = '2022' GROUP BY CustomerID HAVING OrderCount > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders included more than 5 products?",
        "output": "SELECT COUNT(OrderID) AS OrderCount FROM (SELECT o.OrderID, COUNT(od.ProductID) AS ProductCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID HAVING COUNT(od.ProductID) > 5) AS subquery;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders placed in 2023?",
        "output": "SELECT SUM(Freight) AS total_freight_cost FROM orders WHERE YEAR(OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total number of products on order which are not yet shipped.",
        "output": "SELECT SUM([Order Details].Quantity) AS TotalProductsOnOrder FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE products.UnitsOnOrder > 0 AND orders.ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products have been ordered the most in 2023?",
        "output": "SELECT od.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY od.ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the percentage of orders processed by each employee out of the total orders.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS OrderPercentage FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the Inventory Turnover Ratio for the current month?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE MONTH(CURDATE()) = MONTH([Order Details].OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated by employee with EmployeeID=5 in January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE employees.EmployeeID=5 AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance of each product based on sales and inventory levels?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of products ordered in each category?",
        "output": "SELECT CategoryID, COUNT(DISTINCT products.ProductID) as TotalProducts FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders have a freight cost greater than $100?",
        "output": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM orders) AS PercentageFreightOver100 FROM orders WHERE Freight > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the salary distribution among different job titles?",
        "output": "SELECT employees.Title, AVG(employees.Salary) AS AvgSalary FROM employees GROUP BY employees.Title;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders delivered on or before the required date this month?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate)::DECIMAL / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE DATE_PART('month', OrderDate) = DATE_PART('month', CURRENT_DATE) AND DATE_PART('year', OrderDate) = DATE_PART('year', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were shipped late by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average discount given on products in the order details.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for orders shipped in February 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.ShippedDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for orders placed in December 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many units of each product were sold in the year 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most products?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given across all orders?",
        "output": "SELECT AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were fulfilled within two days?",
        "output": "SELECT COUNT(OrderID) AS FulfilledWithinTwoDays FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units in stock for each product?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products along with their suppliers' names.",
        "output": "SELECT products.ProductID, products.ProductName, suppliers.SupplierName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired in the year 2022?",
        "output": "SELECT COUNT(*) AS NumHires FROM employees WHERE YEAR(HireDate) = 2022;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the suppliers providing the most products.",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped to 'USA'?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders placed by customers from 'Germany'?",
        "output": "SELECT COUNT(*) FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.Country = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount applied per order?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the order with the highest freight cost.",
        "output": "SELECT OrderID, Freight AS HighestFreightCost FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer placed the first order in 2023?",
        "output": "SELECT orders.CustomerID, orders.OrderDate FROM orders ORDER BY orders.OrderDate ASC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales in the first quarter of 2022?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS QuarterSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY employees.EmployeeID ORDER BY QuarterSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS avg_freight_cost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders placed in '2022-01'?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE DATE_PART('year', OrderDate) = 2022 AND DATE_PART('month', OrderDate) = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total discounts given across all orders last year.",
        "output": "SELECT SUM(Discount) FROM [Order Details] WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 products by total quantity sold in Q1 of 2023.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average discount applied per order.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for orders placed in the last month?",
        "output": "SELECT AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AverageFulfillmentTime FROM orders WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 MONTH' AND OrderDate < DATE_TRUNC('month', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total order quantity for each product in a specific month.",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE MONTH(od.OrderID) = MONTH('specific-month') AND YEAR(od.OrderID) = YEAR('specific-year') GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on all products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers are from the USA and have placed orders in 2022?",
        "output": "SELECT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.Country = 'USA' AND orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in the last year?",
        "output": "SELECT COUNT(*) FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the average order value each month for the year 2022?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2022 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped within the same country?",
        "output": "SELECT COUNT(OrderID) AS OrdersWithinSameCountry FROM orders WHERE ShipCountry = ShippingCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average reorder level for each category of products?",
        "output": "SELECT CategoryID, AVG(ReorderLevel) AS AvgReorderLevel FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify suppliers whose products are always in stock (never need reordering).",
        "output": "SELECT s.SupplierName FROM suppliers s INNER JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock > 0 AND p.UnitsInStock = p.UnitsOnOrder;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value across all orders?",
        "output": "SELECT AVG(TotalOrderValue) AS AverageOrderValue FROM (SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID) AS OrderValues",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month has the highest average shipping cost in 2023?",
        "output": "SELECT MONTH(OrderDate) AS Month, AVG(Freight) AS AverageShippingCost FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY MONTH(OrderDate) ORDER BY AverageShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the order fulfillment time for orders placed in March 2023.",
        "output": "SELECT AVG(DATEDIFF(O.ShippedDate, O.OrderDate)) AS FulfillmentTime FROM orders O WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') = '2023-03';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied to products in each order?",
        "output": "SELECT OrderID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of discontinued products sold?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSoldQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the most frequently ordered product.",
        "output": "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the overall average unit price of all products?",
        "output": "SELECT AVG(UnitPrice) AS OverallAverageUnitPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders delivered on or before the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from all orders?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find all orders that were not shipped by the required date.",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions generated the highest sales revenue?",
        "output": "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS RegionRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY RegionRevenue DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for each month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY DATE_TRUNC('month', o.OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are delivered on or before the required date?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate)) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are currently in stock?",
        "output": "SELECT SUM(UnitsInStock) AS TotalUnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units ordered for each product in the last quarter?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the top 5 products by units in stock.",
        "output": "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have more than five years of tenure?",
        "output": "SELECT * FROM employees WHERE DATEDIFF(CURDATE(), HireDate) / 365 > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the top 5 cities with the highest number of orders in 2023.",
        "output": "SELECT O.ShipCity, COUNT(*) AS OrderCount FROM orders O WHERE DATE_FORMAT(O.OrderDate, '%Y') = '2023' GROUP BY O.ShipCity ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate in 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(*)) * 100 AS on_time_delivery_rate FROM orders GROUP BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied per order in Q2 of 2023?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE QUARTER(o.OrderDate) = 2 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the most different products?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for the first half of 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the product with the highest unit price?",
        "output": "SELECT p.ProductName FROM products p INNER JOIN suppliers s ON p.SupplierID = s.SupplierID ORDER BY p.UnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped on time in 2022?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total revenue generated for each supplier.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time for each supplier in delivering products?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS SupplierLeadTime FROM products p JOIN orders o ON p.ProductID = o.OrderID GROUP BY p.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the maximum, minimum, and average salary of employees?",
        "output": "SELECT MAX(Salary) AS MaxSalary, MIN(Salary) AS MinSalary, AVG(Salary) AS AvgSalary FROM employees;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest unit price?",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have not placed any orders in the last year?",
        "output": "SELECT CustomerID, CompanyName FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which order had the highest discount applied?",
        "output": "SELECT TOP 1 o.OrderID, od.Discount AS HighestDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID ORDER BY od.Discount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average unit price of items sold in February 2023?",
        "output": "SELECT AVG(od.UnitPrice) AS AvgUnitPrice FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-02';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated each month in 2022?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = 2022 GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers by total revenue.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the total and average freight cost per month for the current year.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreightCost, AVG(Freight) AS AvgFreightCost FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products based on sales revenue in 2023?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID, products.ProductName ORDER BY sales_revenue DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by employees in the 'Sales Representative' title?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE Title = 'Sales Representative' GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What was the average quantity of products ordered per order in 2023?",
        "output": "SELECT AVG([Order Details].Quantity) AS avg_quantity FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2023",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers supplied products that contributed to more than $50,000 in total sales?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName HAVING TotalSales > 50000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the suppliers and the number of distinct products they supply.",
        "output": "SELECT s.SupplierID, COUNT(DISTINCT p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order value for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Who are the top 5 customers by order quantity?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].Quantity) AS TotalQuantity FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID, customers.CompanyName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers who have delivered products late more than 5 times.",
        "output": "SELECT products.SupplierID, COUNT(orders.OrderID) AS LateDeliveries FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.ShippedDate > orders.RequiredDate GROUP BY products.SupplierID HAVING LateDeliveries > 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders handled by employees with the title 'Sales Representative'?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE e.Title = 'Sales Representative' GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly performance of each product based on sales?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers with the highest lifetime value.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifetimeValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest revenue last year?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which product has the highest total sales?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total sales revenue for each supplier.",
        "output": "SELECT SupplierID, SUM([Order Details].UnitPrice * Quantity) AS TotalSalesRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest number of units sold in Q1 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_units FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY products.ProductName ORDER BY total_units DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the top 3 cities with the highest number of orders placed.",
        "output": "SELECT ShipCity, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories have the highest inventory turnover ratio for August 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE MONTH(orders.OrderDate) = 8 AND YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sales made by employees per month?",
        "output": "SELECT e.EmployeeID, AVG(MonthlySales) AS AvgMonthlySales FROM (SELECT e.EmployeeID, MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate)) AS MonthlySalesGrouped GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List products that have never been ordered.",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details]);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average quantity ordered per order?",
        "output": "SELECT AVG(Quantity) AS AverageQuantity FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of reports?",
        "output": "SELECT e.EmployeeID, COUNT(e2.EmployeeID) AS ReportsCount FROM employees e LEFT JOIN employees e2 ON e.EmployeeID = e2.ReportsTo GROUP BY e.EmployeeID ORDER BY ReportsCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight cost for orders shipped in the month of March 2023.",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate BETWEEN '2023-03-01' AND '2023-03-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for the past month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many different customers are there?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS TotalCustomers FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the number of products with a reorder level greater than a specific value (e.g., 50).",
        "output": "SELECT COUNT(*) AS NumberOfProducts FROM products WHERE ReorderLevel > 50;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units sold for each category in the last year?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID WHERE od.OrderDate BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW() GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a high inventory but low sales?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock > 50 AND ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m'));",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the top 5 employees by total sales in December 2023.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost per order in Q2 of 2023?",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders WHERE QUARTER(OrderDate) = 2 AND YEAR(OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for this quarter?",
        "output": "SELECT COUNT(*) * 1.0 / (SELECT COUNT(*) FROM orders o WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)) AS OnTimeRate FROM orders o WHERE o.ShippedDate <= o.RequiredDate AND o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top five cities by total sales generated?",
        "output": "SELECT o.ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CitySales FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCity ORDER BY CitySales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in the last quarter?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on orders by each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG([Order Details].Discount) as AvgDiscount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have reorder levels below their current stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total discount provided on all orders combined.",
        "output": "SELECT SUM(Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in January 2023?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Who are the top 3 employees based on the number of orders they handled?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the lead time deviation among suppliers?",
        "output": "SELECT suppliers.CompanyName, STDDEV(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LeadTimeDeviation FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products ordered by product ID?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalOrderedQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compare the total sales of employees by region.",
        "output": "SELECT employees.Region, employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region, employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who have ordered a specific product.",
        "output": "SELECT DISTINCT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.ProductID = <specific_product_id>;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the total sales per product category.",
        "output": "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products have generated the highest sales revenue?",
        "output": "SELECT ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM [Order Details] od GROUP BY ProductID ORDER BY ProductRevenue DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are currently discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city had the highest number of orders shipped to it?",
        "output": "SELECT ShipCity, COUNT(*) AS order_count FROM orders GROUP BY ShipCity ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have generated sales over $10,000?",
        "output": "SELECT COUNT(DISTINCT e.EmployeeID) FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee had the highest total sales in Q1 of 2023?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE QUARTER(o.OrderDate) = 1 AND YEAR(o.OrderDate) = 2023 GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 3 products by total quantity sold.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY total_quantity DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers and the count of orders they have placed in the last six months.",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) as OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate > DATE_SUB(NOW(), INTERVAL 6 MONTH) GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are supplied by each supplier?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the overall inventory turnover ratio?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total shipping cost per order for Q3 of 2023?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders shipped via different methods over the months?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, ShipVia, COUNT(*) AS order_count FROM orders GROUP BY month, ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from each product category?",
        "output": "SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time for delivering products in 2023?",
        "output": "SELECT suppliers.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees were hired in the last year?",
        "output": "SELECT * FROM employees WHERE HireDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many distinct products have been ordered?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS DistinctProductsOrdered FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who have not made any sales in the past year.",
        "output": "SELECT e.FirstName, e.LastName, e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL OR o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employee titles?",
        "output": "SELECT Title, COUNT(*) AS TitleCount FROM employees GROUP BY Title;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT products.ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales for each product?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalSales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for orders shipped in a specific month?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = 'YYYY-MM';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total quantity of products ordered in 2023?",
        "output": "SELECT SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are currently on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order per country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from each customer over their lifetime?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c INNER JOIN orders o ON c.CustomerID = o.CustomerID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders in the first half of 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest number of units sold last month?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalUnitsSold FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURDATE()) - 1 AND YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY ProductID ORDER BY TotalUnitsSold DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order for the second quarter of 2023?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE OrderDate BETWEEN '2023-04-01' AND '2023-06-30';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average number of units in stock per supplier?",
        "output": "SELECT SupplierID, AVG(UnitsInStock) AS AverageUnitsInStock FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales volumes for each product category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) as TotalSalesVolume FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the countries with the highest on-time delivery rate.",
        "output": "SELECT ShipCountry, COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders WHERE ShippedDate <= RequiredDate) AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate GROUP BY ShipCountry ORDER BY OnTimeDeliveryRate DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the highest average order value.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AverageOrderValue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost per country?",
        "output": "SELECT ShipCountry, AVG(Freight) as AvgFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 products with the highest unit price?",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many orders have a discount applied to them?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders are delivered on time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product are on order?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total number of units on order.",
        "output": "SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many different products have been ordered?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS TotalDistinctProducts FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LifetimeValue DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product category has the highest number of products?",
        "output": "SELECT CategoryID, COUNT(*) AS NumProducts FROM products GROUP BY CategoryID ORDER BY NumProducts DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders that have not been shipped yet.",
        "output": "SELECT * FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the inventory turnover ratio for each product for the first quarter of 2023.",
        "output": "SELECT products.ProductID, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN '2023-01-01' AND '2023-03-31') GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee handle in the last year?",
        "output": "SELECT EmployeeID, COUNT(*) as OrderCount FROM orders WHERE OrderDate BETWEEN date('now', '-1 year') AND date('now') GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top three employees with the highest total sales.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales revenue generated for each product?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total sales for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have delivered products within the shortest average lead time?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p INNER JOIN orders o ON p.ProductID = o.ProductID GROUP BY p.SupplierID ORDER BY AvgLeadTime ASC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average unit price of products per category.",
        "output": "SELECT categories.CategoryName, AVG(products.UnitPrice) AS AvgUnitPrice FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given in all orders?",
        "output": "SELECT SUM(Discount) AS TotalDiscountGiven FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied on orders shipped in July 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.ShippedDate) = 7 AND YEAR(orders.ShippedDate) = 2023",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many distinct products have been ordered so far?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(IF(ShippedDate <= RequiredDate, 1, NULL)) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find all customers who have not placed any orders in the last year.",
        "output": "SELECT customers.CustomerID, customers.CompanyName FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL OR orders.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total salary expenditure for all employees?",
        "output": "SELECT SUM(Salary) AS TotalSalaryExpenditure FROM employees;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many orders contain a discount greater than 0.1?",
        "output": "SELECT COUNT(*) FROM [Order Details] WHERE Discount > 0.1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the reorder level for each product and how many products meet or exceed this level?",
        "output": "SELECT p.ProductName, p.ReorderLevel, p.UnitsInStock FROM products p WHERE p.UnitsInStock >= p.ReorderLevel;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level lower than 10?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average shipping time (difference between OrderDate and ShippedDate)?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_shipping_time FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has been ordered the most times?",
        "output": "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders did each employee handle in the last month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS number_of_orders FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average order size (in terms of total price) handled by each employee.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the total revenue generated by each customer in a specific country.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE c.Country = '<specific_country>' GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the total sales for each month in 2023?",
        "output": "SELECT MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY MONTH(o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total freight cost for all orders shipped in 2022.",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE YEAR(ShippedDate) = 2022;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Find the average time taken to ship orders in the region 'WA' for the year 2023.",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_shipping_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND orders.ShipRegion = 'WA'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest total revenue from sales?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed in each year?",
        "output": "SELECT YEAR(OrderDate) AS Year, COUNT(*) AS NumberOfOrders FROM orders GROUP BY Year;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top 5 cities with the highest number of shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipCity ORDER BY Shipments DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total number of orders handled by employees in each city.",
        "output": "SELECT employees.City, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.City;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have the highest shipping cost?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalShippingCost FROM orders GROUP BY CustomerID ORDER BY TotalShippingCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed orders in the last month?",
        "output": "SELECT DISTINCT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employee titles in the company?",
        "output": "SELECT employees.Title, COUNT(*) AS EmployeeCount FROM employees GROUP BY employees.Title;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for each supplier?",
        "output": "SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) as InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the orders with the highest quantity of products.",
        "output": "SELECT orders.OrderID, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the average order value compare between different regions?",
        "output": "SELECT orders.ShipRegion, AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipRegion",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier based in 'New York' with the highest total orders.",
        "output": "SELECT suppliers.SupplierID, CompanyName, COUNT(orders.OrderID) AS TotalOrders FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE suppliers.City = 'New York' GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on or before the required date in the third quarter of 2023?",
        "output": "SELECT COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for the orders placed in Q1 of this year?",
        "output": "SELECT AVG(Freight) AS AverageShippingCost FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average value of orders placed in the last year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS Average_Order_Value FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= CURDATE() - INTERVAL 1 YEAR;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 5 employees by total sales in 2023?",
        "output": "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique customers placed orders in 2023?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = '2023'",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in May 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products are ordered on average each month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, AVG(COUNT(DISTINCT od.ProductID)) AS AverageUniqueProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the overall discount provided on each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Discount) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the products that have never been ordered.",
        "output": "SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are currently out of stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the contact information for suppliers in 'Germany'?",
        "output": "SELECT CompanyName, ContactName, Phone, Fax FROM suppliers WHERE Country = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill an order in 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers whose average product unit price is above the overall average unit price.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID HAVING AVG(products.UnitPrice) > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the median order fulfillment time for the last six months?",
        "output": "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(ShippedDate, OrderDate)) AS MedianFulfillmentTime FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 6 MONTH;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated by each supplier in 2022?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSalesRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost incurred in the last quarter?",
        "output": "SELECT SUM(Freight) AS total_freight_cost FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the order(s) with the highest total value in January 2023.",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY o.OrderID ORDER BY TotalValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the orders that have a shipping address different from the customer's address.",
        "output": "SELECT o.OrderID FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.ShipAddress <> c.Address OR o.ShipCity <> c.City OR o.ShipRegion <> c.Region OR o.ShipPostalCode <> c.PostalCode OR o.ShipCountry <> c.Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount provided on all orders in Q4 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered for each supplier?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].Quantity) AS TotalQuantityOrdered FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to 'USA'?",
        "output": "SELECT AVG(Freight) AS avg_freight_cost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that generate the most sales revenue?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY TotalRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with the highest and lowest performance by sales in the last month.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1 UNION ALL SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY p.ProductName ORDER BY TotalQuantity ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders fulfilled by each shipping company in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS total_orders FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average time taken by each supplier to deliver products?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM products INNER JOIN orders ON products.ProductID = [Order Details].ProductID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for product ID 1 for the month of March 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE products.ProductID = 1 AND orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company shipped the most orders?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipVia ORDER BY OrdersCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed in the first quarter of 2023?",
        "output": "SELECT COUNT(OrderID) AS OrdersInQ1 FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time difference between the required date and shipped date for late deliveries?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) AS AvgLateShipment FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top 5 countries with the highest number of orders?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given on all orders in 2022?",
        "output": "SELECT SUM([Order Details].Discount * [Order Details].UnitPrice * [Order Details].Quantity) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2022;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the past year?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE())",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the top 5 best-selling products based on quantity sold.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the orders that were shipped within 10 days of the order date.",
        "output": "SELECT * FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many days on average does it take to fulfill an order?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total freight cost per country.",
        "output": "SELECT o.ShipCountry, SUM(o.Freight) AS TotalFreightCost FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category contributes the most to the total order quantity?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales volume in 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductName ORDER BY total_quantity_sold DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the products with the highest sales?",
        "output": "SELECT s.SupplierName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierName ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales volume in July 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY products.ProductName ORDER BY total_quantity_sold DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(*) AS Frequency FROM orders GROUP BY ShipVia ORDER BY Frequency DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for the last month?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATEPART(month, o.OrderDate) = DATEPART(month, GETDATE()) AND DATEPART(year, o.OrderDate) = DATEPART(year, GETDATE());",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the longest average lead time?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID ORDER BY AvgLeadTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity per unit for products in each category?",
        "output": "SELECT p.CategoryID, AVG(LENGTH(p.QuantityPerUnit) - LENGTH(REPLACE(p.QuantityPerUnit, ' ', '')) + 1) AS AverageQuantityPerUnit FROM products p GROUP BY p.CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top five customers by total order value?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalOrderValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) as TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total quantity of products sold for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were shipped on or before their required dates in 2021?",
        "output": "SELECT (SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE YEAR(OrderDate) = 2021;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a unit price greater than $20?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > 20;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for July 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio per month.",
        "output": "SELECT DATE_TRUNC('month', od.OrderDate) AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of products ordered each month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS OrderMonth, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth ORDER BY OrderMonth ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Count the number of employees in each country.",
        "output": "SELECT Country, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used the most in March 2023?",
        "output": "SELECT o.ShipVia, COUNT(*) AS ShippingMethodCount FROM orders o WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-03' GROUP BY o.ShipVia ORDER BY ShippingMethodCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the top-selling products for each employee.",
        "output": "SELECT e.EmployeeID, p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY e.EmployeeID, p.ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company (ShipVia) has the highest on-time delivery rate?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(*) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the difference between units in stock and units on order for each product.",
        "output": "SELECT ProductID, (UnitsInStock - UnitsOnOrder) AS StockDiff FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated from orders over the past year?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the average discount given per order by each employee.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, AVG([Order Details].Discount) AS AverageDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders that were delivered late?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate)::DECIMAL / COUNT(OrderID)) * 100 AS LateDeliveryRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for the product with ProductID=10 in 2022?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' AND products.ProductID = 10",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many units of each product were sold in June 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = 6 AND YEAR(orders.OrderDate) = 2023 GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the most overdue orders.",
        "output": "SELECT employees.EmployeeID, employees.LastName, employees.FirstName, COUNT(orders.OrderID) AS OverdueOrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE ShippedDate > RequiredDate GROUP BY employees.EmployeeID ORDER BY OverdueOrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were shipped on the same day as they were placed, grouped by employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS SameDayShipped FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate = orders.ShippedDate GROUP BY employees.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by each customer in the last year?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrdersInLastYear FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate > CURRENT_DATE - INTERVAL '1 year' GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 5 customers by total purchase value?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_purchase_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID, customers.CompanyName ORDER BY total_purchase_value DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of unique customers?",
        "output": "SELECT City, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM customers GROUP BY City ORDER BY UniqueCustomers DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time (in days) between the order date and the shipped date for December 2023?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgDeliveryTime FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-12'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee, grouped by month?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products ordered in the last year by month?",
        "output": "SELECT DATEPART(year, o.OrderDate) AS Year, DATEPART(month, o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN DATEADD(year, -1, GETDATE()) AND GETDATE() GROUP BY DATEPART(year, o.OrderDate), DATEPART(month, o.OrderDate) ORDER BY Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the top 5 suppliers based on total sales?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest number of orders shipped to in 2023?",
        "output": "SELECT ShipCity, COUNT(*) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipCity ORDER BY NumberOfOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each employee last week?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK) GROUP BY EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly product performance based on sales.",
        "output": "SELECT ProductID, SUM(Quantity) as TotalQuantityOrdered FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What products are currently out of stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee handle in the last month?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate per shipping company?",
        "output": "SELECT ShipVia, COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders WHERE ShippedDate <= RequiredDate) AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given on orders?",
        "output": "SELECT AVG(Discount) as AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many different products are discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total freight cost incurred in shipping to 'Germany' in 2023?",
        "output": "SELECT SUM(orders.Freight) AS total_freight_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND orders.ShipCountry = 'Germany'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have not been ordered in the last six months.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time for suppliers in the month of March 2023?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_lead_time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY p.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to all products in orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country had the highest total sales in the fourth quarter of 2023?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') IN ('2023-10', '2023-11', '2023-12') GROUP BY o.ShipCountry ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total amount of discounts given by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Count the number of employees hired each year.",
        "output": "SELECT strftime('%Y', HireDate) AS HireYear, COUNT(*) AS NumberOfHires FROM employees GROUP BY HireYear;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average unit price of products supplied by each supplier.",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a higher UnitsOnOrder than UnitsInStock?",
        "output": "SELECT ProductID, UnitsOnOrder, UnitsInStock FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the average, minimum, and maximum freight costs by shipping country?",
        "output": "SELECT o.ShipCountry, AVG(o.Freight) AS AverageFreight, MIN(o.Freight) AS MinimumFreight, MAX(o.Freight) AS MaximumFreight FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered (i.e., their units in stock are less than the reorder level)?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the most orders in 2022?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY o.CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products with the lowest and highest unit prices.",
        "output": "SELECT MIN(UnitPrice) AS MinPrice, MAX(UnitPrice) AS MaxPrice FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product were sold last month?",
        "output": "Corrected: SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m') GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average supplier lead time?",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM suppliers s INNER JOIN products p ON s.SupplierID = p.SupplierID INNER JOIN orders o ON p.ProductID = o.ProductID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers that have delivered products to more than 3 different countries.",
        "output": "SELECT s.CompanyName, COUNT(DISTINCT o.ShipCountry) AS Countries FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierID HAVING Countries > 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many different products were ordered in 2023?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS UniqueProducts FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that need reordering (UnitsInStock < ReorderLevel).",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average time between order date and shipped date?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product is the most ordered?",
        "output": "SELECT ProductID, COUNT(ProductID) AS ProductCount FROM [Order Details] GROUP BY ProductID ORDER BY ProductCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the monthly total sales for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS MonthlySales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, MONTH([Order Details].OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How do sales figures compare month-over-month for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity, MONTH(od.OrderDate) AS OrderMonth FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, MONTH(od.OrderDate) ORDER BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product category in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products by total sales revenue?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of customers placed at least one order in both 2022 and 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value per customer?",
        "output": "SELECT customers.CustomerID, AVG(orders.revenue) AS avg_order_value FROM (SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS revenue FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID) orders INNER JOIN customers ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed on weekends?",
        "output": "SELECT COUNT(*) FROM orders WHERE EXTRACT(DOW FROM OrderDate) IN (0, 6);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories have the highest sales revenue?",
        "output": "SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID, categories.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipper has the highest on-time delivery rate?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeRate FROM orders GROUP BY ShipVia ORDER BY OnTimeRate DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units ordered for each product in the past month?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total quantity of products ordered by each product ID.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are currently on order?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated from products supplied by a specific supplier?",
        "output": "SELECT suppliers.SupplierID, suppliers.SupplierName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID, suppliers.SupplierName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has the highest total sales value in the year 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on or before the required date in December 2022?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID) * 100 AS OnTimeDeliveryRate FROM orders WHERE OrderDate BETWEEN '2022-12-01' AND '2022-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have products with a stock level below their reorder level?",
        "output": "SELECT c.CategoryName FROM products p JOIN categories c ON p.CategoryID = c.CategoryID WHERE p.UnitsInStock < p.ReorderLevel GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 products by sales quantity.",
        "output": "SELECT TOP 5 p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are there in each country?",
        "output": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the number of products supplied by each supplier.",
        "output": "SELECT SupplierID, COUNT(*) AS ProductCount FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product with the most units on order.",
        "output": "SELECT ProductID, MAX(UnitsOnOrder) AS MostUnitsOnOrder FROM products ORDER BY MostUnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total freight cost incurred for each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total number of orders handled by each employee.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales for the current month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) AND MONTH(orders.OrderDate) = MONTH(CURDATE())",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are low in stock and need to be reordered?",
        "output": "SELECT products.ProductID, products.ProductName FROM products WHERE products.UnitsInStock + products.UnitsOnOrder < products.ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 shipping methods by the number of orders.",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average number of orders per employee?",
        "output": "SELECT AVG(OrderCount) FROM (SELECT COUNT(orders.OrderID) AS OrderCount FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID) AS EmployeeOrderCounts",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier offers the fastest average delivery time across all products?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN products ON orders.ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY supplier_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the total units ordered for each product that is not discontinued.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalOrderedUnits FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 0 GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY OrderMonth;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest average freight cost?",
        "output": "SELECT ShipCity, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipCity ORDER BY AverageFreightCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the total freight costs by shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry ORDER BY TotalFreight DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders in the year 2022?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the most sales in each region?",
        "output": "SELECT e.EmployeeID, e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Region ORDER BY e.Region, TotalSales DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a discount applied in their orders?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders required special attention due to late shipments?",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate > RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS LateShipmentPercentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time per shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest lead time on deliveries?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LeadTime FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY LeadTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed this year compared to last year?",
        "output": "SELECT SUM(CASE WHEN YEAR(OrderDate) = YEAR(CURDATE()) THEN 1 ELSE 0 END) AS this_year, SUM(CASE WHEN YEAR(OrderDate) = YEAR(CURDATE()) - 1 THEN 1 ELSE 0 END) AS last_year FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Get a list of suppliers and the total number of orders placed for their products.",
        "output": "SELECT suppliers.CompanyName, COUNT(orders.OrderID) AS TotalOrders FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID INNER JOIN [Order Details] ON products.ProductID = [Order Details].ProductID INNER JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled within the required time frame in 2023?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products on order?",
        "output": "SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly trend of total quantities sold for each product?",
        "output": "SELECT products.ProductID, products.ProductName, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS TotalQuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, products.ProductName, Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the total number of orders shipped by each employee.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedCount FROM products p WHERE p.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average order fulfillment time for each employee.",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product categories with the highest sales.",
        "output": "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has the best on-time delivery rate?",
        "output": "SELECT EmployeeID, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY EmployeeID ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 customers based on their total spending.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSpending FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalSpending DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the products that have a reorder level lower than 20.",
        "output": "SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products WHERE ReorderLevel < 20;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the average number of products per order for each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.Quantity) AS AvgProductsPerOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the monthly sales performance of each product for the current year.",
        "output": "SELECT P.ProductName, EXTRACT(YEAR_MONTH FROM OD.OrderDate) AS YearMonth, SUM(OD.Quantity) AS TotalSold FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID WHERE YEAR(OD.OrderDate) = YEAR(CURDATE()) GROUP BY P.ProductID, YearMonth ORDER BY YearMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many products have a discount greater than 10%?",
        "output": "SELECT COUNT(*) as NumberOfDiscountedProducts FROM [Order Details] WHERE Discount > 0.1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the average order value in January 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales revenue for each supplier this year.",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY s.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the number of orders that each employee has processed.",
        "output": "SELECT EmployeeID, COUNT(*) AS OrdersProcessed FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late in the past month?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND OrderDate >= CURDATE() - INTERVAL 1 MONTH;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed the largest orders by value?",
        "output": "SELECT customers.CustomerID, MAX([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LargestOrderValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY LargestOrderValue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from orders placed in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average shipping time (difference between ShippedDate and OrderDate)?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for July 2023?",
        "output": "SELECT COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) / COUNT(OrderID) AS on_time_delivery_rate FROM orders WHERE OrderDate BETWEEN '2023-07-01' AND '2023-07-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the most revenue in Q1 2023?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY od.ProductID ORDER BY Revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per customer?",
        "output": "SELECT CustomerID, SUM(Freight) as TotalFreightCost FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales value generated by each product ID?",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice) AS TotalSalesValue FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for orders shipped via method ID 3?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE ShipVia = 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest average freight cost per order?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipCountry ORDER BY AverageFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of units ordered for products with a discount greater than 0.10?",
        "output": "SELECT SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE Discount > 0.10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier who has supplied products with the highest unit price.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, products.ProductName, MAX(products.UnitPrice) AS MaxUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID ORDER BY MaxUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List all orders that were shipped later than the required date.",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the number of discontinued products provided by each supplier.",
        "output": "SELECT suppliers.CompanyName, COUNT(*) AS DiscontinuedProducts FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total quantity ordered for each product category.",
        "output": "SELECT c.CategoryID, c.CategoryName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID, c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and unit prices of all products currently in stock?",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories have the highest sales in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products below their reorder level?",
        "output": "SELECT SUM(UnitsInStock) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees grouped by their titles?",
        "output": "SELECT Title, AVG(Salary) AS AvgSalary FROM employees GROUP BY Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which month had the highest number of orders?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY OrderMonth ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for the month of February 2023?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_fulfillment_time FROM orders o WHERE o.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have titles containing 'Manager'?",
        "output": "SELECT COUNT(*) AS TotalManagers FROM employees WHERE Title LIKE '%Manager%';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products are below the reorder level as of December 2023?",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which cities have the highest number of orders processed by employees?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY o.ShipCity ORDER BY NumberOfOrders DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total sales revenue for each product.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity) as TotalSalesRevenue FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders delivered to different postal codes?",
        "output": "SELECT ShipPostalCode, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipPostalCode;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the lowest stock and need immediate attention?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < (SELECT AVG(UnitsInStock) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer has generated the highest total sales revenue?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedProducts FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the average unit price of all products supplied by supplier ID 3.",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products WHERE SupplierID = 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of products in each category?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the highest total freight cost?",
        "output": "SELECT ShipRegion, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipRegion ORDER BY TotalFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are supplied by each supplier?",
        "output": "SELECT suppliers.SupplierName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average time it takes for each employee to ship an order.",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed in each region?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of all products?",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the most common shipping destination country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) as TotalOrders FROM orders GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company delivered the highest number of orders on time in 2022?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS on_time_orders FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY shippers.CompanyName ORDER BY on_time_orders DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the order frequency for each supplier in the past year.",
        "output": "SELECT s.CompanyName, COUNT(o.OrderID) AS OrderFrequency FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY s.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the distribution of order quantities per product?",
        "output": "SELECT ProductID, SUM(Quantity) AS OrderQuantity FROM [Order Details] GROUP BY ProductID ORDER BY OrderQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the percentage of discontinued products in the inventory?",
        "output": "SELECT (COUNT(ProductID) * 100.0 / (SELECT COUNT(*) FROM products)) AS PercentageDiscontinued FROM products WHERE Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders in each region?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 cities with the highest number of orders placed?",
        "output": "SELECT orders.ShipCity, COUNT(orders.OrderID) AS num_orders FROM orders GROUP BY orders.ShipCity ORDER BY num_orders DESC LIMIT 5",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total number of units ordered for each product.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the largest variance in monthly sales.",
        "output": "SELECT employees.EmployeeID, STDDEV_POP(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS SalesVariance FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly on-time delivery rate.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 100.0 * SUM(IF(ShippedDate <= RequiredDate, 1, 0)) / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the total sales of Q1 2023 compare to Q1 2022?",
        "output": "SELECT (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31') / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-03-31') AS sales_growth_Q1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order grouped by ship countries in 2023?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgShippingCost FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = '2023' GROUP BY ShipCountry",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped before the required date in the past year?",
        "output": "SELECT COUNT(*) AS OnTimeDeliveries FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the month with the highest revenue in 2020.",
        "output": "WITH monthly_revenue AS (SELECT DATE_TRUNC('month', OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE EXTRACT(YEAR FROM OrderDate) = 2020 GROUP BY DATE_TRUNC('month', OrderDate)) SELECT OrderMonth, TotalRevenue FROM monthly_revenue ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How much revenue has been lost due to the discontinuation of products?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS LostRevenue FROM products WHERE Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units available in stock for each product?",
        "output": "SELECT ProductID, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given on orders in the past year?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has the highest average order value in 2023?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier delivered the most orders in the last year?",
        "output": "SELECT s.CompanyName, COUNT(*) AS OrderCount FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID INNER JOIN products p ON od.ProductID = p.ProductID INNER JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY s.CompanyName ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the Inventory Turnover Ratio for the last month.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW();",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories of products have the highest revenue?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS Revenue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID ORDER BY Revenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee worked with the most customers?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.CustomerID) AS CustomerCount FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY CustomerCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region had the highest sales in the last quarter?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(QUARTER, -1, CURRENT_DATE) GROUP BY ShipRegion ORDER BY TotalSales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country had the highest number of orders shipped to it last year?",
        "output": "SELECT ShipCountry, COUNT(*) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the product with the highest unit price?",
        "output": "SELECT suppliers.CompanyName, products.ProductName, products.UnitPrice FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID ORDER BY products.UnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had a shipping date later than the required date?",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped per month for the last two years?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the median freight cost per order?",
        "output": "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Freight) AS MedianFreightCost FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount given per order in 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders made by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total revenue generated from orders that received discounts.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS DiscountedRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.Discount > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the supplier with the highest number of units on order.",
        "output": "SELECT p.SupplierID, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM products p GROUP BY p.SupplierID ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the Inventory Turnover Ratio for the month of January 2023?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated per product?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers have placed orders in the year 2023?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS unique_customers FROM orders WHERE YEAR(OrderDate) = 2023",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest revenue last quarter?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND OrderDate < DATE_SUB(CURDATE(), INTERVAL 0 MONTH) GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the supplier companies located in 'London'.",
        "output": "SELECT SupplierID, CompanyName FROM suppliers WHERE City = 'London';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the top-selling product of the month?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalUnitsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE MONTH([Order Details].OrderID) = MONTH(CURRENT_DATE()) GROUP BY products.ProductID, products.ProductName ORDER BY TotalUnitsSold DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average number of items per order in 2023?",
        "output": "SELECT AVG(od.Quantity) AS AvgItemsPerOrder FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the highest lead time in delivering products for Q2 of 2023?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY suppliers.SupplierID ORDER BY avg_lead_time DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount applied to orders by each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given per product?",
        "output": "SELECT ProductID, SUM(Discount * Quantity) AS TotalDiscount FROM [Order Details] GROUP BY ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly Product Performance for the current year.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE YEAR(od.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products need to be reordered?",
        "output": "SELECT ProductName, ReorderLevel - UnitsInStock as AmountToReorder FROM products WHERE UnitsInStock < ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find all orders where the discount applied was more than 20%.",
        "output": "SELECT * FROM [Order Details] WHERE Discount > 0.20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees report to each manager?",
        "output": "SELECT e.ReportsTo, COUNT(e.EmployeeID) AS ReportCount FROM employees e GROUP BY e.ReportsTo",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for orders shipped to 'USA'?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products ordered in January 2023?",
        "output": "SELECT SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Have there been any patterns in the shipping costs per order over the last year?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given on all orders?",
        "output": "SELECT SUM(Discount) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date last year?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS on_time_delivery_rate FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products with their unit price and the number of units ordered.",
        "output": "SELECT p.ProductName, p.UnitPrice, SUM(od.Quantity) AS UnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many units of each product were sold in January 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY products.ProductID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many distinct products were ordered in the month of January 2022?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate BETWEEN '2022-01-01' AND '2022-01-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the monthly sales trends for 2023?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS monthly_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EXTRACT(MONTH FROM orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of products ordered for each supplier?",
        "output": "SELECT s.CompanyName, SUM(od.Quantity) AS TotalProductsOrdered FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the average order value for each supplier.",
        "output": "SELECT products.SupplierID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the lifetime value of each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average fulfillment time per month.",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY MONTH(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method was used the most?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for the month of September 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 10 products with the highest reorder levels.",
        "output": "SELECT ProductName, ReorderLevel FROM products ORDER BY ReorderLevel DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has processed the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How has product performance varied monthly for each product in 2023?",
        "output": "SELECT products.ProductID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID, month ORDER BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by customer ID 'C123' in May 2023?",
        "output": "SELECT COUNT(OrderID) AS OrdersCount FROM orders WHERE CustomerID = 'C123' AND DATE_FORMAT(OrderDate, '%Y-%m') = '2023-05'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total discount given for each order.",
        "output": "SELECT OrderID, SUM((UnitPrice * Quantity * Discount)) AS TotalDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have not been shipped yet?",
        "output": "SELECT COUNT(*) AS UnshippedOrdersCount FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How do total sales vary by country for the year 2023?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipCountry",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount for all products sold?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sales per order for each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSalesPerOrder FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the order with the highest total value in the current year.",
        "output": "SELECT OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY OrderID ORDER BY TotalOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the total sales and average order value for orders that were delivered on time vs late.",
        "output": "SELECT OnTime, SUM(TotalSales) AS TotalSales, AVG(OrderValue) AS AvgOrderValue FROM (SELECT IF(ShippedDate <= RequiredDate, 'On Time', 'Late') AS OnTime, orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS OrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID, OnTime) AS Sales GROUP BY OnTime",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost by shipping destination city?",
        "output": "SELECT ShipCity, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipCity;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the variance in order fulfillment time by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, VARIANCE(DATEDIFF(ShippedDate, OrderDate)) AS variance_fulfillment_time FROM orders GROUP BY month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total sales generated from orders with a discount applied in June 2023.",
        "output": "SELECT SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') = '2023-06' AND OD.Discount > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total and average discount percentages applied on orders in 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount, SUM([Order Details].Discount) AS total_discount FROM [Order Details] WHERE [Order Details].OrderID IN (SELECT orders.OrderID FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31')",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on or before the required date in 2022?",
        "output": "SELECT (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE YEAR(OrderDate) = 2022;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had a shipping delay longer than 7 days?",
        "output": "SELECT o.OrderID, DATEDIFF(o.ShippedDate, o.OrderDate) AS ShippingDelay FROM orders o WHERE DATEDIFF(o.ShippedDate, o.OrderDate) > 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with a stock level below their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales per country.",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Show the details of orders placed in the month of January 2023.",
        "output": "SELECT * FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers placed the most orders in 2022?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS total_orders FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customers.CustomerID ORDER BY total_orders DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products with stock levels below the reorder level have the highest sales?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock < p.ReorderLevel GROUP BY p.ProductID, p.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped via each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is the fastest on average?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY ShipVia ORDER BY AverageShippingTime ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What products had the highest and lowest sales performance in December 2022?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-12-01' AND '2022-12-31' GROUP BY products.ProductID ORDER BY product_performance DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of all the products?",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product were sold in the last month?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS UnitsSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID HAVING DATE([Order Details].OrderDate) BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for the year 2023?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products based on total revenue generated?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly sales trend for 'CategoryID' 1 in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.CategoryID = 1 AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m') ORDER BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales for each product category?",
        "output": "SELECT CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the highest on-time delivery rate for October 2023?",
        "output": "SELECT shippers.ShipperID, COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY shippers.ShipperID ORDER BY on_time_delivery_rate DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the longest tenure and their total sales.",
        "output": "SELECT e.EmployeeID, DATEDIFF(CURDATE(), e.HireDate) AS Tenure, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY Tenure DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Get the list of customers who placed orders in the last month.",
        "output": "SELECT c.CustomerID, c.CompanyName FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have been discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the most expensive product ordered in terms of unit price.",
        "output": "SELECT ProductID, MAX(UnitPrice) AS MaxUnitPrice FROM [Order Details] GROUP BY ProductID ORDER BY MaxUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly total sales trend for the year 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month ORDER BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the details of orders that were shipped late?",
        "output": "SELECT o.OrderID, e.FirstName, e.LastName, o.OrderDate, o.RequiredDate, o.ShippedDate FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for orders shipped via each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue from orders that include products with a discount greater than 20%?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od WHERE od.Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Rank employees based on their total sales.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount per order?",
        "output": "SELECT ROUND(AVG(od.Discount), 2) AS AverageDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 3 regions based on total sales in 2021.",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2021 GROUP BY ShipRegion ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the most number of orders that required a shipping method of '1'?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShipVia = 1 GROUP BY employees.EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the highest number of units across all their products?",
        "output": "SELECT SupplierID, SUM(UnitsInStock) AS TotalUnits FROM products GROUP BY SupplierID ORDER BY TotalUnits DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have never been ordered.",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees who have processed orders with a shipping date later than required date.",
        "output": "SELECT e.EmployeeID, COUNT(*) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from orders shipped in 2021?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE EXTRACT(YEAR FROM orders.ShippedDate) = 2021;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the highest average cost per month?",
        "output": "SELECT ShipVia, DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(Freight) AS avg_cost FROM orders GROUP BY ShipVia, month ORDER BY avg_cost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the employee who handled the most orders in the current week.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE WEEK(OrderDate) = WEEK(CURDATE()) AND YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide products that are currently in stock?",
        "output": "SELECT DISTINCT suppliers.SupplierID, suppliers.SupplierName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average order value by country.",
        "output": "SELECT c.Country, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders shipped to 'USA'?",
        "output": "SELECT AVG(Freight) AS AverageShippingCost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 10 customers by lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 10",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the most discontinued products?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName ORDER BY COUNT(products.ProductID) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with no sales in the last six months.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the product with the highest Units On Order.",
        "output": "SELECT p.ProductID, p.UnitsOnOrder FROM products p ORDER BY p.UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which month had the highest total sales revenue in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY order_month ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales volume in January 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS sales_volume FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY products.ProductID ORDER BY sales_volume DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have more units on order than units in stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the overall number of orders for each product.",
        "output": "SELECT products.ProductName, COUNT([Order Details].OrderID) AS TotalOrders FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the orders where the freight cost exceeded $100.",
        "output": "SELECT OrderID, Freight FROM orders WHERE Freight > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which cities have the most suppliers?",
        "output": "SELECT s.City, COUNT(s.SupplierID) AS SupplierCount FROM suppliers s GROUP BY s.City ORDER BY SupplierCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders where the total amount of discount is greater than 10%",
        "output": "SELECT orders.OrderID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) as TotalDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.OrderID HAVING TotalDiscount > (SUM([Order Details].UnitPrice * [Order Details].Quantity) * 0.10);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated by each supplier?",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s INNER JOIN products p ON s.SupplierID = p.SupplierID INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a unit price above the average unit price of all products?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees along with their respective managers.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, m.FirstName AS ManagerFirstName, m.LastName AS ManagerLastName FROM employees e LEFT JOIN employees m ON e.ReportsTo = m.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to ship an order for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) as AvgShippingTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has supplied the maximum number of products?",
        "output": "SELECT s.CompanyName, COUNT(p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees haven't made any sales?",
        "output": "SELECT e.EmployeeID FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers from London placed orders in Q2 2022?",
        "output": "SELECT COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.City = 'London' AND orders.OrderDate BETWEEN '2022-04-01' AND '2022-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for the second quarter of 2022?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-04-01' AND '2022-06-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance of each product based on the number of units sold?",
        "output": "SELECT P.ProductID, SUM(OD.Quantity) AS Performance FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List customers from the USA who have placed more than 5 orders.",
        "output": "SELECT customers.CustomerID FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.Country = 'USA' GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have not been ordered in the last month.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) -1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE));",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for May 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have processed orders with the maximum discount?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Discount) AS TotalDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which orders received the highest total discount value?",
        "output": "SELECT o.OrderID, SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscountValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY TotalDiscountValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each region?",
        "output": "SELECT ShipRegion, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipRegion;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer had the highest number of orders placed in August 2023?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrdersCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-08' GROUP BY CustomerID ORDER BY OrdersCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost incurred per month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM(orders.Freight) AS TotalFreight FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated per country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find all orders that have not yet been shipped.",
        "output": "SELECT * FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT p.ProductName, COUNT(od.ProductID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which customers have placed the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY CustomerID ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the total quantity of products ordered per order.",
        "output": "SELECT OrderID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers provide products in the 'Beverages' category?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN categories ON products.CategoryID = categories.CategoryID WHERE categories.CategoryName = 'Beverages';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level of less than 20?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel < 20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest inventory turnover ratio?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total number of unique customers served by each employee.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(DISTINCT orders.CustomerID) AS UniqueCustomers FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Count the number of products by each category.",
        "output": "SELECT CategoryID, COUNT(*) AS ProductCount FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top three employees with the highest total sales in the last year.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have received the highest discounts on average?",
        "output": "SELECT p.ProductID, p.ProductName, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY AverageDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 products by sales revenue.",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders placed?",
        "output": "SELECT COUNT(*) as total_orders FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names of all products with less than 10 units in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total quantity ordered for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantityOrdered FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest number of units on order?",
        "output": "SELECT s.CompanyName, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY TotalUnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employees who were hired in the last month.",
        "output": "SELECT * FROM employees WHERE HireDate > DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the lowest unit price in the inventory?",
        "output": "SELECT ProductID, ProductName, UnitPrice FROM products ORDER BY UnitPrice ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average order value for each month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG([Order Details].UnitPrice * [Order Details].Quantity) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of orders placed per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees based on total sales generated.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not recorded any orders?",
        "output": "SELECT EmployeeID, LastName, FirstName FROM employees WHERE EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names of all products that are currently discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify months with the highest and lowest average shipping costs.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(Freight) AS avg_cost FROM orders GROUP BY month ORDER BY avg_cost DESC LIMIT 1; SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(Freight) AS avg_cost FROM orders GROUP BY month ORDER BY avg_cost ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue from orders in each country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied across all order details?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details]",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the fastest average lead time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN orders ON products.ProductID = orders.ProductID GROUP BY suppliers.CompanyName ORDER BY AverageLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the highest average monthly sales.",
        "output": "SELECT e.FirstName, e.LastName, e.EmployeeID, AVG(MonthlySales) AS AvgMonthlySales FROM (SELECT e.EmployeeID, MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, MONTH(o.OrderDate)) AS MonthlySalesGrouped GROUP BY e.EmployeeID ORDER BY AvgMonthlySales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee who has handled the maximum number of orders in each country.",
        "output": "SELECT e.EmployeeID, o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY o.ShipCountry, e.EmployeeID ORDER BY o.ShipCountry, OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders in 2021?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2021 GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the order details (products, quantities, and prices) for a specific order?",
        "output": "SELECT o.OrderID, p.ProductID, p.ProductName, od.Quantity, od.UnitPrice FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderID = ?;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees whose total sales exceed $50,000.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING TotalSales > 50000;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products that have been ordered more than 100 times.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for orders shipped via shipping method 1?",
        "output": "SELECT SUM(Freight) AS total_freight FROM orders WHERE ShipVia = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 5 customers by revenue for the year 2023?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY total_revenue DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the average shipping costs by shipping company?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month with the highest total sales in 2022.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATE_FORMAT(OrderDate, '%Y') = '2022' GROUP BY Month ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have freight costs greater than $50?",
        "output": "SELECT COUNT(*) AS OrdersWithHighFreightCost FROM orders WHERE Freight > 50",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers provide products that have never been ordered?",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s WHERE s.SupplierID NOT IN (SELECT DISTINCT p.SupplierID FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY DATE_TRUNC('month', OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales in the first quarter of 2023?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID, employees.FirstName, employees.LastName ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have not handled any orders in the last six months.",
        "output": "SELECT employees.EmployeeID, employees.LastName, employees.FirstName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL OR orders.OrderDate < CURDATE() - INTERVAL 6 MONTH;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many distinct products have been ordered?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS DistinctProducts FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders did each employee manage?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers based on the number of products they supply.",
        "output": "SELECT s.CompanyName, COUNT(p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY ProductCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average value of orders placed each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the total number of orders for each employee.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have made repeat purchases?",
        "output": "SELECT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID, customers.CompanyName HAVING COUNT(orders.OrderID) > 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales generated by each employee on a monthly basis?",
        "output": "SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID, month ORDER BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders were not shipped by their required date?",
        "output": "SELECT o.OrderID FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier provides the highest number of different products?",
        "output": "SELECT suppliers.SupplierID, COUNT(DISTINCT products.ProductID) AS product_count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY product_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value for orders placed in the last 6 months?",
        "output": "SELECT AVG(SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount))) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate > (CURRENT_DATE - INTERVAL '6 months') GROUP BY orders.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the product with the highest number of units on order?",
        "output": "SELECT ProductID FROM products ORDER BY UnitsOnOrder DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products by unit price.",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the employee who processed the most orders.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersProcessed FROM orders GROUP BY EmployeeID ORDER BY OrdersProcessed DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average price per unit for all products?",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discount given on all products over the last month.",
        "output": "SELECT SUM(Discount) AS TotalDiscount FROM [Order Details] WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of returning customers in 2022?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN YEAR(orders.OrderDate) = 2022 THEN orders.CustomerID END) * 1.0) / (COUNT(DISTINCT orders.CustomerID) WHERE YEAR(orders.OrderDate) < 2022) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on time last month?",
        "output": "SELECT (COUNT(OrderID) / (SELECT COUNT(OrderID) FROM orders WHERE MONTH(OrderDate) = MONTH(CURDATE()) - 1)) * 100 AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate AND MONTH(OrderDate) = MONTH(CURDATE()) - 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the products that have never been ordered.",
        "output": "SELECT ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in each month of 2022?",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(*) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY CustomerID ORDER BY OrdersCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the distinct cities where customers are located.",
        "output": "SELECT DISTINCT City FROM customers;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are contributing the most to revenue after discounts are applied?",
        "output": "SELECT products.ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice) - SUM([Order Details].Discount)) AS RevenueAfterDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY RevenueAfterDiscount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS ShipCount FROM orders GROUP BY ShipVia ORDER BY ShipCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total sales for each product in the current year?",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have never been rated by customers?",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN orders ON suppliers.SupplierID = orders.SupplierID WHERE orders.SupplierID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which countries have the highest and lowest average order values?",
        "output": "SELECT ShipCountry, AVG(TotalOrderValue) AS AverageOrderValue FROM (SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID) AS OrderValues GROUP BY ShipCountry ORDER BY AverageOrderValue DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average supplier lead time for 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average delivery time (in days) for each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageDeliveryTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find customers who have placed orders with a total discount greater than $100.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * Discount) as TotalDiscount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID HAVING TotalDiscount > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Count the total number of orders shipped in the current year.",
        "output": "SELECT COUNT(OrderID) AS OrdersCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What was the most popular shipping method in 2023 and how many orders used it?",
        "output": "SELECT ShipVia, COUNT(*) AS order_count FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY ShipVia ORDER BY order_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed in each country?",
        "output": "SELECT ShipCountry, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total sales generated by each employee in the last year.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the highest sales revenue.",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice) AS SalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY SalesRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products generated the highest revenue in the last year?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY od.ProductID ORDER BY Revenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the names and contact details of suppliers who supply the product 'Chocolade'?",
        "output": "SELECT suppliers.CompanyName, suppliers.ContactName, suppliers.ContactTitle, suppliers.Phone FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.ProductName = 'Chocolade';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have a reorder level below 10?",
        "output": "SELECT COUNT(*) AS LowReorderLevelProducts FROM products p WHERE p.ReorderLevel < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 3 cities with the highest number of orders placed in 2023?",
        "output": "SELECT c.City, COUNT(o.OrderID) AS total_orders FROM orders o JOIN customers c ON o.CustomerID = c.CustomerID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY c.City ORDER BY total_orders DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer lifetime value for each customer who made purchases in 2021?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the average discount applied in November 2023?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-11';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who have placed orders in the last month.",
        "output": "SELECT DISTINCT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(month, -1, GETDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were handled by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have been with the company for more than 10 years?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees WHERE DATEDIFF(CURDATE(), employees.HireDate) > 365*10",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total discount given per order?",
        "output": "SELECT [Order Details].OrderID, SUM([Order Details].Discount) AS TotalDiscount FROM [Order Details] GROUP BY [Order Details].OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have discontinued products?",
        "output": "SELECT suppliers.SupplierID, CompanyName, products.ProductName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the highest and lowest freight charges for orders placed last year.",
        "output": "SELECT MAX(o.Freight) AS MaxFreight, MIN(o.Freight) AS MinFreight FROM orders o WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the best lead time performance for April 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30' GROUP BY products.SupplierID ORDER BY supplier_lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly performance of products based on sales?",
        "output": "SELECT p.ProductName, TO_CHAR(o.OrderDate, 'YYYY-MM') AS Month, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, TO_CHAR(o.OrderDate, 'YYYY-MM');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products ordered in the last year?",
        "output": "SELECT SUM(Quantity) as TotalQuantity FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have a salary greater than $50,000?",
        "output": "SELECT EmployeeID, FirstName, LastName FROM employees WHERE Salary > 50000;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly inventory turnover ratio for the year 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated by each product category in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many different categories of products are there?",
        "output": "SELECT COUNT(DISTINCT CategoryID) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product categories with the lowest inventory levels.",
        "output": "SELECT CategoryID, MIN(UnitsInStock) AS LowestInventory FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred this quarter?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the highest number of orders in the last quarter?",
        "output": "SELECT orders.EmployeeID, COUNT(orders.OrderID) AS Total_Orders FROM orders WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER) GROUP BY orders.EmployeeID ORDER BY Total_Orders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier's products have the highest average discount?",
        "output": "SELECT p.SupplierID, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID ORDER BY AverageDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total quantity of products sold by each month.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees with the highest sales in the last quarter.",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have placed the most orders in the last quarter?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS number_of_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY customers.CustomerID ORDER BY number_of_orders DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have the highest number of distinct products?",
        "output": "SELECT CategoryID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY CategoryID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) as NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers supply products that are currently out of stock?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average price per unit for each category of products.",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgPrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the birthdates of all employees?",
        "output": "SELECT FirstName, LastName, BirthDate FROM employees;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders did each customer place?",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the year-over-year growth in total sales from 2022 to 2023?",
        "output": "SELECT (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') AS yoy_growth",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders with a fulfillment time greater than 10 days in the current month.",
        "output": "SELECT * FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 10 AND DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT ROUND(AVG(Freight), 2) AS AverageFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered the most?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalOrdered DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on or before the required date in April 2023?",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30') AS on_time_delivery_rate FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate for the last quarter?",
        "output": "SELECT (COUNT(DISTINCT o1.CustomerID) / COUNT(DISTINCT o2.CustomerID)) * 100 as RetentionRate FROM orders o1, orders o2 WHERE o1.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() AND o2.OrderDate < DATE_SUB(CURDATE(), INTERVAL 3 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the inventory turnover ratio for each product.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost per country for the last six months.",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders WHERE orders.OrderDate >= CURDATE() - INTERVAL 6 MONTH GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the monthly sales performance for each employee for the past year.",
        "output": "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.EmployeeID, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders in May 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity ordered for each supplier?",
        "output": "SELECT S.SupplierID, SUM(OD.Quantity) AS TotalQuantityOrdered FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN suppliers S ON P.SupplierID = S.SupplierID GROUP BY S.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has the highest average order value in the second half of 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-12-31' GROUP BY employees.EmployeeID ORDER BY avg_order_value DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of orders for each product?",
        "output": "SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the inventory turnover ratio for each product?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late in the last quarter?",
        "output": "SELECT COUNT(OrderID) AS late_orders FROM orders WHERE ShippedDate > RequiredDate AND OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of units sold for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalUnits FROM [Order Details] GROUP BY ProductID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the total sales per country?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average unit price of products by category.",
        "output": "SELECT c.CategoryName, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the product with the highest revenue in Q3 2023.",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY products.ProductName ORDER BY total_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many different products are provided by each supplier?",
        "output": "SELECT s.SupplierName, COUNT(p.ProductID) AS ProductCount FROM suppliers s INNER JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have stock levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company is the most cost-effective based on average freight cost per order in 2023?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_freight_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.ShipperID ORDER BY avg_freight_cost ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total number of orders placed, broken down by month for the year 2022.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products available in each category?",
        "output": "SELECT categories.CategoryName, SUM(products.UnitsInStock + products.UnitsOnOrder) AS TotalQuantity FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum shipping cost recorded for an order?",
        "output": "SELECT MAX(Freight) as MaxShippingCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which countries have the highest total order values?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied per order in 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders that were shipped late (after the required date).",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier is associated with the highest number of products?",
        "output": "SELECT p.SupplierID, COUNT(p.ProductID) AS ProductCount FROM products p GROUP BY p.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the month with the highest sales for each product.",
        "output": "SELECT ProductID, DATEPART(month, OrderDate) AS SalesMonth, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID, DATEPART(month, OrderDate) ORDER BY ProductID, TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by customers in each country in 2022?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 best-selling products by quantity?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest lifetime value?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifeTimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY LifeTimeValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units in stock for each product category?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total value of units in stock for each product.",
        "output": "SELECT ProductName, UnitsInStock * UnitPrice AS TotalValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Retention Rate for the past month.",
        "output": "(SELECT COUNT(DISTINCT o1.CustomerID) AS ReturningCustomers FROM orders o1 WHERE o1.OrderDate BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE) / (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)) AS CustomerRetentionRate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average supplier lead time for each supplier in January 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN products ON orders.OrderID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY products.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductRevenue FROM [Order Details] GROUP BY ProductID ORDER BY ProductRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the highest sales in the previous month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m-01') AND LAST_DAY(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the names and contact titles of all suppliers?",
        "output": "SELECT CompanyName, ContactTitle FROM suppliers;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been sold?",
        "output": "SELECT products.ProductID, products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have the highest total sales?",
        "output": "SELECT p.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order completion time for each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgCompletionTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average freight cost for orders shipped to 'USA'?",
        "output": "SELECT AVG(Freight) FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue from each category of products?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the lowest number of units in stock?",
        "output": "SELECT ProductID, ProductName, UnitsInStock FROM products ORDER BY UnitsInStock ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all suppliers who provide products that have inventory levels greater than their reorder levels.",
        "output": "SELECT SupplierID, ProductName FROM products WHERE UnitsInStock > ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total salary cost for all employees per month?",
        "output": "SELECT DATE_FORMAT(HireDate, '%Y-%m') AS Month, SUM(Salary) AS TotalMonthlySalary FROM employees GROUP BY DATE_FORMAT(HireDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers placed orders each month in 2022?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS Month, COUNT(DISTINCT o.CustomerID) AS UniqueCustomers FROM orders o WHERE EXTRACT(YEAR FROM o.OrderDate) = 2022 GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the retention rate of customers who made their first purchase in January 2022?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate FROM orders",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in 2022?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales and number of orders for each supplier?",
        "output": "SELECT s.SupplierName, SUM(od.Quantity * od.UnitPrice) AS TotalSales, COUNT(DISTINCT o.OrderID) AS TotalOrders FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.SupplierName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order this year?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all orders along with the employee details who handled the orders.",
        "output": "SELECT o.OrderID, e.FirstName, e.LastName, e.Title, o.OrderDate FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders were shipped after the required date?",
        "output": "SELECT (COUNT(*) FILTER (WHERE ShippedDate > RequiredDate)) * 100.0 / COUNT(*) AS PercentageLate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who have placed orders above a certain amount ($5000).",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c INNER JOIN orders o ON c.CustomerID = o.CustomerID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 5000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average delay in shipping orders for each employee.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingDelay FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers are based in Germany?",
        "output": "SELECT * FROM customers WHERE Country = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the difference between the required date and shipped date for orders, and list the orders with late deliveries.",
        "output": "SELECT o.OrderID, DATEDIFF(o.ShippedDate, o.RequiredDate) AS DaysLate FROM orders o WHERE DATEDIFF(o.ShippedDate, o.RequiredDate) > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed on each day?",
        "output": "SELECT OrderDate, COUNT(OrderID) as NumberOfOrders FROM orders GROUP BY OrderDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most different products sold?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(DISTINCT od.ProductID) AS ProductCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products along with their categories and order quantities.",
        "output": "SELECT p.ProductName, c.CategoryName, SUM(od.Quantity) AS TotalOrderQuantity FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the regions with the highest number of customers.",
        "output": "SELECT c.Region, COUNT(c.CustomerID) AS NumberOfCustomers FROM customers c GROUP BY c.Region;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the highest number of orders placed in the last quarter?",
        "output": "SELECT ShipRegion, COUNT(*) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 QUARTER) GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees who are older than 50 years.",
        "output": "SELECT * FROM employees WHERE TIMESTAMPDIFF(YEAR, BirthDate, CURDATE()) > 50;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped late?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied across all orders in 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS average_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "For which shipping method are the most orders shipped?",
        "output": "SELECT ShipVia, COUNT(*) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total quantity ordered for each product.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders per customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total order quantities for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalOrderQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time in April 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products were ordered in January 2023?",
        "output": "SELECT COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide more than 10 different products?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID HAVING COUNT(p.ProductID) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest sales in Q2 2023?",
        "output": "SELECT OD.ProductID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalSales FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') IN ('2023-04', '2023-05', '2023-06') GROUP BY OD.ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the country that placed the most orders.",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 employees by number of orders handled in 2023.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders each month in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest average order amount?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) as AvgOrderAmount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY AvgOrderAmount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been placed by customers in Canada?",
        "output": "SELECT COUNT(*) AS NumberOfOrders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'Canada';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate for January 2023?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' THEN orders.CustomerID END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-01-01' THEN orders.CustomerID END)) AS customer_retention_rate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Analyze the sales performance of each product category in 2023.",
        "output": "SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryID, categories.CategoryName ORDER BY category_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Get the monthly total sales in 2023.",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlyTotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE EXTRACT(YEAR FROM orders.OrderDate) = 2023 GROUP BY EXTRACT(MONTH FROM orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total number of orders placed in the first quarter of 2023.",
        "output": "SELECT COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units in stock for each product?",
        "output": "SELECT ProductID, ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales per employee for the last quarter.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the shortest lead time?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY avg_lead_time ASC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find customers with at least one order where the freight cost exceeds $100.",
        "output": "SELECT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.Freight > 100 GROUP BY customers.CustomerID, customers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the orders with the earliest and latest shipping dates.",
        "output": "SELECT MIN(ShippedDate) AS EarliestShippedDate, MAX(ShippedDate) AS LatestShippedDate FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest total quantity sold?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalQuantitySold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to ship orders for each product category in 2023?",
        "output": "SELECT categories.CategoryName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_shipping_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest sales volume?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the maximum, minimum, and average freight cost per order?",
        "output": "SELECT MAX(Freight) AS MaxFreight, MIN(Freight) AS MinFreight, AVG(Freight) AS AvgFreight FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for each product category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN categories c ON p.CategoryID = c.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average quantity per unit for all products in stock?",
        "output": "SELECT AVG(CONVERT(DECIMAL, SUBSTRING_INDEX(QuantityPerUnit, ' ', 1))) AS AverageQuantityPerUnit FROM products WHERE UnitsInStock > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales value for each category?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSalesValue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which are the top 5 cities by order volume?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest total sales value?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the highest unit price.",
        "output": "SELECT ProductID, ProductName, MAX(UnitPrice) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region has the highest average shipping cost?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion ORDER BY AvgShippingCost DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales value for the last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -1, DATE_TRUNC('month', CURRENT_DATE))",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average fulfillment time of orders in days for the current month?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the highest number of orders shipped to?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity ORDER BY TotalOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees and their sales contributions for the past quarter.",
        "output": "SELECT employees.EmployeeID, employees.LastName, employees.FirstName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATEADD(month, -3, CURRENT_DATE) GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders that have a discount of more than 20%.",
        "output": "SELECT O.OrderID, OD.* FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE OD.Discount > 0.20;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total freight cost for all orders shipped to the USA.",
        "output": "SELECT SUM(orders.Freight) AS TotalFreight FROM orders WHERE orders.ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many suppliers are there in each country?",
        "output": "SELECT Country, COUNT(*) as TotalSuppliers FROM suppliers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the total sales per customer for the year 2021.",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2021 GROUP BY CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average number of orders placed per customer in 2023?",
        "output": "SELECT AVG(order_count) AS avg_orders_per_customer FROM (SELECT orders.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.CustomerID) AS customer_orders",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in February 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-02-01' AND '2023-02-28';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products based on sales volume?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS SalesVolume FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY SalesVolume DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed in the last quarter?",
        "output": "SELECT COUNT(*) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by customer 'CUST123'?",
        "output": "SELECT COUNT(OrderID) AS OrdersByCustomer FROM orders WHERE CustomerID = 'CUST123';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which countries have the highest average order fulfillment time?",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the top 10 customers based on the number of orders placed.",
        "output": "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 selling products in 2023?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID, products.ProductName ORDER BY total_quantity DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders delivered on or before the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(*)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers with the largest number of different products supplied.",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS NumberOfProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY NumberOfProducts DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who is the youngest employee?",
        "output": "SELECT EmployeeID, FirstName, LastName FROM employees ORDER BY BirthDate DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given on all orders this year?",
        "output": "SELECT SUM(Discount * Quantity * UnitPrice) AS TotalDiscountGiven FROM [Order Details] WHERE YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in each month of the current year?",
        "output": "SELECT MONTH(OrderDate) as Month, COUNT(*) as OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(GETDATE()) GROUP BY MONTH(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee processed the highest number of orders?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many suppliers are there in each region?",
        "output": "SELECT suppliers.Region, COUNT(suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.Region;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of returning customers in January 2023?",
        "output": "WITH previous_period AS (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < '2023-01-01'), current_period AS (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31') SELECT (SELECT COUNT(*) FROM current_period) / (SELECT COUNT(*) FROM previous_period) AS RetentionRate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which orders were shipped late?",
        "output": "SELECT * FROM orders WHERE ShippedDate IS NOT NULL AND ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest average discount in 2023?",
        "output": "SELECT od.ProductID, AVG(od.Discount) AS AvgDiscount FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y') = '2023' GROUP BY od.ProductID ORDER BY AvgDiscount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly performance of each product in terms of quantity sold?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantitySold, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.ProductName, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all supplier names and their respective contact names.",
        "output": "SELECT CompanyName, ContactName FROM suppliers;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the cities with the highest number of shipped orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS count FROM orders GROUP BY ShipCity ORDER BY count DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by each product?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees who have generated more than $100,000 in sales?",
        "output": "SELECT AVG(e.Salary) AS AvgSalary FROM employees e JOIN (SELECT EmployeeID FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 100000) e_with_sales ON e.EmployeeID = e_with_sales.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average order value handled by each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the average units in stock for each product?",
        "output": "SELECT p.ProductName, AVG(p.UnitsInStock) AS AvgUnitsInStock FROM products p GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total units in stock for each supplier's products?",
        "output": "SELECT products.SupplierID, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders in the past year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY CustomerID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average order value for each employee.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied to all orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all suppliers based in Germany.",
        "output": "SELECT * FROM suppliers WHERE Country = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of customers are returning customers over the last year?",
        "output": "WITH PreviousCustomers AS (SELECT CustomerID FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) SELECT (SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() AND CustomerID IN (SELECT * FROM PreviousCustomers)) / (SELECT COUNT(DISTINCT CustomerID) FROM PreviousCustomers) AS RetentionRate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping company for the last quarter?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 QUARTER) GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the most expensive product in the inventory?",
        "output": "SELECT ProductID, ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue for each product?",
        "output": "SELECT p.ProductID, SUM(od.UnitPrice * od.Quantity) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(*) AS TotalOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city received the highest number of shipments?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalShipments FROM orders GROUP BY ShipCity ORDER BY TotalShipments DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not been ordered in the last six months?",
        "output": "SELECT products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL OR [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 6 MONTH));",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are priced above the average unit price?",
        "output": "SELECT ProductID, ProductName, UnitPrice FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders that were shipped to 'Germany'.",
        "output": "SELECT * FROM orders WHERE ShipCountry = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the least selling product categories.",
        "output": "SELECT c.CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalQuantitySold ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average shipping time in days for each shipping method.",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) as AverageShippingTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total freight cost for each order in September 2023?",
        "output": "SELECT orders.OrderID, SUM(orders.Freight) AS total_freight_cost FROM orders WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY orders.OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 3 products with the highest total sales revenue?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) as TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the monthly sales revenue for each product.",
        "output": "SELECT p.ProductName, DATE_FORMAT(od.OrderDate, '%Y-%m') AS Month, SUM(od.Quantity * od.UnitPrice) AS MonthlyRevenue FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly sales trend for 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS monthly_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders do we have with missing ship dates?",
        "output": "SELECT COUNT(OrderID) AS MissingShipDates FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped late (shipped after the required date)?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region has the highest sales in 2023?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN regions ON customers.RegionID = regions.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY region.RegionDescription ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for June 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier has the highest number of products that are still in stock?",
        "output": "SELECT S.SupplierID, S.SupplierName, COUNT(P.ProductID) AS ProductsInStock FROM suppliers S JOIN products P ON S.SupplierID = P.SupplierID WHERE P.UnitsInStock > 0 GROUP BY S.SupplierID, S.SupplierName ORDER BY ProductsInStock DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers had the highest total freight cost?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY CustomerID ORDER BY TotalFreightCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the products with zero units in stock but have pending orders?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.UnitsInStock = 0 AND p.UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight cost incurred for each employee's orders.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have stock levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total number of products ordered per supplier.",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalUnitsOrdered FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of unique customers who placed orders in 2023?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS total_customers FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the monthly total order value for each supplier.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top 10 employees based on the total number of orders they handled.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee processed the most orders in September 2023?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-09' GROUP BY EmployeeID ORDER BY OrdersCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped after the required date in 2023?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category had the highest sales in 2023?",
        "output": "SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN categories ON products.CategoryID = categories.CategoryID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated in January 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products ordered by each employee?",
        "output": "SELECT EmployeeID, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount given on each order?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the sales trends by month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m') ORDER BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of products supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) as TotalProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What's the average order fulfillment time in August 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to each product?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed in the last year?",
        "output": "SELECT COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) - 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product with the highest unit price.",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most different products?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS ProductVariety FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductVariety DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate for the last month?",
        "output": "WITH previous_month AS (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 2 MONTH) AND DATE_SUB(CURDATE(), INTERVAL 1 MONTH)), current_month AS (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()) SELECT (SELECT COUNT(*) FROM current_month WHERE CustomerID IN (SELECT CustomerID FROM previous_month)) / (SELECT COUNT(*) FROM previous_month) AS RetentionRate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order quantity for each product?",
        "output": "SELECT [Order Details].ProductID, AVG([Order Details].Quantity) AS Average_Quantity FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are in stock for each category?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS StockCount FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost per order in our database?",
        "output": "SELECT AVG(Freight) AS AverageFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 5 products by revenue generated.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for orders handled by employee 3?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE EmployeeID = 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for orders shipped by each shipping company?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders shipped to a specific country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are nearing their reorder level?",
        "output": "SELECT products.ProductID, products.ProductName FROM products WHERE products.UnitsInStock <= products.ReorderLevel",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales revenue in the northeastern region?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS sales_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN territories ON orders.EmployeeID = territories.TerritoryID WHERE territories.RegionID = (SELECT RegionID FROM region WHERE RegionDescription = 'Northeast') GROUP BY products.ProductName ORDER BY sales_revenue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of products sold in 2022?",
        "output": "SELECT SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which country has the highest number of suppliers?",
        "output": "SELECT suppliers.Country, COUNT(suppliers.SupplierID) AS SupplierCount FROM suppliers GROUP BY suppliers.Country ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue generated from orders shipped to 'USA'?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShipCountry = 'USA';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest number of units on order?",
        "output": "SELECT ProductName FROM products ORDER BY UnitsOnOrder DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has placed the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(*) AS order_count FROM orders GROUP BY CustomerID ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the names and contact details of all suppliers?",
        "output": "SELECT SupplierID, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax, HomePage FROM suppliers;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between the order date and the shipped date for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgDaysToShip FROM orders GROUP BY ShipVia",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average number of units in stock across all products?",
        "output": "SELECT AVG(UnitsInStock) as AverageUnitsInStock FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the number of unique customers who placed orders each month.",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the highest number of discontinued products?",
        "output": "SELECT CategoryID, COUNT(*) AS DiscontinuedProductCount FROM products WHERE Discontinued = 1 GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied per order?",
        "output": "SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of discontinued products?",
        "output": "SELECT COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique products were purchased by each customer?",
        "output": "SELECT orders.CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS UniqueProductsPurchased FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have been placed in each year?",
        "output": "SELECT YEAR(OrderDate) AS OrderYear, COUNT(*) AS OrderCount FROM orders GROUP BY OrderYear;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest sales?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 countries by total sales in 2023.",
        "output": "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the monthly freight cost for the past year.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS MonthlyFreightCost FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the suppliers based on their regions and the number of products they supply.",
        "output": "SELECT s.Region, COUNT(p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the number of orders that were shipped after the required date.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the highest number of orders in 2021?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2021 GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products that have received the highest average discount.",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AvgDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for orders placed in January 2022?",
        "output": "SELECT COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the most expensive products on average?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) as AvgUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, suppliers.CompanyName ORDER BY AvgUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees and their total sales for orders shipped within the first quarter of 2023.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.ShippedDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What's the total sales revenue for each country?",
        "output": "SELECT orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total units sold for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales for each country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the most number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) as NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of the products supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales amount and quantity of products ordered by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, SUM([Order Details].Quantity) AS TotalQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales for each month of 2023?",
        "output": "SELECT EXTRACT(MONTH FROM o.OrderDate) AS month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY EXTRACT(MONTH FROM o.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders that were shipped after the required date.",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the distribution of order quantities?",
        "output": "SELECT Quantity, COUNT(*) AS QuantityCount FROM [Order Details] GROUP BY Quantity ORDER BY QuantityCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total discount given by each employee.",
        "output": "SELECT e.FirstName, e.LastName, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total stock value (UnitsInStock * UnitPrice) for each product?",
        "output": "SELECT ProductName, (UnitsInStock * UnitPrice) AS StockValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products are the least popular based on quantities ordered?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) as TotalQuantity FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalQuantity ASC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all discontinued products with their corresponding supplier IDs.",
        "output": "SELECT ProductName, SupplierID FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders got delayed (Shipped after the RequiredDate) last quarter?",
        "output": "SELECT COUNT(*) AS DelayedOrders FROM orders WHERE ShippedDate > RequiredDate AND OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of products on order for each supplier?",
        "output": "SELECT s.SupplierName, SUM(p.UnitsOnOrder) AS TotalUnitsOnOrder FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the percentage of orders shipped late.",
        "output": "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS LateShippingRate FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the total value of units in stock for each product.",
        "output": "SELECT ProductName, (UnitsInStock * UnitPrice) AS TotalValueInStock FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer order had the highest total value?",
        "output": "SELECT o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units ordered for each product category?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS TotalUnitsOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How long does it typically take to fulfill an order on average each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity sold for each product category?",
        "output": "SELECT categories.CategoryID, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the suppliers for discontinued products?",
        "output": "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region has the longest order fulfillment time in 2023?",
        "output": "SELECT region.RegionDescription, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY region.RegionDescription",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders required more than 7 days to ship?",
        "output": "SELECT COUNT(OrderID) AS orders_above_7_days FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales this month?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost incurred for orders shipped via each shipping method.",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired after 2022?",
        "output": "SELECT COUNT(EmployeeID) AS EmployeesHiredAfter2022 FROM employees WHERE HireDate > '2022-01-01';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Group orders by shipping region and provide the count of orders in each group.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS count_of_orders FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many unique customers placed orders in 2022?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS unique_customers FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest total sales revenue?",
        "output": "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of products in each category?",
        "output": "SELECT c.CategoryName, COUNT(p.ProductID) AS ProductCount FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee on a monthly basis?",
        "output": "SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units sold per product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalUnitsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered more than 1000 times?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID IN (SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 1000);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate for customers from March 2022 to March 2023?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-03-01' AND '2023-03-31' THEN o.CustomerID END)::DECIMAL / COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-03-01' THEN o.CustomerID END)::DECIMAL) AS RetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most frequently used shipping method?",
        "output": "SELECT ShipVia, COUNT(*) as UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product are on order, and what is their total value?",
        "output": "SELECT ProductID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder, SUM(UnitsOnOrder * UnitPrice) AS TotalValueOnOrder FROM products GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY Month",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for orders handled by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreightCost FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount amount applied to each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscountAmount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of orders shipped?",
        "output": "SELECT ShipCity, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which regions have the highest freight costs on average?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipRegion ORDER BY AvgFreight DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest total sales?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 3 cities by the number of orders shipped to them in the last year.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) - 1 GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total salary expense of the company?",
        "output": "SELECT SUM(Salary) AS TotalSalaryExpense FROM employees;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the most recent order for each customer.",
        "output": "SELECT CustomerID, MAX(OrderDate) AS MostRecentOrder FROM orders GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units of all products currently on order?",
        "output": "SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the monthly total sales and average order value for 2023.",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY MONTH(orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have delivered products with an average lead time of more than 10 days?",
        "output": "SELECT suppliers.CompanyName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY suppliers.CompanyName HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee processed the most orders in the month of January 2023?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = '2023-01' GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer has the highest Customer Lifetime Value?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CLV FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY CLV DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier supplies the most number of products?",
        "output": "SELECT suppliers.SupplierID, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each month in 2023?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have the highest total freight costs?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY CustomerID ORDER BY TotalFreightCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total revenue generated from orders fulfilled by a specific shipper in 2023?",
        "output": "SELECT shippers.ShipperID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.ShipperID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of all units currently in stock?",
        "output": "SELECT SUM(UnitsInStock * UnitPrice) AS TotalInventoryValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have a reorder level above 20?",
        "output": "SELECT COUNT(ProductID) FROM products WHERE ReorderLevel > 20;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales value for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products ordered?",
        "output": "SELECT SUM(Quantity) FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average order amount of customers in each country.",
        "output": "SELECT c.Country, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderAmount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which regions have the highest sales?",
        "output": "SELECT o.ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion ORDER BY TotalSales DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have been discontinued?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest sales revenue?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the number of orders shipped to each country.",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all orders where the discount applied is greater than 20%.",
        "output": "SELECT OrderID, ProductID, UnitPrice, Quantity, Discount FROM [Order Details] WHERE Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have birthdays in the current month?",
        "output": "SELECT EmployeeID, FirstName, LastName, BirthDate FROM employees WHERE MONTH(BirthDate) = MONTH(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(*) as OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have the most orders delivered late in 2023?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS late_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.ShippedDate > orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY late_orders DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders shipped to 'USA' in 2023?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA' AND OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers received the highest amount of discount on their orders?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID ORDER BY TotalDiscount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by each customer in March 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total discount given on all orders?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct products were ordered this month?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS DistinctProducts FROM [Order Details] WHERE DATE_FORMAT(OrderID, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who has processed the most orders within a single month.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, YEAR(orders.OrderDate), MONTH(orders.OrderDate) ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have the longest tenure at the company?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, (julianday('now') - julianday(e.HireDate) ) as Tenure FROM employees e ORDER BY Tenure DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders each customer placed in 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales so far?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the total sales for the month of January 2023.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly total quantity sold for each product?",
        "output": "SELECT p.ProductName, EXTRACT(MONTH FROM o.OrderDate) AS Month, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.ProductName, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average lead time of each supplier in delivering products?",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY p.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have never placed an order?",
        "output": "SELECT * FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated in the month of January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the reorder level for each product category?",
        "output": "SELECT categories.CategoryID, categories.CategoryName, AVG(products.ReorderLevel) AS AverageReorderLevel FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID, categories.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue generated last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 10 most frequently ordered products?",
        "output": "SELECT ProductID, COUNT(*) AS NumberOfOrders FROM [Order Details] GROUP BY ProductID ORDER BY NumberOfOrders DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide products with the highest unit prices?",
        "output": "SELECT suppliers.SupplierID, MAX(products.UnitPrice) AS HighestUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY HighestUnitPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has fulfilled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfFulfilledOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfFulfilledOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products sold in each order?",
        "output": "SELECT o.OrderID, SUM(od.Quantity) AS TotalQuantity FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost per order in the last quarter?",
        "output": "SELECT SUM(orders.Freight) / COUNT(orders.OrderID) AS Average_Freight_Cost FROM orders WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for each employee?",
        "output": "SELECT EmployeeID, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(*)) * 100 AS on_time_delivery_rate FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total revenue generated by orders that had discounts applied.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od WHERE od.Discount > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping country had the highest number of orders in the past quarter?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 3 MONTH GROUP BY ShipCountry ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 3 regions with the lowest average order fulfillment time.",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgOrderFulfillmentTime FROM orders GROUP BY ShipRegion ORDER BY AvgOrderFulfillmentTime ASC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total freight cost for each country.",
        "output": "SELECT ShipCountry, SUM(Freight) AS total_freight_cost FROM orders GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are close to running out of stock (below their reorder level)?",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the top 5 most frequently ordered products.",
        "output": "SELECT p.ProductName, COUNT(od.ProductID) AS OrderCount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average quantity of products ordered per order in 2023?",
        "output": "SELECT AVG(od.Quantity) AS AvgQuantity FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y') = '2023';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given on each product?",
        "output": "SELECT ProductID, AVG(Discount) AS AverageDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer placed the most orders in 2022?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customers.CustomerID ORDER BY order_count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest order fulfillment time this year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY month ORDER BY avg_fulfillment_time DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated by country in 2022?",
        "output": "SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customers.Country",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Compute the average shipping cost per order in June 2023.",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed by each customer last year?",
        "output": "SELECT o.CustomerID, COUNT(o.OrderID) AS OrdersCount FROM orders o WHERE YEAR(o.OrderDate) = YEAR(CURDATE())-1 GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped using each shipping method in 2023?",
        "output": "SELECT orders.ShipVia, COUNT(orders.OrderID) AS total_orders FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the variance in shipping costs across all orders?",
        "output": "SELECT VARIANCE(Freight) AS ShippingCostVariance FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the number of orders shipped to each country.",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS NumberOfOrders FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are currently on order?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many products are currently out of stock?",
        "output": "SELECT products.ProductName FROM products WHERE products.UnitsInStock = 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of order fulfillment times (time between order date and shipped date)?",
        "output": "SELECT DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime, COUNT(*) AS OrderCount FROM orders GROUP BY FulfillmentTime;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customers who have placed more than 10 orders.",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID HAVING COUNT(o.OrderID) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units were sold of each product, grouped by month?",
        "output": "SELECT products.ProductName, DATEPART(month, [Order Details].OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName, DATEPART(month, [Order Details].OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for orders shipped to the USA?",
        "output": "SELECT AVG(Freight) AS AverageShippingCost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct customers placed orders in March 2022?",
        "output": "SELECT COUNT(DISTINCT CustomerID) FROM orders WHERE MONTH(OrderDate) = 3 AND YEAR(OrderDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the correlation between freight cost and shipment time?",
        "output": "SELECT Freight, DATEDIFF(ShippedDate, OrderDate) AS ShipmentTime FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Identify the most frequently ordered product category in 2023.",
        "output": "SELECT categories.CategoryName, COUNT([Order Details].ProductID) AS order_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY order_count DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped more than a week late?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 7",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of orders placed within the last month?",
        "output": "SELECT SUM(UnitPrice * Quantity) AS TotalOrderValue FROM [Order Details] WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATEADD(month, -1, GETDATE()));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered (units in stock below reorder level) and what is their reorder level?",
        "output": "SELECT ProductName, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common city for shipping addresses?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many distinct products have been ordered in the past year?",
        "output": "SELECT COUNT(DISTINCT ProductID) FROM [Order Details] WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "For each product, what is the total revenue from sales?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken from order placement to shipping for orders that were fulfilled on-time in the year 2022?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_processing_time FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the average discount given on products.",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the products that have more units on order than units in stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders along with the names of the customers who placed them.",
        "output": "SELECT orders.*, customers.ContactName FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied on products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost incurred by each employee?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM(orders.Freight) AS TotalFreightCost FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have been ordered in quantities higher than 50 in a single order?",
        "output": "SELECT p.ProductName, COUNT(od.Quantity) AS HighQuantityOrders FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Quantity > 50 GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total revenue for each country.",
        "output": "SELECT c.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred last month?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate >= DATE_FORMAT(NOW() - INTERVAL 1 MONTH, '%Y-%m-01') AND OrderDate < DATE_FORMAT(NOW(), '%Y-%m-01');",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on orders?",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have generated the highest lifetime value for the company?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have been with the company for more than 10 years.",
        "output": "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees WHERE DATEDIFF(CURDATE(), HireDate) > 3650;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the percentage of discontinued products for each supplier.",
        "output": "SELECT s.CompanyName, COUNT(CASE WHEN p.Discontinued = 1 THEN 1 ELSE NULL END) * 100 / COUNT(p.ProductID) AS DiscontinuedPercentage FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName",
        "difficulty": "hard"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the distribution of employees' titles in the company?",
        "output": "SELECT Title, COUNT(EmployeeID) AS Count FROM employees GROUP BY Title;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the longest employment duration who has also made sales in the last year.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, DATEDIFF(CURRENT_DATE, e.HireDate) AS EmploymentDuration FROM employees e WHERE e.EmployeeID IN (SELECT DISTINCT o.EmployeeID FROM orders o WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) ORDER BY EmploymentDuration DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on each product?",
        "output": "SELECT ProductName, AVG(Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed each day in the first week of January 2023?",
        "output": "SELECT OrderDate, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-07' GROUP BY OrderDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who have 'Sales' in their title.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE e.Title LIKE '%Sales%';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average supplier lead time for each supplier in 2023?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN products ON orders.OrderID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY suppliers.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the suppliers who have never been involved in an order.",
        "output": "SELECT CompanyName FROM suppliers WHERE SupplierID NOT IN (SELECT SupplierID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of products per order?",
        "output": "SELECT OrderID, AVG(Quantity) as AverageQuantity FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers generate the highest Customer Lifetime Value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as CustomerLifetimeValue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY CustomerLifetimeValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier in the USA has the highest total sales?",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE s.Country = 'USA' GROUP BY s.CompanyName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is used the most?",
        "output": "SELECT ShipVia, COUNT(*) AS Count FROM orders GROUP BY ShipVia ORDER BY Count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find out in which cities the most orders have been shipped.",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region had the highest number of orders?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped to 'USA' in the last six months?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShipCountry = 'USA' AND OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE();",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which months had the highest number of orders?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest total sales?",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total quantity of each product ordered by all customers.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products where the total order quantity is greater than the available units in stock.",
        "output": "SELECT p.ProductName FROM products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > MAX(p.UnitsInStock);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List suppliers located in the USA.",
        "output": "SELECT SupplierID, CompanyName FROM suppliers WHERE Country = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region has the highest number of customers?",
        "output": "SELECT customers.Region, COUNT(customers.CustomerID) AS total_customers FROM customers GROUP BY customers.Region ORDER BY total_customers DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in 2022?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many orders contained each product?",
        "output": "SELECT products.ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find orders with a freight cost higher than $100.",
        "output": "SELECT OrderID, Freight FROM orders WHERE Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine which products are nearing their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel + 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders by city?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCity;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top 3 cities with the highest number of employee orders?",
        "output": "SELECT ShipCity, COUNT(orders.OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the average shipping times for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the yearly sales growth for each employee over the last 3 years.",
        "output": "SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Year(o.OrderDate) ORDER BY Year(o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders were shipped after their required date?",
        "output": "SELECT OrderID, OrderDate, ShippedDate, RequiredDate FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for March 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are currently on order?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average reorder level for non-discontinued products.",
        "output": "SELECT AVG(ReorderLevel) AS AverageReorderLevel FROM products WHERE Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average shipping time for each customer?",
        "output": "SELECT c.CustomerID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgShippingTime FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were shipped in February 2023?",
        "output": "SELECT COUNT(OrderID) AS TotalShippedOrders FROM orders WHERE MONTH(ShippedDate) = 2 AND YEAR(ShippedDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Retrieve the top 5 most expensive products and their suppliers.",
        "output": "SELECT p.ProductName, p.UnitPrice, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID ORDER BY p.UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the most common shipping destination country for each employee.",
        "output": "SELECT e.EmployeeID, ShipCountry, COUNT(*) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, ShipCountry ORDER BY OrderCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the percentage of total sales contributed by each employee?",
        "output": "SELECT employees.EmployeeID, employees.LastName, employees.FirstName, (SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / (SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) FROM [Order Details])) * 100 AS SalesPercentage FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total amount of freight cost handled by each employee?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has managed the most number of orders that were delivered on time?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate GROUP BY EmployeeID ORDER BY OnTimeOrders DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the total freight costs grouped by shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated by each employee in Q1 2023?",
        "output": "SELECT employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late (after the required date)?",
        "output": "SELECT COUNT(*) AS LateOrdersCount FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total revenue generated from each country.",
        "output": "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as total_revenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the most orders in 2023?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = '2023' GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that have been discontinued?",
        "output": "SELECT DISTINCT s.SupplierID, s.SupplierName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "For each product, what is the total revenue generated from all orders?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average quantity of products ordered per order.",
        "output": "SELECT AVG(od.Quantity) AS AverageQuantity FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders were delivered on-time?",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 3 regions with the highest number of orders.",
        "output": "SELECT ShipRegion as Region, COUNT(*) as TotalOrders FROM orders GROUP BY ShipRegion ORDER BY TotalOrders DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders delivered after the required date?",
        "output": "SELECT 100.0 * SUM(IF(ShippedDate > RequiredDate, 1, 0)) / COUNT(OrderID) AS LateDeliveryRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales in April 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of units sold for each product in 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders placed in the last year were shipped to each country?",
        "output": "SELECT orders.ShipCountry, COUNT(orders.OrderID) AS OrdersCount FROM orders WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY orders.ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many products have been ordered more than 100 times?",
        "output": "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID HAVING COUNT(*) > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What products have a higher number of units on order than units in stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in 2022?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the trend for the average order value over time?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the 10 most recent orders?",
        "output": "SELECT * FROM orders ORDER BY OrderDate DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of each product are in stock?",
        "output": "SELECT p.ProductName, p.UnitsInStock FROM products p;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied per order?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in the year 2022?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customers with orders that had a discount applied.",
        "output": "SELECT DISTINCT c.CustomerID, c.CompanyName FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were delayed past the required date in 2023?",
        "output": "SELECT COUNT(orders.OrderID) AS delayed_orders FROM orders WHERE orders.ShippedDate > orders.RequiredDate AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders placed by each customer in 2023?",
        "output": "SELECT orders.CustomerID, COUNT(orders.OrderID) AS total_orders FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping method is most commonly used for orders in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS total_orders FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName ORDER BY total_orders DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the highest discount given on an order and by which employee?",
        "output": "SELECT e.EmployeeID, MAX(od.Discount) AS MaxDiscount FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY MaxDiscount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders by shipping country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the lowest average shipping cost?",
        "output": "SELECT shippers.CompanyName, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.CompanyName ORDER BY avg_shipping_cost ASC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the total units ordered for each product in the last year.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Compute the average freight cost per shipping method.",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are located in each country?",
        "output": "SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY Country",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most popular product category based on total units sold in the first half of 2022?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-06-30' GROUP BY categories.CategoryName ORDER BY total_units_sold DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the orders that were shipped later than the required date.",
        "output": "SELECT orders.OrderID, orders.RequiredDate, orders.ShippedDate FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest average shipping cost?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry ORDER BY AverageShippingCost DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average time (in days) taken to ship an order by each employee.",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the order with the longest fulfillment time.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders ORDER BY FulfillmentTime DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 suppliers based on total revenue generated?",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the highest freight cost for a single order?",
        "output": "SELECT MAX(Freight) AS HighestFreightCost FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the most common title among employees.",
        "output": "SELECT Title, COUNT(*) AS NumberOfEmployees FROM employees GROUP BY Title ORDER BY NumberOfEmployees DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest number of orders shipped?",
        "output": "SELECT ShipCountry, COUNT(*) AS order_count FROM orders GROUP BY ShipCountry ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of shipments?",
        "output": "SELECT ShipCity, COUNT(*) AS number_of_shipments FROM orders GROUP BY ShipCity ORDER BY number_of_shipments DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many units of the most popular product were sold in each month of 2023?",
        "output": "SELECT products.ProductID, DATE_TRUNC('month', orders.OrderDate) AS month, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, month ORDER BY units_sold DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find out which region has the highest total sales.",
        "output": "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight cost incurred by each employee's orders.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM(Freight) AS TotalFreightCost FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of orders placed by customers from each country?",
        "output": "SELECT c.Country, COUNT(o.OrderID) AS TotalOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.Country ORDER BY TotalOrders DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products that have a total discount greater than a specific value (e.g., $100).",
        "output": "SELECT ProductName FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName HAVING SUM([Order Details].Discount) > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the number of distinct products ordered by each customer.",
        "output": "SELECT [Order Details].CustomerID, COUNT(DISTINCT [Order Details].ProductID) AS DistinctProductsOrdered FROM [Order Details] GROUP BY [Order Details].CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees grouped by their title?",
        "output": "SELECT Title, AVG(Salary) as AvgSalary FROM employees GROUP BY Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have shipped orders to more than one country?",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID HAVING COUNT(DISTINCT o.ShipCountry) > 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find orders that exceeded the required delivery date by more than 3 days.",
        "output": "SELECT * FROM orders WHERE DATEDIFF(ShippedDate, RequiredDate) > 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been reordered below their reorder level?",
        "output": "SELECT ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest sales in 2022?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2022 GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method was used most frequently?",
        "output": "SELECT ShipVia, COUNT(*) AS frequency FROM orders GROUP BY ShipVia ORDER BY frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given per product?",
        "output": "SELECT ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount applied on orders in the third quarter of 2023?",
        "output": "SELECT AVG(od.Discount) AS avg_discount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-07-01' AND '2023-09-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the inventory turnover ratio for the last month.",
        "output": "Corrected: SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE DATE_FORMAT(od.OrderDate, '%Y-%m') = DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for products in the year 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31')",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the top 5 customers based on total purchases.",
        "output": "SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalPurchases FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY TotalPurchases DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for orders placed in 2022?",
        "output": "SELECT COUNT(orders.OrderID) WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the percentage of orders shipped within each region.",
        "output": "SELECT ShipRegion, (COUNT(OrderID)::DECIMAL / (SELECT COUNT(*) FROM orders)) * 100 AS RegionPercentage FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total revenue generated by each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders placed by each customer?",
        "output": "SELECT orders.CustomerID, COUNT(*) as TotalOrders FROM orders GROUP BY orders.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of units in stock for each product category?",
        "output": "SELECT c.CategoryName, SUM(p.UnitPrice * p.UnitsInStock) AS TotalStockValue FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the total sales for the month of January 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories of products have the highest total sales?",
        "output": "SELECT CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in the first half of 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the distribution of orders by shipping method for September 2023?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top 5 products in terms of quantity sold.",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the most popular product category based on total units sold.",
        "output": "SELECT c.CategoryName, SUM(od.Quantity) AS TotalQuantity FROM categories c INNER JOIN products p ON c.CategoryID = p.CategoryID INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales generated from orders in the last three months?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_ADD(CURDATE(), INTERVAL -3 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total units on order for each product?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products ordered by each supplier?",
        "output": "SELECT s.SupplierID, s.SupplierName, SUM(od.Quantity) FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID, s.SupplierName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the products that have never been ordered.",
        "output": "SELECT products.ProductID, products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to orders in the last year?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many unique customers placed orders?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average number of days taken to fulfill an order.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has generated the highest revenue?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY TotalRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value per employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average price of products supplied by each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time for suppliers to deliver products in June 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30' GROUP BY products.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated from each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a unit price greater than the average unit price of all products?",
        "output": "SELECT COUNT(*) FROM products p WHERE p.UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the supplier who provides the most number of different products.",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS NumProducts FROM products GROUP BY SupplierID ORDER BY NumProducts DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for the month of January 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are discontinued?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped in the last year?",
        "output": "SELECT COUNT(OrderID) AS total_orders FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers that supply more than 10 products.",
        "output": "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName HAVING COUNT(p.ProductID) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the revenue contribution of each employee?",
        "output": "SELECT EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS EmployeeSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 cities by number of orders placed.",
        "output": "SELECT ShipCity, COUNT(OrderID) as NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average discount offered per order.",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are located in the same city as the customers?",
        "output": "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s INNER JOIN orders o ON s.City = o.ShipCity;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have less than 5 units in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories have the highest number of units on order?",
        "output": "SELECT c.CategoryID, SUM(p.UnitsOnOrder) as TotalUnitsOnOrder FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalUnitsOnOrder DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average number of orders per customer per year.",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) / (YEAR(CURRENT_DATE) - YEAR(MIN(o.OrderDate)) + 1) AS AvgOrdersPerYear FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders shipped by each shipping method?",
        "output": "SELECT ShipVia, (COUNT(*) / (SELECT COUNT(*) FROM orders)) * 100 AS PercentageOfOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the orders with the highest shipping costs.",
        "output": "SELECT * FROM orders ORDER BY Freight DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each discontinued product are still in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees were hired in the year 2022?",
        "output": "SELECT EmployeeID, FirstName, LastName FROM employees WHERE YEAR(HireDate) = 2022;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country has the most orders with a discount applied?",
        "output": "SELECT ShipCountry, COUNT(CASE WHEN [Order Details].Discount > 0 THEN 1 END) AS DiscountedOrders FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY DiscountedOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount provided on orders?",
        "output": "SELECT AVG(Discount) as AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees generated the highest sales in the first quarter of 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total sales for each employee grouped by month.",
        "output": "SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated by product categories in 2022?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY od.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time for supplier deliveries grouped by supplier?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN products ON [Order Details].ProductID = products.ProductID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY products.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products ordered so far?",
        "output": "SELECT SUM(Quantity) AS TotalOrderedQuantity FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly sales trend for each product over the last year?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY OrderMonth, p.ProductID ORDER BY OrderMonth, p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest inventory turnover ratio?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY turnover_ratio DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest number of shipped orders?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS ShippedOrders FROM orders GROUP BY ShipCountry ORDER BY ShippedOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average discount given on orders in 2023.",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average ship-to-order duration for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShipDuration FROM orders GROUP BY ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the distribution of order quantities for each product?",
        "output": "SELECT ProductID, SUM(Quantity) as TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most frequently ordered product in 2022?",
        "output": "SELECT products.ProductID, COUNT([Order Details].OrderID) AS order_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.ProductID ORDER BY order_count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') as Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the number of unique products ordered each month.",
        "output": "SELECT MONTH(o.OrderDate) AS Month, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price for products from each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Lifetime Value (CLV) for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as CLV FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Count the number of orders shipped by country.",
        "output": "SELECT ShipCountry, COUNT(*) as number_of_orders FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by employees in each country?",
        "output": "SELECT employees.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What's the total freight charge for orders shipped to 'USA' in November 2023?",
        "output": "SELECT SUM(orders.Freight) AS total_freight FROM orders WHERE orders.ShipCountry = 'USA' AND orders.OrderDate BETWEEN '2023-11-01' AND '2023-11-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total revenue lost from discontinued products.",
        "output": "SELECT SUM(p.UnitPrice * p.UnitsInStock) AS LostRevenue FROM products p WHERE p.Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 5 products by sales revenue within each category.",
        "output": "SELECT p.CategoryID, p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS SalesRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID, p.ProductID, p.ProductName ORDER BY SalesRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have stock levels below the reorder level?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the orders that took more than 10 days to fulfill.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTimeInDays FROM orders HAVING FulfillmentTimeInDays > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions have the highest freight costs?",
        "output": "SELECT ShipRegion, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipRegion ORDER BY TotalFreight DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders are shipped within 3 days of the order date?",
        "output": "SELECT (COUNT(CASE WHEN DATEDIFF(ShippedDate, OrderDate) <= 3 THEN 1 END) / COUNT(OrderID)) * 100 as PercentShippedWithin3Days FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost for each month?",
        "output": "SELECT DATE_TRUNC('month', OrderDate) AS Month, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY Month ORDER BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in July 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer has the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the orders that had the highest discount applied.",
        "output": "SELECT * FROM [Order Details] WHERE Discount = (SELECT MAX(Discount) FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping time for orders handled by each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of the products supplied by each supplier?",
        "output": "SELECT suppliers.SupplierID, AVG(products.UnitPrice) AS AveragePrice FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products by total sales quantity?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed each month in the last two years?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS NumberOfOrders FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount offered on all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Retrieve recent orders (within 7 days) and display their shipping details.",
        "output": "SELECT o.OrderID, o.OrderDate, o.ShippedDate, o.ShipName, o.ShipAddress, o.ShipCity, o.ShipCountry FROM orders o WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product have been ordered?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find employees who have an average order size greater than $1000.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderSize FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING AverageOrderSize > 1000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the product performance based on the sales quantity.",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the customer with the highest lifetime value.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c INNER JOIN orders o ON c.CustomerID = o.CustomerID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the total sales for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify orders that had the highest freight cost.",
        "output": "SELECT * FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount given on all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest unit price?",
        "output": "SELECT ProductID, ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for each month in 2023?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(Freight) AS avg_shipping_cost FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for August 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given for each product in the last year?",
        "output": "SELECT products.ProductName, SUM([Order Details].Discount) AS TotalDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE DATE([Order Details].OrderDate) BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products by revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which month had the highest total sales in 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY MONTH(orders.OrderDate) ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the top 5 suppliers based on the total order value they supplied.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalOrderValue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY TotalOrderValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the monthly sales trends for each product?",
        "output": "SELECT products.ProductName, YEAR(orders.OrderDate) AS Year, MONTH(orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, Year, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average units sold per month for each product.",
        "output": "SELECT p.ProductID, p.ProductName, AVG(od.Quantity) AS AverageUnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in Q1 of 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for orders shipped by 'ShipName ABC' in 2023?",
        "output": "SELECT AVG(Freight) AS AvgShippingCost FROM orders WHERE ShipName = 'ShipName ABC' AND DATE_FORMAT(OrderDate, '%Y') = '2023'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the number of units on order for each product.",
        "output": "SELECT ProductID, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "List the top 5 cities with the highest number of orders in Q2 2023.",
        "output": "SELECT ShipCity, COUNT(*) AS order_count FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY ShipCity ORDER BY order_count DESC LIMIT 5",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which cities have the highest number of customers?",
        "output": "SELECT City, COUNT(*) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on their stock level and reorder point?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee processed the highest number of orders in the first half of 2023?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total shipping cost incurred during the past year?",
        "output": "SELECT SUM(Freight) AS total_shipping_cost FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many unique products are sold by each supplier?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS UniqueProducts FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total amount of revenue generated by each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level of 10 or more?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel >= 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products should be reordered to avoid stockouts?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have a freight cost greater than $50?",
        "output": "SELECT COUNT(OrderID) AS OrdersWithHighFreight FROM orders WHERE Freight > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each customer last month?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS num_orders FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(NOW() - INTERVAL 1 MONTH, '%Y-%m') GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the trend of average shipping costs over the last six months?",
        "output": "SELECT DATEPART(MONTH, OrderDate) AS Month, AVG(Freight) AS AvgFreightCost FROM orders WHERE OrderDate >= DATEADD(MONTH, -6, GETDATE()) GROUP BY DATEPART(MONTH, OrderDate)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from products supplied by 'Supplier A'?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE suppliers.CompanyName = 'Supplier A' GROUP BY suppliers.CompanyName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest value order?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID ORDER BY OrderValue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average shipping cost for orders shipped to 'USA'.",
        "output": "SELECT AVG(Freight) AS AverageShippingCost FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products with unit prices higher than the average unit price of all products.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who have spent more than $10,000.",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 10000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify all orders where the total discount exceeds $100.",
        "output": "SELECT o.OrderID, SUM(od.Discount * od.UnitPrice * od.Quantity) AS TotalDiscount FROM [Order Details] od INNER JOIN orders o ON od.OrderID = o.OrderID GROUP BY o.OrderID HAVING TotalDiscount > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated for each product?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the highest average shipping cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipVia ORDER BY AverageShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders placed each month?",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY MONTH(OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee shipped the most orders last year?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS ShippedOrders FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE YEAR(o.ShippedDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY ShippedOrders DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the average price of products in each category.",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the earliest hire date?",
        "output": "SELECT EmployeeID, FirstName, LastName, HireDate FROM employees WHERE HireDate = (SELECT MIN(HireDate) FROM employees);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who were hired after January 1, 2020.",
        "output": "SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate > '2020-01-01';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping company?",
        "output": "SELECT ShipVia, SUM(Freight) AS total_freight_cost FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the city with the most orders shipped.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product category has the highest number of units sold?",
        "output": "SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].Quantity) AS TotalUnitsSold FROM categories JOIN products ON categories.CategoryID = products.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryID, categories.CategoryName ORDER BY TotalUnitsSold DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 3 suppliers by the number of products they supply.",
        "output": "SELECT s.SupplierName, COUNT(p.ProductID) AS ProductsSupplied FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductsSupplied DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders placed in each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been shipped to the 'USA'?",
        "output": "SELECT COUNT(*) AS OrdersInUSA FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List orders that have a discount of 20% or more.",
        "output": "SELECT * FROM [Order Details] WHERE Discount >= 0.20;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per country?",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for January 2023?",
        "output": "SELECT COUNT(orders.OrderID) WHERE orders.ShippedDate <= orders.RequiredDate / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time per employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(day, OrderDate, ShippedDate)) AS AvgFulfillmentTimePerEmployee FROM orders GROUP BY EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the contact details of suppliers who have supplied products in the last month.",
        "output": "SELECT suppliers.ContactName, suppliers.ContactTitle, suppliers.Phone, suppliers.Fax FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average lead time for all suppliers.",
        "output": "SELECT p.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageLeadTime FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees report to a specific manager?",
        "output": "SELECT e1.EmployeeID, e1.FirstName, e1.LastName FROM employees e1 JOIN employees e2 ON e1.EmployeeID = e2.ReportsTo",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have been ordered the most frequently?",
        "output": "SELECT [Order Details].ProductID, COUNT([Order Details].ProductID) AS OrderCount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders along with their respective shipping addresses.",
        "output": "SELECT o.OrderID, o.ShipAddress, o.ShipCity, o.ShipRegion, o.ShipPostalCode, o.ShipCountry FROM orders o;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of customers who made a purchase in 2021 returned to make a purchase in 2022?",
        "output": "SELECT (SELECT COUNT(DISTINCT o2022.CustomerID) FROM orders o2022 WHERE o2022.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT o2021.CustomerID) FROM orders o2021 WHERE o2021.OrderDate BETWEEN '2021-01-01' AND '2021-12-31') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the highest average unit price for its products?",
        "output": "SELECT p.CategoryID, AVG(p.UnitPrice) AS AvgUnitPrice FROM products p GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has the lowest average order fulfillment time?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY EmployeeID ORDER BY AverageFulfillmentTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 most frequently ordered products.",
        "output": "SELECT [Order Details].ProductID, products.ProductName, COUNT([Order Details].OrderID) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY [Order Details].ProductID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers along with their last order date.",
        "output": "SELECT customers.CustomerID, MAX(orders.OrderDate) AS last_order_date FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest number of units in stock?",
        "output": "SELECT ProductID, ProductName, UnitsInStock FROM products ORDER BY UnitsInStock DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product category generates the highest sales?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for orders shipped to 'New York' in October 2023?",
        "output": "SELECT AVG(Freight) AS AvgShippingCost FROM orders WHERE ShipCity = 'New York' AND DATE_FORMAT(OrderDate, '%Y-%m') = '2023-10'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer placed the earliest order?",
        "output": "SELECT customers.CustomerID, MIN(orders.OrderDate) AS EarliestOrderDate FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY EarliestOrderDate ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the details of products whose reorder level is less than 10 units?",
        "output": "SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products WHERE ReorderLevel < 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees along with the names of their managers.",
        "output": "SELECT e.EmployeeID, e.FirstName AS EmployeeFirstName, e.LastName AS EmployeeLastName, m.FirstName AS ManagerFirstName, m.LastName AS ManagerLastName FROM employees e LEFT JOIN employees m ON e.ReportsTo = m.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered the most frequently?",
        "output": "SELECT p.ProductName, COUNT(od.OrderID) as OrderFrequency FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY OrderFrequency DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have not placed any orders?",
        "output": "SELECT * FROM customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales for the year 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the highest number of orders in October 2023?",
        "output": "SELECT o.CustomerID, COUNT(*) AS OrderCount FROM orders o WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-10' GROUP BY o.CustomerID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping recipient (ShipName) has the highest freight cost?",
        "output": "SELECT ShipName, MAX(Freight) AS HighestFreight FROM orders GROUP BY ShipName ORDER BY HighestFreight DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a unit price greater than $20 and are still in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > 20 AND UnitsInStock > 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has processed the highest number of orders in a single day?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrdersInOneDay FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID HAVING COUNT(orders.OrderID) = (SELECT MAX(CountPerDay) FROM (SELECT COUNT(orders.OrderID) AS CountPerDay FROM orders GROUP BY DATE(orders.OrderDate), orders.EmployeeID) AS SubQuery);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products sold in each category last month?",
        "output": "SELECT p.CategoryID, SUM(od.Quantity) AS TotalQuantitySold FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATE_FORMAT(NOW() - INTERVAL 1 MONTH, '%Y-%m-01') AND o.OrderDate < DATE_FORMAT(NOW(), '%Y-%m-01') GROUP BY p.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the Inventory Turnover Ratio for the current month.",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH([Order Details].OrderDate) = MONTH(CURRENT_DATE) AND YEAR([Order Details].OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has generated the highest sales?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have sold the most units this month?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalUnitsSold FROM [Order Details] WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY ProductID ORDER BY TotalUnitsSold DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the performance metrics of products on a monthly basis?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductName, YEAR(orders.OrderDate), MONTH(orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide more than one product?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID HAVING COUNT(ProductID) > 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for each shipping company?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales in August 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice * (1 - [Order Details].Discount)) AS product_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31' GROUP BY products.ProductID ORDER BY product_sales DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for the past month?",
        "output": "SELECT (COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How much inventory is on order for each product?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed orders in the last 30 days?",
        "output": "SELECT DISTINCT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate >= DATEADD(DAY, -30, GETDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders placed in the last year?",
        "output": "SELECT COUNT(OrderID) as TotalOrders FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the total freight cost incurred in April 2023.",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-04';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by customer with ID 'CUST123'?",
        "output": "SELECT COUNT(*) AS OrderCount FROM orders WHERE CustomerID = 'CUST123';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost per order shipped via method '1' in July 2023?",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders WHERE ShipVia = 1 AND DATE_FORMAT(OrderDate, '%Y-%m') = '2023-07'",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 products with the highest sales volume.",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have a reorder level higher than their current stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the total number of orders sorted by customer region.",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products that have never been ordered.",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category generated the highest revenue in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryID ORDER BY total_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of products sold by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Quantity) AS TotalProducts FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 5 customers with the highest order quantities.",
        "output": "SELECT TOP 5 c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average reorder level for all products?",
        "output": "SELECT AVG(ReorderLevel) AS AverageReorderLevel FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average quantity of products ordered per order.",
        "output": "SELECT AVG(Quantity) AS AverageQuantityPerOrder FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the percentage contribution of each employee to the total sales?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM orders o2 JOIN [Order Details] od2 ON o2.OrderID = od2.OrderID) * 100 AS ContributionPercentage FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the highest number of orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipCity ORDER BY OrdersCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer generated the most revenue in Q2 2023?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY customers.CustomerID ORDER BY total_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the total sales per country for the year 2022.",
        "output": "SELECT customers.Country, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customers.Country",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find out the average unit price of products supplied by each supplier.",
        "output": "SELECT s.CompanyName, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the products that have never been ordered.",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late in the current month?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') AND ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the retention rate for the last quarter?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' THEN orders.CustomerID ELSE NULL END) / COUNT(DISTINCT CASE WHEN orders.OrderDate < '2023-07-01' THEN orders.CustomerID ELSE NULL END)) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top 5 performing products based on sales quantity.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the details of products that are currently out of stock?",
        "output": "SELECT * FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products with more than 50 units in stock?",
        "output": "SELECT p.ProductName, p.SupplierID FROM products p WHERE p.UnitsInStock > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees exceeded their sales targets in 2023?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID HAVING total_sales > 100000",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance of each product based on sales volume?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List orders that had a delayed shipment past the required date.",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by each customer in April 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS orders_placed FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30' GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have been delivered late in the last three months?",
        "output": "SELECT COUNT(*) FROM orders WHERE ShippedDate > RequiredDate AND DATE_FORMAT(OrderDate, '%Y-%m') >= DATE_FORMAT(CURDATE() - INTERVAL 3 MONTH, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales by country for the current year?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total freight cost incurred for each month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total amount of freight cost for each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) as TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order processing time for orders processed by each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_processing_time FROM orders GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is the most frequently used?",
        "output": "SELECT ShipVia, COUNT(*) AS ShippingCount FROM orders GROUP BY ShipVia ORDER BY ShippingCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the lowest average shipping cost per order?",
        "output": "SELECT shippers.ShipperID, AVG(orders.Freight) AS avg_shipping_cost FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID GROUP BY shippers.ShipperID ORDER BY avg_shipping_cost ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales revenue?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employees handled the most orders over the past quarter?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY EmployeeID ORDER BY OrderCount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has generated the most revenue?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were shipped within the required date?",
        "output": "SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each customer in the last year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by each customer in December 2022?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS OrderCount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2022-12-01' AND '2022-12-31' GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest average unit price in Q3 2023?",
        "output": "SELECT OD.ProductID, AVG(OD.UnitPrice) AS AverageUnitPrice FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') IN ('2023-07', '2023-08', '2023-09') GROUP BY OD.ProductID ORDER BY AverageUnitPrice DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which regions have the highest total sales?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average value of orders placed in the year 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for each country?",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY ShipCountry;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have a reorder level below their current stock level?",
        "output": "SELECT * FROM products WHERE UnitsInStock <= ReorderLevel",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many orders include products that are currently discontinued?",
        "output": "SELECT COUNT(DISTINCT Orders.OrderID) FROM [Order Details] JOIN Orders ON [Order Details].OrderID = Orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders shipped out of each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders) AS PercentageOfOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed in the year 2022?",
        "output": "SELECT COUNT(*) FROM orders WHERE YEAR(OrderDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the most revenue in September 2023?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN orders o ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-09' GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by customers from 'USA' in the last month?",
        "output": "SELECT COUNT(OrderID) AS orders_last_month FROM orders WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Country = 'USA') AND OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the most frequently ordered product.",
        "output": "SELECT p.ProductID, p.ProductName, COUNT(od.OrderID) AS OrderCount FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the distribution of orders by shipping method in 2023?",
        "output": "SELECT orders.ShipVia, COUNT(orders.OrderID) AS order_count FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipVia",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly revenue for each product over the past year.",
        "output": "SELECT products.ProductID, products.ProductName, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS MonthlyRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY products.ProductID, products.ProductName, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names of all discontinued products?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest order quantities?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalOrderQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the orders with the highest freight cost.",
        "output": "SELECT OrderID FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the product that generated the highest revenue.",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od GROUP BY od.ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders delivered on or before the required date for each month?",
        "output": "SELECT DATEPART(MONTH, OrderDate) AS Month, SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY DATEPART(MONTH, OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest reorder levels?",
        "output": "SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated by the products that are currently discontinued?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 1 GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped after the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN orders.ShippedDate > orders.RequiredDate THEN 1 END) AS LateOrders FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How long does it usually take to fulfill an order?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Average_Fulfillment_Time FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is used the most?",
        "output": "SELECT ShipVia, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees by the number of orders handled.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average unit price of all products.",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total discount given for each product.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Discount * od.Quantity) AS TotalDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many different products were sold in the last month?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS TotalProductsSold FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average value of orders placed in February 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average number of units ordered per product?",
        "output": "SELECT AVG(Quantity) AS AvgUnitsOrdered FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total quantity of products sold by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.Quantity) as TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue lost due to discontinued products?",
        "output": "SELECT SUM(UnitsInStock * UnitPrice) AS TotalRevenueLost FROM products WHERE Discontinued = 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders placed by each customer in 2022?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer received the highest total discount?",
        "output": "SELECT orders.CustomerID, SUM([Order Details].Discount) AS Total_Discount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID ORDER BY Total_Discount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest total sales in 2022?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost per employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the monthly sales growth rate for each product.",
        "output": "SELECT p.ProductID, p.ProductName, (SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(DATEADD(month, -1, CURRENT_TIMESTAMP)) THEN od.Quantity * od.UnitPrice ELSE 0 END) / SUM(CASE WHEN MONTH(od.OrderDate) = MONTH(CURRENT_TIMESTAMP) THEN od.Quantity * od.UnitPrice ELSE 1 END) - 1) * 100 AS MonthlyGrowthRate FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a unit price greater than $50?",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average discount applied on all orders.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have a birthday this month.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE MONTH(e.BirthDate) = MONTH(CURDATE());",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month in the last year?",
        "output": "SELECT EXTRACT(MONTH FROM orders.OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM orders.OrderDate)",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the most orders?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Who are the top 5 suppliers by the number of products supplied?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS ProductCount FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY ProductCount DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest total sales value?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many unique customers placed orders?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the number of orders shipped via each shipping method each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, ShipVia, COUNT(*) AS OrderCount FROM orders GROUP BY Month, ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees by the number of orders they handled, in descending order.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What was the total revenue for each year?",
        "output": "SELECT EXTRACT(YEAR FROM orders.OrderDate) AS OrderYear, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EXTRACT(YEAR FROM orders.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names of all products in the database?",
        "output": "SELECT ProductName FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products that have never been sold.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has made the highest sales in the last year?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products ordered from each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products contributed the most to the total sales revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest number of orders?",
        "output": "SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest discount rates applied?",
        "output": "SELECT products.ProductID, products.ProductName, MAX([Order Details].Discount) AS MaxDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY MaxDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the revenue contribution of each region in 2023?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY region.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for orders shipped via shipper ID 2?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost FROM orders WHERE orders.ShipVia = 2",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for orders placed in June 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue by each employee for each month in 2022?",
        "output": "SELECT employees.EmployeeID, MONTH(orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY employees.EmployeeID, order_month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List all orders shipped by each shipping method.",
        "output": "SELECT OrderID, ShipVia FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the reorder level for each product?",
        "output": "SELECT ProductName, ReorderLevel FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customers who have not placed any orders in the last year.",
        "output": "SELECT customers.* FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderID IS NULL OR orders.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the total sales for each quarter of 2022?",
        "output": "SELECT QUARTER(OrderDate) AS Quarter, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Quarter;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 3 employees with the highest number of orders processed.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products were sold in total by each supplier?",
        "output": "SELECT products.SupplierID, SUM([Order Details].Quantity) AS TotalProductsSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the most expensive order placed by any customer.",
        "output": "SELECT OrderID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalOrderValue FROM [Order Details] GROUP BY OrderID ORDER BY TotalOrderValue DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost per order?",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List all employees who have not placed any orders.",
        "output": "SELECT * FROM employees WHERE EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM orders)",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for all orders placed in December 2022?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-12-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly on-time delivery rate for the year 2022.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a quantity per unit greater than 10?",
        "output": "Corrected: SELECT ProductName FROM products WHERE CAST(REGEXP_SUBSTR(QuantityPerUnit, '\\d+') AS INT) > 10;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many distinct customers placed orders in 2023 compared to 2022?",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') AS customer_count_2023, (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') AS customer_count_2022",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 5 products with the highest total sales revenue in 2022?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalSales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2022 GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales generated by each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped after the required date in November 2023?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND DATE_FORMAT(OrderDate, '%Y-%m') = '2023-11'",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not reached their reorder level yet?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given for each order?",
        "output": "SELECT OrderID, SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique customers placed orders?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on-time in 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not been reordered even once?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsOnOrder = 0 AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products per supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the product performance based on the total quantity sold monthly?",
        "output": "SELECT products.ProductID, DATE_FORMAT(Orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN Orders ON [Order Details].OrderID = Orders.OrderID GROUP BY products.ProductID, Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for the last month?",
        "output": "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders WHERE MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE)) AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate AND MONTH(OrderDate) = MONTH(CURRENT_DATE) AND YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales generated by each supplier?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the highest number of orders shipped to in the last year?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY ShipCity ORDER BY OrderCount DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee with the highest aggregate sales.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the least ordered product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped by each shipper?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfShipments FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which cities have the highest number of shipped orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE ShippedDate IS NOT NULL GROUP BY ShipCity ORDER BY OrderCount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the lead time for each supplier in the month of November 2022?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN products ON orders.OrderID = products.ProductID WHERE orders.OrderDate BETWEEN '2022-11-01' AND '2022-11-30' GROUP BY products.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sales per employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products need to be reordered soon based on their current stock levels?",
        "output": "SELECT products.ProductID, products.ProductName, products.UnitsInStock FROM products WHERE products.UnitsInStock <= products.ReorderLevel",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the earliest hire date.",
        "output": "SELECT * FROM employees ORDER BY HireDate ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the discontinued products.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity per unit for each category?",
        "output": "SELECT categories.CategoryID, AVG(CAST(REGEXP_REPLACE(products.QuantityPerUnit, '[^0-9]', '', 'g') AS DECIMAL)) AS AvgQuantityPerUnit FROM categories JOIN products ON categories.CategoryID = products.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the performance of each product based on monthly sales?",
        "output": "SELECT products.ProductID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS MonthlySales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.ProductID, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the maximum and minimum salary among all employees?",
        "output": "SELECT MAX(Salary) AS MaxSalary, MIN(Salary) AS MinSalary FROM employees;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify which customer placed the largest single order by amount.",
        "output": "SELECT o.CustomerID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderAmount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID, o.OrderID ORDER BY OrderAmount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled on or before the required date in Q3 2022?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_orders FROM orders WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2022-07-01' AND '2022-09-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total number of orders that were shipped late for each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average supplier lead time for January 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY products.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for the top-selling product in 2023?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.ProductID = (SELECT od.ProductID FROM [Order Details] od GROUP BY od.ProductID ORDER BY SUM(od.Quantity) DESC LIMIT 1)",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped late?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders have the largest freight cost discrepancy between the expected and actual costs?",
        "output": "SELECT OrderID, (Freight - expected_freight_cost) AS FreightDiscrepancy FROM orders WHERE Freight IS NOT NULL AND expected_freight_cost IS NOT NULL ORDER BY FreightDiscrepancy DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders per shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total units on order for each product?",
        "output": "SELECT products.ProductID, SUM(products.UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY products.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee is responsible for most orders?",
        "output": "SELECT EmployeeID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have no units on order but are below reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder = 0 AND UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the lead time for each supplier based on order data in 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed more than 5 orders?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS total_orders FROM customers INNER JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID HAVING COUNT(orders.OrderID) > 5",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales during the first quarter of 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost per region?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many unique customers placed orders in the past year?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS unique_customers FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total number of orders placed each month.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, COUNT(o.OrderID) AS TotalOrders FROM orders o GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the highest average freight cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia ORDER BY AverageFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the names and contact details of suppliers from the USA?",
        "output": "SELECT CompanyName, ContactName, ContactTitle, Phone, Fax FROM suppliers WHERE Country = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost incurred by each employee's orders?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many products were ordered with a discount greater than 20%?",
        "output": "SELECT COUNT(*) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0.2;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is used the most often?",
        "output": "SELECT ShipVia, COUNT(OrderID) as TotalOrders FROM orders GROUP BY ShipVia ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average order fulfillment time for each shipping method.",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgOrderFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many discontinued products does each supplier have?",
        "output": "SELECT s.CompanyName, COUNT(*) AS DiscontinuedProducts FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued = 1 GROUP BY s.CompanyName",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which city has the highest number of employees?",
        "output": "SELECT City, COUNT(EmployeeID) AS TotalEmployees FROM employees GROUP BY City ORDER BY TotalEmployees DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is most frequently used?",
        "output": "SELECT o.ShipVia, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipVia ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products with an average unit price above a specific threshold?",
        "output": "SELECT SupplierID, ProductName, UnitPrice FROM products WHERE UnitPrice > ? ORDER BY UnitPrice DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the products that have not been ordered in the last six months.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p WHERE p.ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH))",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is used most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost associated with orders handled by each employee?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreightCost FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who report to a specific manager.",
        "output": "SELECT e1.*, e2.FirstName || ' ' || e2.LastName AS ManagerName FROM employees e1 JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID WHERE e1.ReportsTo = ?;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders placed by each customer?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have not been discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product categories generate the most revenue?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which orders had a delivery time greater than the average lead time?",
        "output": "SELECT orders.OrderID, orders.OrderDate, orders.ShippedDate FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATEDIFF(orders.ShippedDate, orders.OrderDate) > (SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) FROM orders);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders include a discount greater than 10%?",
        "output": "SELECT COUNT(OrderID) AS DiscountedOrders FROM [Order Details] WHERE Discount > 0.10",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill orders for each shipping method?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders that were delivered on time?",
        "output": "SELECT (COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders)) AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer had the highest total sales revenue in 2022?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2022 GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the total sales generated by employee ID 3 for the year 2022.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.EmployeeID = 3 AND orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in a specific region?",
        "output": "SELECT e.EmployeeID, o.ShipRegion, COUNT(o.OrderID) as OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.ShipRegion;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Retention Rate for the last month.",
        "output": "WITH DistinctCustomers AS (SELECT COUNT(DISTINCT o.CustomerID) AS TotalCustomers FROM orders o WHERE o.OrderDate BETWEEN CURRENT_DATE - INTERVAL '1 month' AND CURRENT_DATE) SELECT (DistinctCustomers.TotalCustomers::NUMERIC / (SELECT COUNT(DISTINCT o.CustomerID) FROM orders o WHERE o.OrderDate < CURRENT_DATE - INTERVAL '1 month'))*100 AS RetentionRate FROM DistinctCustomers;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top 5 employees with the highest sales in the last year.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE('now', '-1 year') GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated by each employee in 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed in each month of 2022?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrdersCount FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY Month ORDER BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a stock level below the reorder level and units on order?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue generated from orders managed by the employees?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the month with the highest number of orders.",
        "output": "SELECT MONTH(OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY MONTH(OrderDate) ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total quantity ordered for each product by each supplier.",
        "output": "SELECT p.SupplierID, s.SupplierName, p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY p.SupplierID, s.SupplierName, p.ProductID, p.ProductName ORDER BY p.SupplierID, p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customers with orders that have never been shipped.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.ShippedDate IS NULL AND o.OrderID IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the suppliers with the largest number of products in stock.",
        "output": "SELECT suppliers.SupplierID, CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID, CompanyName ORDER BY TotalUnitsInStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the highest freight cost recorded for any order?",
        "output": "SELECT MAX(Freight) AS HighestFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have placed orders that required delivery by a specific date in 2023?",
        "output": "SELECT e.EmployeeID, o.OrderID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.RequiredDate BETWEEN '2023-01-01' AND '2023-12-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the orders that were shipped late.",
        "output": "SELECT * FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue generated by each employee per month?",
        "output": "SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the suppliers who delivered orders within 7 days on average.",
        "output": "SELECT p.SupplierID, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID GROUP BY p.SupplierID, s.CompanyName HAVING AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) <= 7;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the average discount applied to all products.",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM customers INNER JOIN orders ON customers.CustomerID = orders.CustomerID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the shipping method used most frequently.",
        "output": "SELECT ShipVia, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipVia ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average number of products in stock for each product category?",
        "output": "SELECT categories.CategoryID, categories.CategoryName, AVG(products.UnitsInStock) AS avg_units_in_stock FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 customers with the highest total orders.",
        "output": "SELECT c.CustomerID, c.CompanyName, COUNT(o.OrderID) as total_orders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID ORDER BY total_orders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value for each employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees are managing the highest number of territories?",
        "output": "SELECT managers.EmployeeID, managers.LastName, managers.FirstName, COUNT(employeeTerritories.TerritoryID) AS managed_territories FROM employees AS managers JOIN employeeTerritories ON managers.EmployeeID = employeeTerritories.EmployeeID WHERE managers.EmployeeID IN (SELECT employees.ReportsTo FROM employees) GROUP BY managers.EmployeeID ORDER BY managed_territories DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the shortest average lead times?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY avg_lead_time ASC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 5 products by revenue.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 10 products based on total sales revenue?",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 10",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee managed the highest number of orders with a discount applied?",
        "output": "SELECT e.EmployeeID, COUNT(od.OrderID) as DiscountedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [ORDER DETAILS] od ON o.OrderID = od.OrderID WHERE od.Discount > 0 GROUP BY e.EmployeeID ORDER BY COUNT(od.OrderID) DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many distinct customers placed orders in the first quarter of 2022?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS DistinctCustomers FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-03-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average unit price of products ordered last week?",
        "output": "SELECT AVG(UnitPrice) AS AverageUnitPrice FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for orders shipped by 'Speedy Express'?",
        "output": "SELECT COUNT(orders.OrderID) * 100.0 / (SELECT COUNT(*) FROM orders WHERE orders.ShipVia = (SELECT ShipperID FROM shippers WHERE CompanyName = 'Speedy Express')) AS on_time_delivery_rate FROM orders WHERE orders.ShipVia = (SELECT ShipperID FROM shippers WHERE CompanyName = 'Speedy Express') AND orders.ShippedDate <= orders.RequiredDate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which day of the week has the highest number of orders placed?",
        "output": "SELECT DAYNAME(OrderDate) AS DayOfWeek, COUNT(*) AS NumberOfOrders FROM orders GROUP BY DayOfWeek ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the performance of each product in terms of quantity sold in March 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total value of products currently in stock?",
        "output": "SELECT ProductID, ProductName, UnitsInStock * UnitPrice AS StockValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the percentage contribution of each employee to the total sales.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / (SELECT SUM(od2.UnitPrice * od2.Quantity * (1 - od2.Discount)) FROM [Order Details] od2 JOIN orders o2 ON od2.OrderID = o2.OrderID) * 100 AS PercentageContribution FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for orders shipped in the last 6 months?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of orders by shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS orders_count FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which countries do the employees ship the most to?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.ShipCountry) AS CountryCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY CountryCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers have placed the most orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average product rating?",
        "output": "SELECT s.CompanyName FROM suppliers s ORDER BY (SELECT AVG(r.Rating) FROM reviews r JOIN products p ON r.ProductID = p.ProductID WHERE p.SupplierID = s.SupplierID) DESC LIMIT 1",
        "difficulty": "hard"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the total sales revenue for each supplier.",
        "output": "SELECT products.SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) as TotalSalesRevenue FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average price of products from each supplier?",
        "output": "SELECT suppliers.SupplierName, AVG(products.UnitPrice) AS AverageProductPrice FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost by shipping country?",
        "output": "SELECT ShipCountry, SUM(Freight) as TotalFreight FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 3 suppliers based on the total value of products supplied.",
        "output": "SELECT suppliers.SupplierName, SUM(products.UnitPrice * products.UnitsInStock) AS TotalValueSupplied FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierName ORDER BY TotalValueSupplied DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average shipping time per region.",
        "output": "SELECT ShipRegion, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the Inventory Turnover Ratio for each month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS OrderMonth, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders have been placed by each customer in total?",
        "output": "SELECT orders.CustomerID, COUNT(orders.OrderID) AS Total_Orders FROM orders GROUP BY orders.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the highest sales?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total number of suppliers in each city.",
        "output": "SELECT City, COUNT(SupplierID) FROM suppliers GROUP BY City;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top 5 shipping methods used in last year?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ShipVia ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products with the highest quantity per unit.",
        "output": "SELECT ProductName, QuantityPerUnit FROM products ORDER BY QuantityPerUnit DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each customer per month?",
        "output": "SELECT CustomerID, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS NumberOfOrders FROM orders GROUP BY CustomerID, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired each year?",
        "output": "SELECT YEAR(HireDate) AS HireYear, COUNT(EmployeeID) AS HireCount FROM employees GROUP BY YEAR(HireDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product categories are most ordered?",
        "output": "SELECT CategoryID, COUNT(OrderID) AS OrderCount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY CategoryID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products by total quantity sold.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee's sales have the highest total revenue this month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_TRUNC('month', CURRENT_DATE) GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the Customer Lifetime Value (CLV) for each customer.",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales for the company?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the Customer Retention Rate for the last year.",
        "output": "SELECT (COUNT(DISTINCT o.CustomerID) WHERE o.OrderDate BETWEEN DATEADD(year, -1, GETDATE()) AND GETDATE()) / (COUNT(DISTINCT o.CustomerID) WHERE o.OrderDate < DATEADD(year, -1, GETDATE())) AS CustomerRetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products have generated the highest total sales?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS ProductSales FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY ProductSales DESC LIMIT 10",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a stock level below their reorder level?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify customers with the highest total order value this year.",
        "output": "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY CustomerID ORDER BY TotalOrderValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have stock levels below their reorder level?",
        "output": "SELECT p.ProductName, p.UnitsInStock FROM products p WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the lowest unit price?",
        "output": "SELECT ProductID, ProductName, UnitPrice FROM products ORDER BY UnitPrice ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique customers placed orders in the past year?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given for each product category last year?",
        "output": "SELECT p.CategoryID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the average order fulfillment times for each shipping company in 2023?",
        "output": "SELECT shippers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of orders shipped by each shipper in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS total_orders FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given on orders?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details]",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the customers who have not placed an order in the last year.",
        "output": "SELECT customers.CustomerID, customers.CompanyName FROM customers WHERE customers.CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR))",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which are the discontinued products with the highest stock levels?",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1 ORDER BY UnitsInStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have the highest sales performance in March 2022?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2022-03-01' AND '2022-03-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products ordered by month?",
        "output": "SELECT DATE_FORMAT([Order Details].OrderDate, '%Y-%m') AS Month, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated by the top 5 employees in January 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY employees.EmployeeID ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given per product category?",
        "output": "SELECT categories.CategoryName, AVG([Order Details].Discount) AS AvgDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the number of orders and total sales for each month in the year 2023?",
        "output": "SELECT MONTH(orders.OrderDate) AS order_month, YEAR(orders.OrderDate) AS order_year, COUNT(orders.OrderID) AS total_orders, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY YEAR(orders.OrderDate), MONTH(orders.OrderDate)",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has made the highest sales in the month of January 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2023 GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the number of orders placed in each month.",
        "output": "SELECT MONTH(OrderDate) AS Month, COUNT(*) AS OrderCount FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have been placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) as TotalOrders FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by new customers this month?",
        "output": "SELECT COUNT(OrderID) AS NewCustomerOrders FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 MONTH AND CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate < CURDATE() - INTERVAL 1 MONTH)",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest discount applied in the last six months?",
        "output": "SELECT [Order Details].ProductID, MAX([Order Details].Discount) AS MaxDiscount FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)) GROUP BY [Order Details].ProductID ORDER BY MaxDiscount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the product performance measurement per month?",
        "output": "SELECT DATE_TRUNC('month', od.OrderDate) AS Month, p.ProductID, SUM(od.Quantity) AS ProductPerformance FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY Month, p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 5 products by sales volume?",
        "output": "SELECT ProductID, SUM(Quantity) as TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the names of products supplied by each supplier.",
        "output": "SELECT SupplierID, ProductName FROM products ORDER BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the average freight cost per order.",
        "output": "SELECT AVG(o.Freight) AS AvgFreight FROM orders o;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the most recent hire date among the employees.",
        "output": "SELECT MAX(HireDate) AS MostRecentHireDate FROM employees;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product has the highest unit price?",
        "output": "SELECT ProductID, ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Generate a report showing the monthly Product Performance for each product.",
        "output": "SELECT products.ProductName, MONTH([Order Details].OrderDate) AS OrderMonth, SUM([Order Details].Quantity) AS TotalSold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName, OrderMonth ORDER BY TotalSold DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the name and contact details of suppliers from Germany.",
        "output": "SELECT CompanyName, ContactName, ContactTitle, Phone FROM suppliers WHERE Country = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales generated by each employee in Q1 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which orders were shipped by a specific shipping method?",
        "output": "SELECT * FROM orders WHERE ShipVia = ?;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the Inventory Turnover Ratio for each product?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the highest average order value.",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrdersHandled FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of products in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have stock levels below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers have placed an order?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders has each employee processed in the month of January 2023?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrdersInJan FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month in 2022 had the highest total sales revenue?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2022 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order processing time (i.e., the duration between order date and shipped date)?",
        "output": "SELECT AVG(julianday(ShippedDate) - julianday(OrderDate)) AS AverageProcessingTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has processed the most orders?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the employee with the fastest average shipping time.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY AvgShippingTime ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for product ID 5 in February 2022?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.ProductID = 5 AND orders.OrderDate BETWEEN '2022-02-01' AND '2022-02-28'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the products with the highest reorder levels?",
        "output": "SELECT SupplierID, ProductName FROM products WHERE ReorderLevel = (SELECT MAX(ReorderLevel) FROM products);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have units in stock greater than 100?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units sold for each month of 2023?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity) AS TotalUnitsSold FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATE_FORMAT(OrderDate, '%Y') = '2023' GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the month-wise sales trend over the last year.",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were required but not shipped by the required date last month?",
        "output": "SELECT COUNT(OrderID) AS UnshippedOrders FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 MONTH AND (ShippedDate > RequiredDate OR ShippedDate IS NULL);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated per region in 2023?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY region.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that are currently out of stock?",
        "output": "SELECT s.SupplierID, p.ProductName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which order had the highest freight cost?",
        "output": "SELECT OrderID, Freight AS HighestFreightCost FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many days on average does it take for an order to be shipped after it is placed?",
        "output": "SELECT ROUND(AVG(DATE_PART('day', ShippedDate - OrderDate)), 2) AS AvgShippingTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the customer with the highest average order value.",
        "output": "SELECT c.CustomerID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY AverageOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the longest tenure in the company?",
        "output": "SELECT employees.EmployeeID, employees.LastName, employees.FirstName, DATEDIFF(CURDATE(), employees.HireDate) AS Tenure FROM employees ORDER BY Tenure DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average shipping cost for orders shipped within and outside 'Region' 'NA'.",
        "output": "SELECT AVG(Freight) AS AverageShippingCost FROM orders WHERE ShipRegion = 'NA' UNION ALL SELECT AVG(Freight) AS AverageShippingCost FROM orders WHERE ShipRegion != 'NA';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders shipped via method '3' against the total orders in 2023?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE ShipVia = 3) / COUNT(OrderID)) * 100 AS Method3Percentage FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = '2023'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given per product?",
        "output": "SELECT ProductID, AVG(Discount) as average_discount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 products by total revenue?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalRevenue FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest inventory turnover ratio?",
        "output": "SELECT products.ProductName, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock)) AS InventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY InventoryTurnoverRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who directly report to a specific manager.",
        "output": "SELECT EmployeeID, COUNT(EmployeeID) AS ReporteesCount FROM employees WHERE ReportsTo = ? GROUP BY ReportsTo;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 most ordered products?",
        "output": "SELECT TOP 5 ProductID, SUM(Quantity) AS TotalUnitsOrdered FROM [Order Details] GROUP BY ProductID ORDER BY TotalUnitsOrdered DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which product has the highest total revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed and shipped within the same month?",
        "output": "SELECT COUNT(*) AS OrdersInSameMonth FROM orders WHERE DATE_PART('month', OrderDate) = DATE_PART('month', ShippedDate) AND DATE_PART('year', OrderDate) = DATE_PART('year', ShippedDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales for each category in the year 2023?",
        "output": "SELECT categories.CategoryID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products are currently out of stock?",
        "output": "SELECT COUNT(*) AS OutOfStockProducts FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders have not been shipped yet?",
        "output": "SELECT * FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city received the highest number of shipments in July 2023?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated from a specific product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.ProductName = 'SpecificProductName' GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all discontinued products and their remaining units in stock.",
        "output": "SELECT p.ProductName, p.UnitsInStock FROM products p WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a reorder level greater than 50?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > 50",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "For each month in 2023, what was the total number of orders and their corresponding total freight cost?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS TotalOrders, SUM(Freight) AS TotalFreightCost FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How does the on-time delivery rate compare between different shipping methods?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS on_time_rate FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the total freight cost for each shipping method.",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the suppliers of products with stock below the reorder level.",
        "output": "SELECT s.SupplierID, s.SupplierName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 10 products by total sales revenue.",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales for orders shipped via different shipping methods for each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, o.ShipVia, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, o.ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped on time this year?",
        "output": "SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = YEAR(CURDATE())",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product category has generated the highest revenue?",
        "output": "SELECT c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products do we have in stock per supplier?",
        "output": "SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products that need to be reordered.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the number of products that are both below reorder level and have units on order.",
        "output": "SELECT COUNT(ProductID) AS ProductsCount FROM products WHERE UnitsInStock < ReorderLevel AND UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 3 categories by total sales value.",
        "output": "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryName ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the month-over-month growth in sales revenue?",
        "output": "SELECT DATE_TRUNC('month', orders.order_date) AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS MonthlyRevenue, LAG(SUM([Order Details].Quantity * [Order Details].UnitPrice)) OVER (ORDER BY DATE_TRUNC('month', orders.order_date)) AS PreviousMonthRevenue, (SUM([Order Details].Quantity * [Order Details].UnitPrice) - LAG(SUM([Order Details].Quantity * [Order Details].UnitPrice)) OVER (ORDER BY DATE_TRUNC('month', orders.order_date))) / LAG(SUM([Order Details].Quantity * [Order Details].UnitPrice)) OVER (ORDER BY DATE_TRUNC('month', orders.order_date)) * 100 AS MonthOverMonthGrowth FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY DATE_TRUNC('month', orders.order_date);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average shipping times per shipping company.",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the orders that had a fulfillment time of more than 30 days in 2022.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime FROM orders WHERE YEAR(OrderDate) = 2022 AND DATEDIFF(ShippedDate, OrderDate) > 30;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to products in order details?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which customers have placed the most orders in the last quarter?",
        "output": "SELECT orders.CustomerID, COUNT(*) AS TotalOrders FROM orders WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY orders.CustomerID ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for each customer?",
        "output": "SELECT c.CustomerID, SUM(o.Freight) AS TotalFreight FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped to 'USA' in June 2023?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipCountry = 'USA' AND DATE_FORMAT(OrderDate, '%Y-%m') = '2023-06'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average number of orders per month handled by employees?",
        "output": "SELECT employees.EmployeeID, AVG(OrderCount) AS AverageOrdersPerMonth FROM (SELECT employees.EmployeeID, COUNT(orders.OrderID) / 12 AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID) AS MonthlyOrders;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate from 2022 to 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed in January 2023?",
        "output": "SELECT COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for the month of July 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the difference in sales between the top-performing and least-performing employees?",
        "output": "WITH sales AS ( SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID) SELECT (SELECT TotalSales FROM sales ORDER BY TotalSales DESC LIMIT 1) - (SELECT TotalSales FROM sales ORDER BY TotalSales ASC LIMIT 1) AS SalesDifference;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of products ordered in the current year?",
        "output": "SELECT SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique products were ordered in the first half of this year?",
        "output": "SELECT COUNT(DISTINCT [Order Details].ProductID) AS UniqueProducts FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders delivered on or before the required date per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have never been ordered?",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders delivered on or before the required date for the month of February 2023?",
        "output": "SELECT (COUNT(OrderID) FILTER(WHERE ShippedDate <= RequiredDate) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-02'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List orders placed in a specific month.",
        "output": "SELECT * FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = ?;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the highest freight cost incurred for any order?",
        "output": "SELECT MAX(Freight) AS highest_freight_cost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total freight cost for each shipping method.",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreight FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have not been ordered at all?",
        "output": "SELECT products.ProductID, products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given on the products per order?",
        "output": "SELECT orders.OrderID, AVG([Order Details].Discount) AS AvgDiscount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the regions where there are more than 10 suppliers.",
        "output": "SELECT Region, COUNT(*) AS SupplierCount FROM suppliers GROUP BY Region HAVING COUNT(*) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to product orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees handled shipments in the month of January 2023?",
        "output": "SELECT DISTINCT EmployeeID FROM orders WHERE DATE_FORMAT(ShippedDate, '%Y-%m') = '2023-01';",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders placed per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many active suppliers are there in the database?",
        "output": "SELECT COUNT(DISTINCT suppliers.SupplierID) AS active_supplier_count FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 0",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill an order in 2022?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales for each month.",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How much inventory value is currently in stock?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total freight cost incurred by each customer.",
        "output": "SELECT c.CustomerID, SUM(o.Freight) AS TotalFreightCost FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio on a monthly basis?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month ORDER BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly inventory turnover ratio for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for each product?",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales for each employee for the year 2022?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022 GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest total freight cost?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM(Freight) AS total_freight_cost FROM orders GROUP BY month ORDER BY total_freight_cost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount given on orders in 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders in February 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue from products in each category?",
        "output": "SELECT c.CategoryName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Count the number of orders placed by each customer in a given time period.",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS NumberOfOrders FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate BETWEEN 'YYYY-MM-DD' AND 'YYYY-MM-DD' GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products are frequently ordered together?",
        "output": "SELECT od1.ProductID AS ProductA, od2.ProductID AS ProductB, COUNT(*) AS Frequency FROM [Order Details] od1 JOIN [Order Details] od2 ON od1.OrderID = od2.OrderID AND od1.ProductID < od2.ProductID GROUP BY od1.ProductID, od2.ProductID ORDER BY Frequency DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been placed for each product?",
        "output": "SELECT products.ProductID, COUNT([Order Details].OrderID) AS OrderCount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity ordered for each product?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average fulfillment time for each month in the current year.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average number of units per order for each product?",
        "output": "SELECT products.ProductName, AVG([Order Details].Quantity) AS AverageUnitsPerOrder FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders include a discount?",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN Discount > 0 THEN OrderID END) / COUNT(DISTINCT OrderID)) * 100 AS DiscountPercentage FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for the year 2023?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2023-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region had the highest average freight cost per order in the year 2023?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgFreightCost FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = '2023' GROUP BY ShipRegion ORDER BY AvgFreightCost DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the monthly inventory turnover ratio for the last 6 months.",
        "output": "SELECT DATE_FORMAT(Orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN Orders ON [Order Details].OrderID = Orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE Orders.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to ship orders by each employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgShippingTime FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the highest average shipping cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipVia ORDER BY AverageShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the on-time delivery rate for orders in 2023?",
        "output": "SELECT COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total discount given by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].Discount) AS TotalDiscount FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products need to be reordered?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to each order?",
        "output": "SELECT AVG(Discount) AS AvgDiscountPerOrder FROM [Order Details]",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the shortest time taken to fulfill an order, and which order was it?",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS ShortestFulfillmentTime FROM orders ORDER BY ShortestFulfillmentTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for 2022?",
        "output": "SELECT (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2022-01-01') AS customer_retention_rate",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer has generated the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average fulfillment time for orders over the last three months?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find products that have a lower units in stock than the reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped by each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the total number of shipped orders by each employee for the current year.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS num_orders FROM orders WHERE YEAR(ShippedDate) = YEAR(CURDATE()) GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total revenue generated from orders of a specific product (by ProductID).",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] WHERE ProductID = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given on all orders?",
        "output": "SELECT SUM(Quantity * UnitPrice * Discount) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the maximum reorder level.",
        "output": "SELECT ProductName FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated per customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders that received a discount?",
        "output": "SELECT COUNT(DISTINCT [Order Details].OrderID) * 100.0 / COUNT(DISTINCT orders.OrderID) AS DiscountRate FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on or before the required date?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 1.0 / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the cumulative sales revenue for the year?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS YearlySales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE())",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the Inventory Turnover Ratio for each product.",
        "output": "SELECT p.ProductID, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the highest number of orders shipped late.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS LateOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY LateOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most common product category ordered in 2023?",
        "output": "SELECT categories.CategoryName, COUNT([Order Details].OrderID) AS order_count FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY order_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCountry",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders had a shipping cost over $100?",
        "output": "SELECT COUNT(*) AS HighShippingCostOrders FROM orders WHERE Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales value for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were shipped to each country?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS TotalShippedOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount provided for each product?",
        "output": "SELECT ProductID, SUM(Quantity * UnitPrice * Discount) as TotalDiscount FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify customers who have placed more than 5 orders in a month during 2021.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2021 GROUP BY CustomerID, MONTH(OrderDate) HAVING COUNT(OrderID) > 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the delay in days for deliveries did not meet the required date?",
        "output": "SELECT OrderID, DATEDIFF(RequiredDate, ShippedDate) AS delivery_delay FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have the most products?",
        "output": "SELECT categories.CategoryID, COUNT(products.ProductID) AS NumberOfProducts FROM categories JOIN products ON categories.CategoryID = products.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the customer retention rate for the year 2020?",
        "output": "SELECT (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE OrderDate BETWEEN '2020-01-01' AND '2020-12-31')) * 100.0 / (COUNT(DISTINCT orders.CustomerID) FILTER (WHERE OrderDate < '2020-01-01')) AS RetentionRate FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total quantity of products ordered for each discount level.",
        "output": "SELECT Discount, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY Discount;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average revenue per order.",
        "output": "SELECT AVG(SUM(Quantity * UnitPrice)) AS AverageRevenue FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average number of products per order?",
        "output": "SELECT AVG(od.Quantity) AS AvgProductsPerOrder FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped late in the last year?",
        "output": "SELECT COUNT(OrderID) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND YEAR(ShippedDate) = YEAR(CURDATE()) - 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Get the city-wise distribution of suppliers.",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the customers who have not placed an order in the last 6 months.",
        "output": "SELECT c.CustomerID, c.CompanyName FROM customers c WHERE c.CustomerID NOT IN (SELECT o.CustomerID FROM orders o WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time in 2022?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average number of orders handled by employees per month?",
        "output": "SELECT EmployeeID, AVG(OrderCount) as AvgMonthlyOrders FROM (SELECT EmployeeID, COUNT(*) as OrderCount, strftime('%Y-%m', OrderDate) as OrderMonth FROM orders GROUP BY EmployeeID, OrderMonth) GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many units of each product were sold in March 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many units of each product were sold in January 2022?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_units_sold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top 5 employees in terms of sales generated.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average number of orders placed by returning customers?",
        "output": "SELECT AVG(OrderCount) AS AverageOrders FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 1) AS ReturningCustomers",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer lifetime value for each customer?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Get the total revenue generated grouped by region.",
        "output": "SELECT c.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill orders in 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total quantity of products ordered per month.",
        "output": "SELECT YEAR(orders.OrderDate) AS Year, MONTH(orders.OrderDate) AS Month, SUM([Order Details].Quantity) AS TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY YEAR(orders.OrderDate), MONTH(orders.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many different products are being sold by each supplier?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for the month of July 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE MONTH(orders.OrderDate) = 7 AND YEAR(orders.OrderDate) = 2023",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 products by total sales revenue.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest inventory levels?",
        "output": "SELECT products.ProductID, products.UnitsInStock FROM products ORDER BY products.UnitsInStock DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used the most in Q1 of 2023?",
        "output": "SELECT ShipVia, COUNT(*) AS NumberOfShipments FROM orders WHERE QUARTER(OrderDate) = 1 AND YEAR(OrderDate) = 2023 GROUP BY ShipVia ORDER BY NumberOfShipments DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for all orders placed in the last year?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE orders.OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who is the top customer by lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Get the details of suppliers who have provided products with the highest discount.",
        "output": "SELECT DISTINCT s.SupplierID, s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount = (SELECT MAX(Discount) FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the total freight cost incurred last month?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(NOW() - INTERVAL 1 MONTH, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in June 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-06-01' AND '2023-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the Customer Lifetime Value (CLV) for each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products from each supplier?",
        "output": "SELECT s.CompanyName, AVG(p.UnitPrice) AS AveragePrice FROM products p INNER JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have a reorder level above 30?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > 30;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated from orders in the last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide more than 5 different products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID HAVING COUNT(ProductID) > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total sales revenue for orders shipped late.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS LateOrderSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and quantities of all products supplied by SupplierID 3?",
        "output": "SELECT ProductName, QuantityPerUnit FROM products WHERE SupplierID = 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most popular product in terms of quantity sold?",
        "output": "SELECT ProductID, SUM(Quantity) as TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employees have fulfilled the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with the lowest product performance (total quantity sold).",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalQuantity ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest sales volume?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY TotalSales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated in each region?",
        "output": "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID JOIN employees ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the top 10 most popular products based on quantity ordered.",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers who have supplied more than 1000 units of any product.",
        "output": "SELECT s.CompanyName, SUM(p.UnitsInStock + p.UnitsOnOrder) AS TotalUnits FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID HAVING TotalUnits > 1000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products for each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the Inventory Turnover Ratio for the last quarter?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE();",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the names of discontinued products.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the names and contact information of all suppliers in the 'California' region.",
        "output": "SELECT CompanyName, ContactName, Phone, Fax FROM suppliers WHERE Region = 'California';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find all orders placed by a particular customer identified by CustomerID 'VINET'.",
        "output": "SELECT * FROM orders WHERE CustomerID = 'VINET';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has handled the highest number of orders in the past quarter?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS HandledOrders FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 QUARTER) GROUP BY EmployeeID ORDER BY HandledOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for orders shipped last month?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE DATE_PART('month', ShippedDate) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month');",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales by all employees in the year 2022?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS YearlySales FROM orders o INNER JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2022",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers delivered products with an average lead time of less than a week?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID HAVING AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) < 7",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the employee sales performance by region?",
        "output": "SELECT region.RegionDescription, employees.EmployeeID, employees.FirstName, employees.LastName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID JOIN region ON territories.RegionID = region.RegionID GROUP BY region.RegionDescription, employees.EmployeeID ORDER BY employee_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales for the month of January 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 1 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees have processed the most orders?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average discount given across all orders.",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total freight cost for orders shipped to France.",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE ShipCountry = 'France';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of product are on order but not yet received?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which country has the highest number of orders?",
        "output": "SELECT ShipCountry, COUNT(*) AS NumberOfOrders FROM orders GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average time between order date and shipped date.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between the order date and the required date?",
        "output": "SELECT AVG(DATEDIFF(day, OrderDate, RequiredDate)) AS AvgDaysToRequiredDate FROM orders",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee has processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS order_count FROM orders GROUP BY EmployeeID ORDER BY order_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest number of orders with discounts?",
        "output": "SELECT employees.EmployeeID, COUNT(*) AS DiscountedOrdersCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0 GROUP BY employees.EmployeeID ORDER BY DiscountedOrdersCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate Customer Retention Rate for the last year.",
        "output": "SELECT (COUNT(DISTINCT CASE WHEN o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' THEN o.CustomerID END) / COUNT(DISTINCT CASE WHEN o.OrderDate < '2022-01-01' THEN o.CustomerID END)) AS RetentionRate FROM orders o;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales revenue for each product category?",
        "output": "SELECT c.CategoryID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount on orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which day of the week has the highest average shipping cost?",
        "output": "SELECT DAYNAME(OrderDate) AS day_of_week, AVG(Freight) AS avg_shipping_cost FROM orders GROUP BY day_of_week ORDER BY avg_shipping_cost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order discount?",
        "output": "SELECT AVG(od.Discount) AS AvgDiscount FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products in each category?",
        "output": "SELECT c.CategoryID, c.CategoryName, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID, c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest unit price?",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders included a discount of more than 0.1?",
        "output": "SELECT COUNT(OrderID) AS discounted_orders FROM [Order Details] WHERE Discount > 0.1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average quantity per order for each product.",
        "output": "SELECT p.ProductName, AVG(od.Quantity) AS AverageQuantityPerOrder FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the most frequently ordered product.",
        "output": "SELECT ProductName, SUM(Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on time each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m');",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compute the average time taken to ship orders by each employee.",
        "output": "SELECT e.EmployeeID, AVG(JULIANDAY(ShippedDate) - JULIANDAY(OrderDate)) AS AvgShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE ShippedDate IS NOT NULL GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees who report to a specific manager along with their total sales.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE e.ReportsTo = ? GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the largest order quantity?",
        "output": "SELECT p.ProductID, MAX(od.Quantity) AS MaxOrderQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY MaxOrderQuantity DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of all products?",
        "output": "SELECT AVG(UnitPrice) AS AveragePrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the supplier with the fastest average lead time.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS FastestLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.SupplierID ORDER BY FastestLeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the highest unit price for a product and which supplier provides it?",
        "output": "SELECT suppliers.CompanyName, products.ProductName, MAX(products.UnitPrice) AS MaxUnitPrice FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID ORDER BY MaxUnitPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were received but not yet shipped as of today?",
        "output": "SELECT COUNT(OrderID) AS PendingOrders FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders placed after January 1, 2023.",
        "output": "SELECT * FROM orders WHERE OrderDate > '2023-01-01';",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average supplier lead time for each supplier?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the cities with the highest number of orders in 2023.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY ShipCity ORDER BY OrderCount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for the month of January 2022?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(orders.OrderDate) = 1 AND YEAR(orders.OrderDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the highest number of orders shipped to 'Germany'.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS NumberOfOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShipCountry = 'Germany' GROUP BY e.EmployeeID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which regions have the highest order frequency?",
        "output": "SELECT ShipRegion, COUNT(*) AS OrderFrequency FROM orders GROUP BY ShipRegion ORDER BY OrderFrequency DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time for delivering products?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID ORDER BY supplier_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What are the top 3 cities by the number of orders shipped in 2023?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrdersCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = '2023' GROUP BY ShipCity ORDER BY OrdersCount DESC LIMIT 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find all employees who generated sales, grouped by their regions.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.Region;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total quantity of units sold for each product for the current year.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE()) GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value for orders placed between January 2023 and December 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products need to be reordered based on the ReorderLevel?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales from each customer?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 customers by total sales revenue in 2023.",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 5",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product were sold by each supplier?",
        "output": "SELECT suppliers.SupplierName, products.ProductName, SUM([Order Details].Quantity) AS UnitsSold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID, products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped to each city?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer lifetime value for each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as CustomerLifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total revenue generated from all orders.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the number of orders placed each day?",
        "output": "SELECT OrderDate, COUNT(*) AS DailyOrderCount FROM orders GROUP BY OrderDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the monthly revenue for the year 2023?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS monthly_revenue FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2023 GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders included a discount in 2023?",
        "output": "SELECT COUNT(*) AS discounted_orders FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' AND [Order Details].Discount > 0",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are below the reorder level?",
        "output": "SELECT ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreight FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest total number of orders in 2022?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with sales quantities below 100 units in the last quarter.",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW() GROUP BY p.ProductName HAVING SUM(od.Quantity) < 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the most frequent repeat customers?",
        "output": "SELECT employees.EmployeeID, COUNT(DISTINCT orders.CustomerID) AS RepeatCustomers FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY RepeatCustomers DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products that need to be reordered.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of orders delivered on or before the required date?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How much sales did each employee generate in Q1 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders placed each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are discontinued?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time by employee?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(DAY, orders.OrderDate, orders.ShippedDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 cities with the highest order count in 2021.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2021 GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 5 employees by sales generated?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the highest total freight cost?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY CustomerID ORDER BY TotalFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales by each employee's hire date.",
        "output": "SELECT e.EmployeeID, e.HireDate, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.HireDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units in stock for each supplier?",
        "output": "SELECT s.CompanyName, SUM(p.UnitsInStock) AS TotalStock FROM products p INNER JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value by customer?",
        "output": "SELECT CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees are there in each city?",
        "output": "SELECT City, COUNT(*) as EmployeeCount FROM employees GROUP BY City;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated by each employee in Q1 2022?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products are currently discontinued?",
        "output": "SELECT COUNT(*) AS DiscontinuedCount FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the employees with the lowest sales?",
        "output": "SELECT e.FirstName, e.LastName, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales ASC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order value by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have the highest discount percentages?",
        "output": "SELECT p.ProductID, p.ProductName, MAX(od.Discount) AS MaxDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID ORDER BY MaxDiscount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products that are currently discontinued.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees with the highest number of orders shipped.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS ShippedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate IS NOT NULL GROUP BY e.EmployeeID ORDER BY ShippedOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average discount applied to orders in the last month.",
        "output": "SELECT AVG(od.Discount) AS AverageDiscount FROM [Order Details] od WHERE od.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by each customer in 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have placed orders every month for the past year.",
        "output": "SELECT c.CustomerID FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATEADD(MONTH, -12, CURRENT_DATE) GROUP BY c.CustomerID HAVING COUNT(DISTINCT MONTH(o.OrderDate)) = 12;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the shipping cost per order for each customer?",
        "output": "SELECT CustomerID, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products by supplier?",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID ORDER BY AverageUnitPrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order quantity for products in category 'Electronics'?",
        "output": "SELECT AVG([Order Details].Quantity) AS AverageQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE products.Category = 'Electronics';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by each customer in Q2 2023?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY customers.CustomerID ORDER BY order_count DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity ordered for each supplier's products?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by employees hired in the last five years?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE employees.HireDate >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance score of each product based on sales and inventory levels?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) / AVG(p.UnitsInStock) AS PerformanceScore FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer throughout their entire relationship with the company?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products are ordered most frequently?",
        "output": "SELECT ProductID, COUNT(OrderID) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each customer in 2022?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest number of discontinued products?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.SupplierID ORDER BY DiscontinuedCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 3 regions by total revenue.",
        "output": "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY TotalRevenue DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest average unit price for their products?",
        "output": "SELECT suppliers.CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName ORDER BY AVG(products.UnitPrice) DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product categories with the highest total sales.",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSales FROM categories JOIN products ON categories.CategoryID = products.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryName ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the orders where the order date is greater than the required date.",
        "output": "SELECT * FROM orders WHERE OrderDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the month of February 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-02-01' AND '2023-02-28';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which cities have the highest number of customers?",
        "output": "SELECT customers.City, COUNT(customers.CustomerID) AS customer_count FROM customers GROUP BY customers.City ORDER BY customer_count DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products with a unit price higher than the average unit price.",
        "output": "SELECT ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not been ordered at all this month?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m'));",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered soon based on their reorder levels?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock <= ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the product performance based on total quantity sold?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantitySold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have sales greater than a specified threshold?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName HAVING TotalSales > 1000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the orders that have not been shipped yet.",
        "output": "SELECT o.OrderID FROM orders o WHERE o.ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales revenue in March 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 customers with the highest order count.",
        "output": "SELECT CustomerID, COUNT(*) AS OrderCount FROM orders GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "For each month, what is the number of orders placed and total revenue generated?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(orders.OrderID) AS OrderCount, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which categories of products have the highest sales revenue in 2023?",
        "output": "SELECT categories.CategoryID, categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryID ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products along with their corresponding order quantities and discounts.",
        "output": "SELECT p.ProductName, od.Quantity, od.Discount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee achieved the highest sales in January 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated per supplier?",
        "output": "SELECT SupplierID, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenueGenerated FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average quantity of products ordered per order?",
        "output": "SELECT AVG(Quantity) AS AverageQuantity FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which product had the highest total revenue last month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(), INTERVAL 1 MONTH), '%Y-%m') GROUP BY p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products with inventory levels below the reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of unique products ordered by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in August 2023?",
        "output": "SELECT COUNT(orders.OrderID) FILTER (WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31') / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-08-01' AND '2023-08-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly performance (total sales) of each product?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time for suppliers in May 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-05-01' AND '2023-05-31' GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "In which city were the most orders delivered in January 2023?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY ShipCity ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common job title among contact persons?",
        "output": "SELECT ContactTitle, COUNT(*) AS NumberOfContacts FROM customers GROUP BY ContactTitle ORDER BY NumberOfContacts DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the busiest month for orders last year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS BusiestMonth, COUNT(*) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY BusiestMonth ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the customer who placed the earliest order.",
        "output": "SELECT CustomerID, MIN(OrderDate) AS earliest_order FROM orders GROUP BY CustomerID ORDER BY earliest_order ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have generated the highest total sales?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a unit price greater than the average unit price for all products?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region generated the highest total sales in 2022?",
        "output": "SELECT territories.RegionID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY territories.RegionID ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers have the best average lead time in 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN products ON [Order Details].ProductID = products.ProductID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID ORDER BY supplier_lead_time",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have been hired in the last six months.",
        "output": "SELECT EmployeeID, FirstName, LastName FROM employees WHERE HireDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for customers this month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue from products that have been discontinued?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region has the highest order fulfillment time?",
        "output": "SELECT orders.ShipRegion, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS Average_Fulfillment_Time FROM orders GROUP BY orders.ShipRegion ORDER BY Average_Fulfillment_Time DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the suppliers with the fastest average lead time.",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgLeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN (SELECT orders.OrderID, orders.ShippedDate, orders.OrderDate, [Order Details].ProductID FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID) AS temp ON products.ProductID = temp.ProductID GROUP BY suppliers.CompanyName ORDER BY AvgLeadTime ASC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost of all orders placed by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the supplier with the most units in stock.",
        "output": "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID ORDER BY p.UnitsInStock DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the longest time taken to ship any order in the database?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestShippingTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the monthly revenue trend for the past year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') as Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as MonthlyRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employee handled the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) as OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which cities and countries generate the most sales revenue?",
        "output": "SELECT orders.ShipCity, orders.ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY orders.ShipCity, orders.ShipCountry ORDER BY total_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the month of January 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AvgOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 1 AND YEAR(o.OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List products that are discontinued.",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the average unit price of products supplied by each supplier.",
        "output": "SELECT suppliers.CompanyName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders shipped by 'ShipVia' method 2 in the past month?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE ShipVia = 2 AND OrderDate >= CURDATE() - INTERVAL 1 MONTH;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 3 products with the highest discount applied on average?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AverageDiscount DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE YEAR(orders.OrderDate) = 2023 GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used most frequently in the first quarter of 2023?",
        "output": "SELECT O.ShipVia, COUNT(*) AS UsageCount FROM orders O WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') IN ('2023-01', '2023-02', '2023-03') GROUP BY O.ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 3 categories by total sales revenue?",
        "output": "SELECT p.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSalesRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.CategoryID ORDER BY TotalSalesRevenue DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products that need reordering (UnitsInStock < ReorderLevel).",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders delivered on or before the required date?",
        "output": "SELECT COUNT(orders.OrderID) WHERE orders.ShippedDate <= orders.RequiredDate) / COUNT(*) * 100 AS On_time_Delivery_Rate FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the highest number of products?",
        "output": "SELECT suppliers.SupplierName, COUNT(products.ProductID) AS NumberOfProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers supply products that are currently out of stock?",
        "output": "SELECT DISTINCT S.SupplierID, S.SupplierName FROM products P JOIN suppliers S ON P.SupplierID = S.SupplierID WHERE P.UnitsInStock = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Count the number of products discontinued by each supplier.",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) AS DiscontinuedProducts FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.Discontinued = 1 GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who placed orders in the last month.",
        "output": "SELECT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have reached or fallen below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with the highest and lowest reorder levels.",
        "output": "SELECT products.ProductName, products.ReorderLevel FROM products ORDER BY products.ReorderLevel DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the suppliers who have never shipped an order.",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN (SELECT DISTINCT products.SupplierID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID) AS temp ON suppliers.SupplierID = temp.SupplierID WHERE temp.SupplierID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the orders that were shipped late in 2022.",
        "output": "SELECT OrderID FROM orders WHERE ShippedDate > RequiredDate AND DATE_FORMAT(OrderDate, '%Y') = '2022'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products were ordered in the highest quantity during the first quarter of 2022?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-03-31') GROUP BY ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are supplied by each supplier?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the highest average order value this year.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have never placed an order.",
        "output": "SELECT c.CustomerID FROM customers c LEFT JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.CustomerID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees have managed more than 100 orders in 2023?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS order_count FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID HAVING order_count > 100",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the monthly sales performance for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName, DATE_FORMAT(od.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products with a unit price higher than the average unit price of all products.",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total revenue generated by each product.",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between the required date and the shipped date?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, ShippedDate)) AS AverageDaysDifference FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total value of products currently in stock for each supplier.",
        "output": "SELECT s.SupplierID, SUM(p.UnitsInStock * p.UnitPrice) AS TotalValue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products provided by each supplier?",
        "output": "SELECT suppliers.SupplierName, AVG(products.UnitPrice) AS AverageUnitPrice FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employee with the highest average order discount.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, AVG([Order Details].Discount) AS AvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID ORDER BY AvgDiscount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the sales revenue by country?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have been ordered more than 100 times?",
        "output": "SELECT ProductID FROM [Order Details] GROUP BY ProductID HAVING SUM(Quantity) > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products with the highest total sales value?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalSalesValue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY TotalSalesValue DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have not processed any orders.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units of each product were sold in the last month?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS UnitsSoldLastMonth FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How much total revenue was generated from orders shipped to 'Germany'?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE ShipCountry = 'Germany';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 5 products by the number of units in stock.",
        "output": "SELECT ProductName FROM products ORDER BY UnitsInStock DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the lowest average lead time in 2023?",
        "output": "SELECT s.SupplierID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS avg_lead_time FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN products p ON od.ProductID = p.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY s.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed more than 10 orders?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY CustomerID HAVING COUNT(OrderID) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average monthly sales value for each product category?",
        "output": "SELECT categories.CategoryName, AVG(MonthlySales) AS AverageMonthlySales FROM (SELECT categories.CategoryName, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS MonthlySales FROM categories JOIN products ON categories.CategoryID = products.CategoryID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY categories.CategoryName, Month) AS MonthlySalesStats GROUP BY categories.CategoryName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product generated the most revenue in 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS product_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID ORDER BY product_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest number of products in stock?",
        "output": "SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnits FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalUnits DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 most ordered products?",
        "output": "SELECT TOP 5 products.ProductName, SUM([Order Details].Quantity) AS TotalOrdered FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalOrdered DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for the entire dataset?",
        "output": "SELECT AVG(Freight) AS avg_shipping_cost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have shipped orders within a week?",
        "output": "SELECT s.CompanyName FROM suppliers s INNER JOIN products p ON s.SupplierID = p.SupplierID INNER JOIN orders o ON o.ProductID = p.ProductID WHERE DATEDIFF(o.ShippedDate, o.OrderDate) <= 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders handled by each employee?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are supplied by each supplier?",
        "output": "SELECT SupplierID, ProductName FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customers have generated the highest lifetime value?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers are located in Germany?",
        "output": "SELECT * FROM suppliers WHERE Country = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly product performance for each product.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalQuantitySold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, YEAR(od.OrderDate), MONTH(od.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which orders have more than 10 units of any product?",
        "output": "SELECT od.OrderID FROM [Order Details] od GROUP BY od.OrderID HAVING MAX(od.Quantity) > 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have completed orders with the highest total freight costs?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS FreightCount, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY TotalFreight DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products with the highest sales revenue.",
        "output": "SELECT TOP 5 ProductID, SUM(UnitPrice * Quantity) AS TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the most expensive products on average?",
        "output": "SELECT s.SupplierID, AVG(p.UnitPrice) as AvgPrice FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY AvgPrice DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales for each month?",
        "output": "SELECT DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(o.OrderDate, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given to each customer?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units in stock for each product?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city had the highest average order value in the past quarter?",
        "output": "SELECT ShipCity, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= CURDATE() - INTERVAL 3 MONTH GROUP BY ShipCity ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for the current month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average price per unit for each product category?",
        "output": "SELECT categories.CategoryID, AVG(products.UnitPrice) AS AveragePrice FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales by country.",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "For each supplier, list the total revenue generated from their products.",
        "output": "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost incurred each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM(Freight) AS TotalFreight FROM orders GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest revenue last quarter?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE QUARTER(orders.OrderDate) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER) AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER) GROUP BY [Order Details].ProductID ORDER BY Total_Revenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the total sales from orders placed in '2023-03'?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-03';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total cost of goods sold for the last quarter?",
        "output": "Corrected: SELECT SUM(Quantity * UnitPrice) AS CostOfGoodsSold FROM [Order Details] WHERE DATE_FORMAT(OrderDate, '%Y-%m') BETWEEN DATE_FORMAT(CURRENT_DATE - INTERVAL 3 MONTH, '%Y-%m') AND DATE_FORMAT(CURRENT_DATE, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of orders that include a discount of more than 10%?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS TotalOrders FROM [Order Details] WHERE Discount > 0.1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company is used most frequently?",
        "output": "SELECT ShipVia, COUNT(*) AS usage_frequency FROM orders GROUP BY ShipVia ORDER BY usage_frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of order dates by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') as Month, COUNT(OrderID) as TotalOrders FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the top 5 customers by total sales in 2023.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID JOIN customers c ON o.CustomerID = c.CustomerID WHERE YEAR(o.OrderDate) = 2023 GROUP BY c.CustomerID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee fulfilled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the top 5 employees with the highest number of processed orders?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have the highest customer satisfaction based on regional sales?",
        "output": "SELECT employees.EmployeeID, employees.Region, COUNT(orders.OrderID) AS OrderCount FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, employees.Region ORDER BY COUNT(orders.OrderID) DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales generated by each sales territory in September 2023?",
        "output": "SELECT territories.TerritoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS territory_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE orders.OrderDate BETWEEN '2023-09-01' AND '2023-09-30' GROUP BY territories.TerritoryID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products contribute to 80% of the total sales revenue?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity * od.UnitPrice) >= (SELECT 0.8 * SUM(od.Quantity * od.UnitPrice) FROM [Order Details]);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue generated per product?",
        "output": "SELECT products.ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the percentage of orders that were shipped on time by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OnTimeOrders, (SUM(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 ELSE 0 END) / COUNT(orders.OrderID)) * 100 AS OnTimePercentage FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the monthly trend in total sales over the past year.",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m') ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the distribution of order fulfillment times (in days) for the past six months?",
        "output": "SELECT DATEDIFF(ShippedDate, OrderDate) AS FulfillmentTime, COUNT(*) AS NumberOfOrders FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY FulfillmentTime;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees report to employee ID '5'?",
        "output": "SELECT EmployeeID FROM employees WHERE ReportsTo = 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the shipping recipient name and address for orders that incurred the highest freight costs.",
        "output": "SELECT ShipName, ShipAddress FROM orders ORDER BY Freight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Compute the average order value for Q4 2023, excluding any orders with discounts.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' AND [Order Details].Discount = 0",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the total sales value for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesValue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalSalesValue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue for each product?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalRevenue FROM [Order Details] od GROUP BY od.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which shipping method is used the most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS ShippingCount FROM orders GROUP BY ShipVia ORDER BY ShippingCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which orders have the highest freight cost and what are their details?",
        "output": "SELECT orders.OrderID, orders.Freight, customers.CompanyName, orders.ShipName, orders.ShipCity FROM orders INNER JOIN customers ON orders.CustomerID = customers.CustomerID ORDER BY Freight DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied per order in 2022?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2022;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for orders placed in 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products were ordered the most in the last year?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Quantity) as TotalQuantity FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(GETDATE())-1 GROUP BY [Order Details].ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average reorder level for all products?",
        "output": "SELECT AVG(ReorderLevel) AS AverageReorderLevel FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales in December 2022?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2022-12-01' AND '2022-12-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered (units in stock < reorder level)?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total stock of each product?",
        "output": "SELECT ProductName, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time taken by each supplier to deliver products?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Get the total sales generated by employees grouped by country.",
        "output": "SELECT e.Country, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Country;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have reached their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top 3 cities by total sales.",
        "output": "SELECT ShipCity, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer has placed the most orders in 2023?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY order_count DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the average freight costs per order?",
        "output": "SELECT AVG(Freight) AS AverageFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the number of employees hired each month in the last year.",
        "output": "SELECT DATE_TRUNC('month', HireDate) AS HireMonth, COUNT(*) AS HiredCount FROM employees WHERE HireDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY DATE_TRUNC('month', HireDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the fewest processed orders?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the sales figures and inventory levels for each category of products?",
        "output": "SELECT c.CategoryID, c.CategoryName, SUM(od.Quantity) AS TotalSales, SUM(p.UnitsInStock) AS TotalInventory FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID, c.CategoryName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total number of units on order for each product category.",
        "output": "SELECT CategoryID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the average inventory levels for each product?",
        "output": "SELECT ProductID, AVG(UnitsInStock) AS AverageInventoryLevel FROM products GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the monthly total sales for the year 2021.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlyTotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2021 GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find all customers who ordered a specific product (ProductID=1).",
        "output": "SELECT DISTINCT customers.CustomerID, customers.CompanyName FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].ProductID = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the most orders last month?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, DATE_TRUNC('month', CURRENT_DATE)) GROUP BY CustomerID ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales revenue generated for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average time taken to ship an order for each month in 2023.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region has the highest total sales?",
        "output": "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest average unit price?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AveragePrice FROM products GROUP BY CategoryID ORDER BY AveragePrice DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales for the month of January 2023?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS total_sales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many orders were placed for products with a discount greater than 0.10?",
        "output": "SELECT COUNT(*) FROM [Order Details] WHERE Discount > 0.10;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has placed the highest number of orders?",
        "output": "SELECT CustomerID, COUNT(*) AS order_count FROM orders GROUP BY CustomerID ORDER BY order_count DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated by each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all discontinued products.",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders for each shipping method in the last six months?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS total_orders FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products ordered from each supplier?",
        "output": "SELECT s.CompanyName, SUM(od.Quantity) AS TotalQuantity FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "For each supplier, what is the total quantity of products supplied?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity) AS TotalQuantitySupplied FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the average freight cost per order.",
        "output": "SELECT AVG(Freight) AS AverageFreight FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which regions have generated the highest sales revenue in 2022?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN territories ON customers.Region = territories.RegionID JOIN region ON territories.RegionID = region.RegionID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY region.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have a reorder level greater than the number of units in stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ReorderLevel > UnitsInStock;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total revenue generated from each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as total_revenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated from each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many different categories of products are there?",
        "output": "SELECT COUNT(DISTINCT CategoryID) AS CategoryCount FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which are the least performing products in terms of sales quantity?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSalesQuantity FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalSalesQuantity ASC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time by each shipping company in 2023?",
        "output": "SELECT shippers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS OrderCount FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the distribution of order quantities?",
        "output": "SELECT Quantity, COUNT(*) AS Frequency FROM [Order Details] GROUP BY Quantity ORDER BY Frequency DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has processed the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) as TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which category has the most products listed?",
        "output": "SELECT c.CategoryName, COUNT(p.ProductID) AS ProductCount FROM categories c JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which city has the highest number of customers?",
        "output": "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have zero units in stock?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated per product category?",
        "output": "SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID ORDER BY TotalRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products had zero sales in the first quarter of 2023?",
        "output": "SELECT products.ProductID, products.ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID LEFT JOIN orders ON [Order Details].OrderID = orders.OrderID AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' WHERE [Order Details].OrderID IS NULL",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the monthly trend in average order value for the past year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month ORDER BY Month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Get the total quantity of products ordered by each customer.",
        "output": "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c INNER JOIN orders o ON c.CustomerID = o.CustomerID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has handled the maximum number of distinct customers?",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT o.CustomerID) AS DistinctCustomerCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY DistinctCustomerCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue for the year 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the details of orders that have not been shipped yet?",
        "output": "SELECT * FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue generated for each product?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales quantity for each product within the last month?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE DATEPART(month, o.OrderDate) = DATEPART(month, GETDATE()) AND DATEPART(year, o.OrderDate) = DATEPART(year, GETDATE()) GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest total sales value?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSalesValue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSalesValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many orders included a discount?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS OrdersWithDiscount FROM [Order Details] WHERE Discount > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the average freight cost for orders that were shipped beyond the required date.",
        "output": "SELECT AVG(Freight) AS AverageFreightCost FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order completion time for each shipping company?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_order_completion_time FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Calculate the total number of orders shipped on time.",
        "output": "SELECT COUNT(OrderID) AS TotalOnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Get the list of all products along with their supplier name.",
        "output": "SELECT p.ProductName, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "For each category, what is the total number of units in stock?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers along with their contact names and phone numbers.",
        "output": "SELECT CustomerID, ContactName, Phone FROM customers;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AvgOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping time to different countries?",
        "output": "SELECT ShipCountry, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageShippingTime FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for last month?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 SECOND MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees processed the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have never been ordered?",
        "output": "SELECT ProductID, ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales for each country?",
        "output": "SELECT ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the top 5 suppliers based on the number of products supplied?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) as TotalProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY TotalProducts DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees responsible for sales orders exceeding $10,000.",
        "output": "SELECT employees.EmployeeID, employees.LastName, employees.FirstName FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 10000;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have been ordered but not yet delivered?",
        "output": "SELECT ProductID FROM products WHERE UnitsOnOrder > 0 AND ProductID NOT IN (SELECT ProductID FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate IS NOT NULL);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total quantity of 'ProductID' 105 sold in February 2023?",
        "output": "SELECT SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE [Order Details].ProductID = 105 AND orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the total freight charges by each shipping method.",
        "output": "SELECT o.ShipVia, SUM(o.Freight) AS TotalFreight FROM orders o GROUP BY o.ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have spent more than $10,000?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSpending FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID HAVING TotalSpending > 10000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find products with a reorder level of 50 or less.",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel <= 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders had a shipping delay in 2023?",
        "output": "SELECT COUNT(o.OrderID) AS DelayedOrders FROM orders o WHERE DATE_FORMAT(o.OrderDate, '%Y') = '2023' AND o.ShippedDate > o.RequiredDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer retention rate for the year 2022?",
        "output": "(SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31') / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate < '2022-01-01') AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total sales value for each product.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed but not yet shipped?",
        "output": "SELECT COUNT(OrderID) AS NotShippedOrderCount FROM orders WHERE ShippedDate IS NULL",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of products supplied by each supplier?",
        "output": "SELECT SupplierID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top 5 products with the highest sales volume in the last year.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsSold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY p.ProductID ORDER BY TotalUnitsSold DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the number of products that have never been ordered.",
        "output": "SELECT ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has been with the company the longest?",
        "output": "SELECT EmployeeID FROM employees ORDER BY HireDate ASC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given for each product?",
        "output": "SELECT products.ProductID, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the highest number of suppliers?",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average age of employees?",
        "output": "SELECT AVG(DATEDIFF(CURDATE(), BirthDate) / 365) AS AverageAge FROM employees;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the suppliers along with the number of products they supply that are currently on order.",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductsOnOrder FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.UnitsOnOrder > 0 GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total discount given for orders in the last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS TotalDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE MONTH(orders.OrderDate) = MONTH(CURRENT_DATE) - 1 AND YEAR(orders.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "For each product, what is the total sales revenue generated?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products per supplier?",
        "output": "SELECT s.CompanyName, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p INNER JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the customer lifetime value for each customer up to 2022?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate <= '2022-12-31' GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have not placed any orders in the last year.",
        "output": "SELECT customers.CustomerID FROM customers LEFT JOIN orders ON customers.CustomerID = orders.CustomerID WHERE customers.CustomerID NOT IN (SELECT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(NOW(), INTERVAL 1 YEAR));",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, (COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 5 cities with the highest number of customers.",
        "output": "SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM customers GROUP BY City ORDER BY NumberOfCustomers DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has received the most shipped orders?",
        "output": "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have consistently been ordered in quantities higher than their reorder level?",
        "output": "SELECT products.ProductID FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID HAVING SUM([Order Details].Quantity) > AVG(products.ReorderLevel);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products with zero units in stock?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed in the last year?",
        "output": "SELECT COUNT(*) AS OrdersLastYear FROM orders WHERE EXTRACT(YEAR FROM OrderDate) = EXTRACT(YEAR FROM CURRENT_DATE) - 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered more than 100 times?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalQuantityOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID HAVING SUM(od.Quantity) > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped within the required date period?",
        "output": "SELECT COUNT(OrderID) AS OnTimeOrders FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the birth dates and age of all employees.",
        "output": "SELECT EmployeeID, LastName, FirstName, BirthDate, ROUND((CURRENT_DATE - BirthDate) / 365.25, 2) AS Age FROM employees;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique customers placed orders in the last quarter?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE() - INTERVAL 3 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with zero units in stock but units on order.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0 AND UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers who have placed an order in the last year.",
        "output": "SELECT DISTINCT c.CustomerID, c.CompanyName FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID WHERE o.OrderDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products by sales quantity?",
        "output": "SELECT TOP 5 ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the most frequently shipped product.",
        "output": "SELECT [Order Details].ProductID, COUNT([Order Details].OrderID) AS OrderCount FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total value of orders shipped to each country?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products that need to be reordered (units in stock are less than the reorder level).",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have not placed any orders in the last month.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL OR (o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 MONTH));",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the products where the reorder level has been reached but not yet reordered.",
        "output": "SELECT p.ProductName FROM products p WHERE p.UnitsInStock <= p.ReorderLevel AND p.UnitsOnOrder = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customer generated the highest revenue?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 customers in terms of total freight cost paid.",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID ORDER BY TotalFreight DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total revenue generated from orders placed in the year 2022.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List orders along with the employee who handled each order.",
        "output": "SELECT o.OrderID, e.EmployeeName FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Who are the employees and their respective managers?",
        "output": "SELECT e1.EmployeeID, e1.FirstName AS EmployeeFirstName, e1.LastName AS EmployeeLastName, e2.FirstName AS ManagerFirstName, e2.LastName AS ManagerLastName FROM employees e1 LEFT JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the earliest order date in the database?",
        "output": "SELECT MIN(OrderDate) AS EarliestOrderDate FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance of each product based on sales quantity?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS TotalSalesQuantity FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total freight cost for orders handled by each employee.",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Count the number of products ordered more than 100 times in the last month.",
        "output": "SELECT p.ProductName, COUNT(od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY p.ProductName HAVING OrderCount > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all orders along with their associated shipping details.",
        "output": "SELECT orders.*, ShipName, ShipCity, ShipPostalCode, ShipCountry FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 5 products with the highest sales revenue.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify suppliers who have not supplied any products.",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.SupplierID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest discount given, on average?",
        "output": "SELECT ProductID, AVG(Discount) AS AvgDiscount FROM [Order Details] GROUP BY ProductID ORDER BY AvgDiscount DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the highest number of products?",
        "output": "SELECT suppliers.SupplierID, CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired after January 1, 2020?",
        "output": "SELECT COUNT(*) AS EmployeeCount FROM employees WHERE HireDate > '2020-01-01';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of products ordered last month?",
        "output": "SELECT SUM(Quantity) AS TotalProductsOrdered FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND o.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 SECOND MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount given per order?",
        "output": "SELECT OrderID, AVG(Discount) as AverageDiscount FROM [Order Details] GROUP BY OrderID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') as Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customers have placed orders with a total value exceeding $500?",
        "output": "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY CustomerID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > 500;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales revenue generated by each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) as TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the highest discounted order handled by each employee?",
        "output": "SELECT e.EmployeeID, MAX(od.Discount) AS MaxDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest number of units on order?",
        "output": "SELECT products.ProductName, products.UnitsOnOrder FROM products ORDER BY products.UnitsOnOrder DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used most frequently in 2022?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UseCount FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY ShipVia ORDER BY UseCount DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the highest total order value?",
        "output": "SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID HAVING SUM(Freight) = (SELECT MAX(TotalFreight) FROM (SELECT CustomerID, SUM(Freight) AS TotalFreight FROM orders GROUP BY CustomerID) AS SubQuery);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average inventory turnover ratio for the past six months?",
        "output": "SELECT AVG(MonthlyTurnover) AS AverageTurnover FROM (SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS MonthlyTurnover FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY Month) AS TurnoverStats;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT orders.OrderID, orders.OrderDate, orders.RequiredDate, orders.ShippedDate FROM orders WHERE orders.ShippedDate > orders.RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest discount applied on average?",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AvgDiscount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY AvgDiscount DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the most frequently ordered product.",
        "output": "SELECT ProductID, COUNT(OrderID) as TotalOrders FROM [Order Details] GROUP BY ProductID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "For each employee, what is the average fulfillment time for the orders they handled?",
        "output": "SELECT EmployeeID, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What's the distribution of order fulfillment time across different shipping methods?",
        "output": "SELECT orders.ShipVia, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY orders.ShipVia ORDER BY avg_fulfillment_time",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Calculate the total sales revenue generated per supplier.",
        "output": "SELECT s.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names and unit prices of all discontinued products?",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the order that took the longest time to ship.",
        "output": "SELECT OrderID, DATEDIFF(ShippedDate, OrderDate) AS days_to_ship FROM orders ORDER BY days_to_ship DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount given by each employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Discount) AS AvgDiscount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List all products that have been discontinued.",
        "output": "SELECT * FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products by total sales in 2023?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID, products.ProductName ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have birthdays this month.",
        "output": "SELECT e.FirstName, e.LastName, e.BirthDate FROM employees e WHERE MONTH(e.BirthDate) = MONTH(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated per month for each employee?",
        "output": "SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify the top 5 cities with the highest number of orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales (in quantity) for each product?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS TotalQuantitySold FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average order fulfillment time for March 2023?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-03'",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total discount given across all orders?",
        "output": "SELECT SUM(Discount * Quantity * UnitPrice) AS TotalDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders did each employee fulfill in the first quarter of 2023?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS total_orders FROM orders o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the orders with the highest discount applied.",
        "output": "SELECT o.OrderID, MAX(od.Discount) AS MaxDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.OrderID ORDER BY MaxDiscount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders included a discount greater than 20% in 2022?",
        "output": "SELECT COUNT(DISTINCT o.OrderID) AS OrderCount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Discount > 0.2 AND o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many orders include products with a unit price greater than $50?",
        "output": "SELECT COUNT(DISTINCT od.OrderID) FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.UnitPrice > 50;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have received the highest average order value in the current year?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgOrderValue FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURDATE()) GROUP BY e.EmployeeID ORDER BY AvgOrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped within 2 days from the order date?",
        "output": "SELECT COUNT(*) AS two_day_shipments FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee has fulfilled the most orders in the last month?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS orders_fulfilled FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(NOW() - INTERVAL 1 MONTH, '%Y-%m') GROUP BY EmployeeID ORDER BY orders_fulfilled DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been sold with a discount at least once?",
        "output": "SELECT DISTINCT products.ProductName FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE Discount > 0",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What are the top 5 cities with the highest number of orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS order_count FROM orders GROUP BY ShipCity ORDER BY order_count DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total quantity of goods sold by each supplier in 2021?",
        "output": "SELECT suppliers.SupplierID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY suppliers.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders shipped in January 2023?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total revenue generated from all product sales?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total quantity of products sold by each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.Quantity) AS TotalQuantity FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers provide products that have the highest number of units in stock?",
        "output": "SELECT suppliers.CompanyName, products.ProductName, products.UnitsInStock FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID ORDER BY products.UnitsInStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine average time (in months) between stock reorders for each product.",
        "output": "SELECT ProductName, SUM(MONTH(orderDate) - MONTH(previousOrderDate)) / COUNT(*) AS AvgMonthsBetweenReorders FROM (SELECT p.ProductName, o.orderDate, LAG(o.orderDate) OVER (PARTITION BY p.ProductID ORDER BY o.orderDate) AS previousOrderDate FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID) AS sub GROUP BY ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the Customer Retention Rate for the last year?",
        "output": "SELECT (COUNT(DISTINCT Orders1.CustomerID) / COUNT(DISTINCT Orders2.CustomerID)) * 100 as CustomerRetentionRate FROM (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()) as Orders1, (SELECT DISTINCT CustomerID FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) as Orders2;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products with the highest sales revenue?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average unit price for the products ordered each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, AVG([Order Details].UnitPrice) AS AvgUnitPrice FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are currently discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the performance of each product based on sales?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS Performance FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees along with the number of orders they have handled.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee processed the most orders in the last quarter?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products were ordered the most frequently?",
        "output": "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the highest number of products?",
        "output": "SELECT CategoryID, COUNT(*) AS NumberOfProducts FROM products GROUP BY CategoryID ORDER BY NumberOfProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have never been ordered?",
        "output": "SELECT ProductID FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product category has the highest total sales?",
        "output": "SELECT C.CategoryName, SUM(OD.Quantity * P.UnitPrice) AS TotalSales FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID JOIN categories C ON P.CategoryID = C.CategoryID GROUP BY C.CategoryName ORDER BY TotalSales DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total number of orders shipped by each country.",
        "output": "SELECT o.ShipCountry, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average freight cost for orders required in the upcoming week?",
        "output": "SELECT AVG(Freight) FROM orders WHERE RequiredDate BETWEEN CURDATE() AND CURDATE() + INTERVAL 7 DAY;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have been ordered most frequently?",
        "output": "SELECT ProductID, COUNT(ProductID) AS Frequency FROM [Order Details] GROUP BY ProductID ORDER BY Frequency DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units on order?",
        "output": "SELECT SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred for shipments in March 2023?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders WHERE MONTH(OrderDate) = 3 AND YEAR(OrderDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier supplies the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were placed each month in 2021?",
        "output": "SELECT TO_CHAR(OrderDate, 'YYYY-MM') AS Month, COUNT(*) FROM orders WHERE OrderDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY TO_CHAR(OrderDate, 'YYYY-MM');",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the average salary of employees by title.",
        "output": "SELECT Title, AVG(Salary) AS AvgSalary FROM employees GROUP BY Title;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated for each product?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units on order for each supplier?",
        "output": "SELECT SupplierID, SUM(UnitsOnOrder) AS TotalUnitsOnOrder FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the region that generates the most order revenue?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY TotalRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which cities have the highest number of employees?",
        "output": "SELECT City, COUNT(*) AS NumEmployees FROM employees GROUP BY City ORDER BY NumEmployees DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average sales per employee.",
        "output": "SELECT AVG(TotalSales) AS AverageSales FROM (SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID) AS EmployeeSales;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of on-time deliveries for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category generated the highest sales in December 2023?",
        "output": "SELECT categories.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS category_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31' GROUP BY categories.CategoryID ORDER BY category_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in Q1 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total sales generated by all employees for each month.",
        "output": "SELECT e.EmployeeID, DATE_FORMAT(o.OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many employees have fulfilled at least 10 orders in the past month?",
        "output": "SELECT EmployeeID, COUNT(*) AS order_count FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m') GROUP BY EmployeeID HAVING order_count >= 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in July 2023?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the top 5 products with the highest sales revenue.",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity) as TotalSalesRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalSalesRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are both in stock and on order?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock > 0 AND UnitsOnOrder > 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which country had the highest total sales in 2022?",
        "output": "SELECT o.ShipCountry, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY o.ShipCountry ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total quantity of products ordered in the last quarter?",
        "output": "SELECT SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 QUARTER);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee generated the highest sales revenue in the first quarter of 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city has the most shipped orders?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Identify the top 5 countries by the number of orders shipped.",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipCountry ORDER BY OrdersCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the suppliers who have not shipped any orders in the past 6 months.",
        "output": "SELECT suppliers.CompanyName FROM suppliers LEFT JOIN (SELECT OrderID, ShipVia FROM orders WHERE ShippedDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)) recent_orders ON suppliers.SupplierID = recent_orders.ShipVia WHERE recent_orders.OrderID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales volume in Q1 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31' GROUP BY products.ProductID ORDER BY product_performance DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time per month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed in each month of the year 2023?",
        "output": "SELECT MONTH(OrderDate) AS Month, COUNT(*) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY MONTH(OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products by quantity sold in the year 2023?",
        "output": "SELECT p.ProductID, SUM(od.Quantity) AS total_quantity_sold FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY p.ProductID ORDER BY total_quantity_sold DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the month-over-month trend in total sales over the last six months?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees in each city?",
        "output": "SELECT City, AVG(Salary) AS AverageSalary FROM employees GROUP BY City;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the sum of freight cost for orders handled by each employee?",
        "output": "SELECT EmployeeID, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY EmployeeID ORDER BY TotalFreightCost DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total sales quantity of each product for the month of January 2023?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].OrderID IN (SELECT OrderID FROM orders WHERE orderDate BETWEEN '2023-01-01' AND '2023-01-31') GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the products with the highest unit price.",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has generated the highest total sales?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY DATE_FORMAT(orders.OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average unit price of the products in each category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AverageUnitPrice FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the highest number of products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS TotalProducts FROM products GROUP BY SupplierID ORDER BY TotalProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many suppliers have supplied more than 100 units of any product?",
        "output": "SELECT s.CompanyName, COUNT(*) AS ProductCount FROM products p INNER JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.CompanyName HAVING ProductCount > 100;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of products ordered in the last month?",
        "output": "SELECT COUNT(od.ProductID) as TotalProductsOrdered FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE strftime('%Y-%m', o.OrderDate) = strftime('%Y-%m',date('now', 'start of month', '-1 month'));",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product generated the highest sales revenue in the last year?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) AS ProductSales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE OrderDate >= CURDATE() - INTERVAL 1 YEAR GROUP BY ProductID ORDER BY ProductSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average number of products per order for each customer.",
        "output": "SELECT c.CustomerID, AVG(od.Quantity) AS AverageProductsPerOrder FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which region generated the highest sales revenue?",
        "output": "SELECT ShipRegion, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipRegion ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest unit prices?",
        "output": "SELECT ProductID, ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for the month of January 2023?",
        "output": "SELECT AVG(Freight) AS AvgShippingCost FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-01'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average discount provided across all products.",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many products have never been ordered?",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.ProductID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee handled the most number of orders?",
        "output": "SELECT EmployeeID, OrderCount FROM (SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1) AS EmployeeOrders;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest sales in terms of quantity sold?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductID ORDER BY total_quantity_sold DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 cities in terms of total sales?",
        "output": "SELECT ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCity ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products generate the highest revenue?",
        "output": "SELECT ProductID, SUM(UnitPrice * Quantity * (1 - Discount)) as TotalRevenue FROM [Order Details] GROUP BY ProductID ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average shipping time for orders handled by each employee?",
        "output": "SELECT e.EmployeeID, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AverageShippingTime FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find out the cities with the highest number of orders.",
        "output": "SELECT ShipCity, COUNT(*) AS OrderCount FROM orders GROUP BY ShipCity ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days between OrderDate and RequiredDate?",
        "output": "SELECT AVG(DATEDIFF(RequiredDate, OrderDate)) AS AverageDaysBetweenOrderAndRequired FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales generated by each employee on a monthly basis.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS SalesMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, SalesMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method has the highest average freight cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreight FROM orders GROUP BY ShipVia ORDER BY AvgFreight DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for orders by month?",
        "output": "SELECT EXTRACT(MONTH FROM OrderDate) AS Month, COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY EXTRACT(MONTH FROM OrderDate)",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products that have less than 10 units in stock and have not been reordered.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < 10 AND UnitsOnOrder = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the monthly total sales for 2021.",
        "output": "SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = 2021 GROUP BY YEAR(OrderDate), MONTH(OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many unique customers placed orders in the year 2022?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the top 5 most frequent shipping addresses.",
        "output": "SELECT ShipAddress, COUNT(OrderID) AS Frequency FROM orders GROUP BY ShipAddress ORDER BY Frequency DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average quantity per product across all orders?",
        "output": "SELECT AVG(Quantity) AS AverageQuantity FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the variance in shipping costs between different regions?",
        "output": "SELECT ShipRegion, VARIANCE(Freight) as FreightVariance FROM orders GROUP BY ShipRegion;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped via shipping method 2 in the current year?",
        "output": "SELECT COUNT(*) AS TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURRENT_DATE) AND ShipVia = 2;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped on-time in July 2023?",
        "output": "SELECT COUNT(o.OrderID) AS OnTimeOrders FROM orders o WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-07' AND o.ShippedDate <= o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which region received the most shipments?",
        "output": "SELECT ShipRegion, COUNT(OrderID) AS Shipments FROM orders GROUP BY ShipRegion ORDER BY Shipments DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees were hired in each year?",
        "output": "SELECT strftime('%Y', HireDate) AS HireYear, COUNT(*) AS NumberOfHires FROM employees GROUP BY HireYear;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the product with the highest sales quantity over all time.",
        "output": "SELECT p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SUM(od.Quantity) DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine which employee has processed orders with the highest total discount applied.",
        "output": "SELECT e.EmployeeID, SUM(od.Discount) AS TotalDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalDiscount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier provides the most expensive product?",
        "output": "SELECT S.SupplierID, S.SupplierName, MAX(P.UnitPrice) AS MaxPrice FROM suppliers S JOIN products P ON S.SupplierID = P.SupplierID GROUP BY S.SupplierID, S.SupplierName ORDER BY MaxPrice DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the cumulative sales amount for each month in the last year?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS CumulativeSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost associated with each employee's orders?",
        "output": "SELECT employees.EmployeeID, SUM(orders.Freight) AS TotalFreight FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the number of orders per supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(orders.OrderID) AS TotalOrders FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee per month?",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS OrdersPerMonth, CONCAT(YEAR(o.OrderDate), '-', MONTH(o.OrderDate)) AS Month FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, Month",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many days does it typically take for orders to be shipped after being placed by each employee?",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageShipTime FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for the month of January 2023?",
        "output": "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(OrderID) FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31') AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed during each day of the week?",
        "output": "SELECT DATEPART(WEEKDAY, OrderDate) AS WeekDay, COUNT(OrderID) AS OrderCount FROM orders GROUP BY DATEPART(WEEKDAY, OrderDate)",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Identify customers who have received a discount greater than 15% on any product.",
        "output": "SELECT DISTINCT customers.CustomerID, customers.CompanyName FROM customers INNER JOIN orders ON customers.CustomerID = orders.CustomerID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE [Order Details].Discount > 0.15;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order value?",
        "output": "SELECT AVG(UnitPrice * Quantity * (1 - Discount)) AS AvgOrderValue FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total freight cost for orders shipped in 2022?",
        "output": "SELECT SUM(orders.Freight) AS total_freight_cost FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by customer 'ALFKI'?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE customers.CustomerID = 'ALFKI';",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many employees have been with the company for more than 10 years?",
        "output": "SELECT COUNT(*) AS YearsWithCompany FROM employees WHERE employees.HireDate <= DATE_SUB(CURRENT_DATE, INTERVAL 10 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total freight cost for all orders?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide products under category ID 5?",
        "output": "SELECT DISTINCT s.SupplierName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.CategoryID = 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the top 5 employees by the number of orders managed in 2022.",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2022 GROUP BY EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the top 5 cities with the highest number of orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS num_orders FROM orders GROUP BY ShipCity ORDER BY num_orders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average time taken to fulfill an order this month?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Determine the total freight cost incurred each month.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the most frequently ordered product?",
        "output": "SELECT [Order Details].ProductID, COUNT([Order Details].OrderID) AS Frequency FROM [Order Details] GROUP BY [Order Details].ProductID ORDER BY Frequency DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the sum of units ordered for products that are not discontinued?",
        "output": "SELECT SUM(od.Quantity) AS TotalUnitsOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE p.Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are there in each category?",
        "output": "SELECT categories.CategoryID, COUNT(products.ProductID) AS ProductCount FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products ordered by a customer with ID 'C0002'?",
        "output": "SELECT SUM([Order Details].Quantity) AS total_quantity FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.CustomerID = 'C0002'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped after the required date for each shipping method?",
        "output": "SELECT ShipVia, COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average number of items per order?",
        "output": "SELECT AVG(Quantity) AS AvgItemsPerOrder FROM [Order Details]",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine which products need to be reordered.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order for the third quarter of 2022?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2022-07-01' AND '2022-09-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units shipped for each product category in the last year?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].Quantity) AS TotalUnitsShipped FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.ShippedDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY categories.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What are the top 5 countries by total sales revenue?",
        "output": "SELECT ShipCountry, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ShipCountry ORDER BY TotalSales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the monthly trend of orders placed over the last year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month ORDER BY Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the total number of orders shipped per month.",
        "output": "SELECT DATE_PART('year', OrderDate) AS Year, DATE_PART('month', OrderDate) AS Month, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY DATE_PART('year', OrderDate), DATE_PART('month', OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee made the highest sales last month?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "List the products with the highest and lowest unit price.",
        "output": "SELECT ProductName FROM products ORDER BY UnitPrice DESC LIMIT 1 UNION ALL SELECT ProductName FROM products ORDER BY UnitPrice ASC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order?",
        "output": "SELECT AVG(Freight) AS AverageShippingCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 3 employees with the fastest average shipping time.",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY AvgShippingTime ASC LIMIT 3;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the highest sales in the last month?",
        "output": "SELECT e.FirstName, e.LastName, e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the sales trend for each product category?",
        "output": "SELECT ProductID, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY ProductID, Month ORDER BY ProductID, Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time taken to fulfill an order for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost per shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AverageFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the percentage of total sales contributed by each product.",
        "output": "SELECT p.ProductName, (SUM(od.Quantity * od.UnitPrice) / (SELECT SUM(od2.Quantity * od2.UnitPrice) FROM [Order Details] od2)) * 100 AS PercentageOfTotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which region has the highest number of customers?",
        "output": "SELECT Region, COUNT(CustomerID) AS TotalCustomers FROM customers GROUP BY Region ORDER BY TotalCustomers DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales value generated last month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which suppliers provided products with the shortest lead times in 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID ORDER BY supplier_lead_time ASC",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of employees working in each country?",
        "output": "SELECT Country, COUNT(EmployeeID) AS EmployeeCount FROM employees GROUP BY Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the month with the highest sales for each employee.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, s.SalesMonth, s.MonthlySales FROM (SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate,'%Y-%m') AS SalesMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, SalesMonth) s JOIN (SELECT EmployeeID, MAX(MonthlySales) AS MaxMonthlySales FROM (SELECT employees.EmployeeID, DATE_FORMAT(orders.OrderDate,'%Y-%m') AS SalesMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS MonthlySales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, SalesMonth) sm GROUP BY EmployeeID) e ON s.EmployeeID = e.EmployeeID AND s.MonthlySales = e.MaxMonthlySales;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount amount given for each product?",
        "output": "SELECT p.ProductID, SUM(od.Discount * od.Quantity * od.UnitPrice) AS TotalDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which supplier provides the most number of products?",
        "output": "SELECT SupplierID, COUNT(*) AS NumberOfProducts FROM products GROUP BY SupplierID ORDER BY NumberOfProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average quantity per unit for products across all categories?",
        "output": "SELECT AVG(CAST(SUBSTRING_INDEX(QuantityPerUnit, ' ', 1) AS UNSIGNED)) AS AvgQuantityPerUnit FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the order fulfillment time distribution between different shipping methods?",
        "output": "SELECT ShipVia, AVG(DATEDIFF(ShippedDate, OrderDate)) AS OrderFulfillmentTime FROM orders GROUP BY ShipVia;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which employees have handled the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) as NumberOfOrders FROM orders GROUP BY EmployeeID ORDER BY NumberOfOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the performance of each product in terms of quantity sold for the month of January 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS product_performance FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY products.ProductID",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest total sales revenue?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY TotalRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers are located in a specific country (e.g., USA)?",
        "output": "SELECT * FROM customers WHERE Country = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest stock value?",
        "output": "SELECT p.ProductName, (p.UnitPrice * p.UnitsInStock) AS StockValue FROM products p ORDER BY StockValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders shipped to each city?",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many distinct products were ordered in the last quarter?",
        "output": "SELECT COUNT(DISTINCT ProductID) AS DistinctProductsOrdered FROM [Order Details] WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee has handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(*) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List orders that were shipped more than 10 days after the order date.",
        "output": "SELECT OrderID FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average reorder level for all products?",
        "output": "SELECT AVG(ReorderLevel) AS avg_reorder_level FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which are the top 5 cities generating the highest sales in 2023?",
        "output": "SELECT orders.ShipCity, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipCity ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has the highest average shipping cost?",
        "output": "SELECT CustomerID, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY CustomerID ORDER BY AverageShippingCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with stock levels below their reorder points.",
        "output": "SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount percentage provided across all orders?",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscountPercentage FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the percentage of late deliveries?",
        "output": "SELECT (COUNT(OrderID) - SUM(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE 0 END)) / COUNT(OrderID) * 100 AS LateDeliveryPercentage FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have inventory levels below their reorder points?",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers by total sales value.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.SupplierID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Get the list of customers along with their total order count and total revenue generated.",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) AS OrderCount, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c INNER JOIN orders o ON c.CustomerID = o.CustomerID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the total sales generated by each employee.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products whose stock falls below the reorder level.",
        "output": "SELECT ProductID, ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify orders that have not been shipped yet.",
        "output": "SELECT * FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time in August 2023?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-08';",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total revenue generated from customers in the USA?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the month with the highest sales for each employee.",
        "output": "SELECT EmployeeID, Year, Month, MaxMonthlySales FROM (SELECT e.EmployeeID, YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales, RANK() OVER (PARTITION BY e.EmployeeID ORDER BY SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) DESC) AS RankSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, YEAR(o.OrderDate), MONTH(o.OrderDate)) RankedSales WHERE RankSales = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers placed orders more than once in 2023?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) AS repeat_customers FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.CustomerID HAVING COUNT(orders.OrderID) > 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which customer placed the most orders in the last year?",
        "output": "SELECT CustomerID, COUNT(OrderID) as NumberOfOrders FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Count the number of employees per country.",
        "output": "SELECT Country, COUNT(*) AS EmployeeCount FROM employees GROUP BY Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total freight cost for orders shipped using ShipperID=2 in 2023?",
        "output": "SELECT SUM(orders.Freight) AS total_freight_cost FROM orders WHERE orders.ShipVia = 2 AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has generated the highest sales in April 2023?",
        "output": "SELECT e.FirstName, e.LastName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS employee_sales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE o.OrderDate BETWEEN '2023-04-01' AND '2023-04-30' GROUP BY e.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average discount applied by each employee for their orders.",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AverageDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average unit price for each product?",
        "output": "SELECT p.ProductID, p.ProductName, AVG(od.UnitPrice) AS AverageUnitPrice FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders have been placed each month for the current year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') as Month, COUNT(OrderID) as TotalOrders FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used the most in January 2023?",
        "output": "SELECT ShipVia, COUNT(ShipVia) AS UsageCount FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees have not shipped any orders in the last quarter?",
        "output": "SELECT EmployeeID FROM employees WHERE EmployeeID NOT IN (SELECT DISTINCT EmployeeID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH));",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total quantities ordered for each product in February 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many units are currently on order for each product?",
        "output": "SELECT ProductID, UnitsOnOrder FROM products",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Who are the top 5 customers based on the number of orders placed?",
        "output": "SELECT CustomerID, COUNT(*) AS order_count FROM orders GROUP BY CustomerID ORDER BY order_count DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the average reorder level across all products.",
        "output": "SELECT AVG(ReorderLevel) AS AvgReorderLevel FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount applied to products in order details?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees achieved the highest total sales in Q2 of 2023?",
        "output": "SELECT employees.EmployeeID, employees.LastName, employees.FirstName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY employees.EmployeeID ORDER BY total_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Find the top 3 products with the most significant increase in sales compared to the previous month.",
        "output": "SELECT p.ProductName, (SUM(CASE WHEN od.OrderDate BETWEEN DATE_SUB(NOW(), INTERVAL 2 MONTH) AND DATE_SUB(NOW(), INTERVAL 1 MONTH) THEN od.Quantity ELSE 0 END) - SUM(CASE WHEN od.OrderDate BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW() THEN od.Quantity ELSE 0 END)) AS SalesIncrease FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName ORDER BY SalesIncrease DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total number of orders for each employee?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales amount for the current month?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE DATE_FORMAT(orders.OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Show the average discount applied on all orders.",
        "output": "SELECT AVG(Discount) AS avg_discount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(*) AS OnTimeDeliveryRate FROM orders GROUP BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the products with the highest and lowest unit prices and their suppliers.",
        "output": "SELECT p.ProductName, p.UnitPrice, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitPrice IN ( SELECT MAX(UnitPrice) FROM products UNION SELECT MIN(UnitPrice) FROM products );",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average number of units in stock per category?",
        "output": "SELECT CategoryID, AVG(UnitsInStock) AS AverageStock FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the sum of freight cost for orders managed by each employee?",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order?",
        "output": "SELECT AVG(orders.Freight) AS avg_shipping_cost_per_order FROM orders",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees whose sales have increased the most over the last year.",
        "output": "SELECT EmployeeID, (TotalSales - PreviousYearSales) AS SalesIncrease FROM (SELECT employees.EmployeeID, SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURDATE()) - 1 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) AS TotalSales, SUM(CASE WHEN YEAR(orders.OrderDate) = YEAR(CURDATE()) - 2 THEN [Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount) ELSE 0 END) AS PreviousYearSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID) AS EmployeeSales;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What was the total revenue generated from orders in the year 2022?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide the most products?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID ORDER BY ProductCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the on-time delivery rate for the current month?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE ShippedDate <= RequiredDate)::DECIMAL / COUNT(OrderID)) * 100 AS OnTimeDeliveryRate FROM orders WHERE DATE_PART('month', OrderDate) = DATE_PART('month', CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total inventory turnover ratio for the year 2022?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the top 5 cities in terms of the number of shipped orders.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShipCity ORDER BY NumberOfOrders DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Compute the total freight cost incurred for orders handled by each employee.",
        "output": "SELECT e.EmployeeID, SUM(o.Freight) AS TotalFreight FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders placed by employees in each country?",
        "output": "SELECT employees.EmployeeID, employees.Country, COUNT(orders.OrderID) AS OrderCount FROM employees INNER JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID, employees.Country",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value?",
        "output": "SELECT AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AverageOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the distribution of orders by shipping region for 2023?",
        "output": "SELECT orders.ShipRegion, COUNT(orders.OrderID) AS order_count FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipRegion",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average time taken to fulfill an order in February 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee in the last month?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which country has the highest number of orders shipped in the year 2023?",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS NumberOfOrders FROM orders WHERE YEAR(OrderDate) = 2023 GROUP BY ShipCountry ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the top 5 products by units sold in the last month.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS UnitsSold FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderDate >= DATEADD(month, -1, CURRENT_TIMESTAMP) GROUP BY p.ProductID, p.ProductName ORDER BY UnitsSold DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest total order quantities?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS TotalOrderQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID ORDER BY TotalOrderQuantity DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity of products ordered for a specific month (for example, '2023-09')?",
        "output": "SELECT SUM([Order Details].Quantity) AS TotalQuantityOrdered FROM [Order Details] WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-09';",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which region has the highest total sales?",
        "output": "SELECT ShipRegion, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.ShipRegion ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the highest salary among all employees and who earns it?",
        "output": "SELECT EmployeeID, FirstName, LastName, Salary FROM employees WHERE Salary = (SELECT MAX(Salary) FROM employees);",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by each employee in Q2 2023?",
        "output": "SELECT o.EmployeeID, COUNT(o.OrderID) AS OrderCount FROM orders o WHERE o.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY o.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of each product ordered?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company (ShipVia) has the highest average freight cost?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia ORDER BY AvgFreightCost DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many unique customers placed orders each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders GROUP BY month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Who are the top 5 customers by revenue?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) as TotalRevenue FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Retrieve the names of products supplied by a specific supplier (for example, SupplierID = 1).",
        "output": "SELECT ProductName FROM products WHERE SupplierID = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales value of orders shipped by each shipping company in 2022?",
        "output": "SELECT shippers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY shippers.CompanyName",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the total number of units ordered from each supplier.",
        "output": "SELECT s.CompanyName, SUM(od.Quantity) AS TotalUnits FROM suppliers s INNER JOIN products p ON s.SupplierID = p.SupplierID INNER JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total number of unique products sold by each employee.",
        "output": "SELECT e.EmployeeID, COUNT(DISTINCT od.ProductID) AS UniqueProducts FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY UniqueProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have the highest quantity per unit?",
        "output": "SELECT ProductID, ProductName, QuantityPerUnit FROM products ORDER BY QuantityPerUnit DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many suppliers delivered products on time in 2022?",
        "output": "SELECT suppliers.SupplierID, COUNT(DISTINCT orders.OrderID) AS on_time_deliveries FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE orders.ShippedDate <= orders.RequiredDate AND orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY suppliers.SupplierID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees who have not placed any orders.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders shipped by each shipping method?",
        "output": "SELECT orders.ShipVia, COUNT(*) AS TotalShippedOrders FROM orders GROUP BY orders.ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders delivered on or before the required date in April 2023?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 ELSE NULL END) * 100.0 / COUNT(*) AS OnTimeDeliveryRate FROM orders WHERE MONTH(OrderDate) = 4 AND YEAR(OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which countries have the most suppliers?",
        "output": "SELECT Country, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY Country ORDER BY SupplierCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the monthly product performance score for each product.",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS PerformanceScore FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have hired before the year 2000?",
        "output": "SELECT * FROM employees WHERE HireDate < '2000-01-01';",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the performance of products based on sales and inventory levels?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSold, products.UnitsInStock FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName, products.UnitsInStock ORDER BY TotalSold DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest total sales this year?",
        "output": "SELECT MONTH(OrderDate) AS Month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY MONTH(OrderDate) ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping company has the highest on-time delivery rate for 2023?",
        "output": "SELECT s.CompanyName, COUNT(o.OrderID) FILTER (WHERE o.ShippedDate <= o.RequiredDate) / COUNT(o.OrderID) AS on_time_delivery_rate FROM orders o JOIN shippers s ON o.ShipVia = s.ShipperID GROUP BY s.CompanyName ORDER BY on_time_delivery_rate DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on or before the required date in 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average discount applied to products?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the average order value for March 2023.",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the top 5 suppliers based on the total number of units supplied.",
        "output": "SELECT s.CompanyName, SUM(p.UnitsInStock) AS TotalUnits FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName ORDER BY TotalUnits DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many discontinued products are there?",
        "output": "SELECT COUNT(*) FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are from each country?",
        "output": "SELECT Country, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY Country;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the total sales generated by employees in each region.",
        "output": "SELECT Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value by month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / COUNT(DISTINCT o.OrderID) AS AverageOrderValue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the average discount given on each product.",
        "output": "SELECT p.ProductName, AVG(od.Discount) AS AverageDiscount FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employees generated the highest sales in Q3 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total discount given on each product in order details?",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].Discount * [Order Details].Quantity * [Order Details].UnitPrice) AS TotalDiscountGiven FROM [Order Details] GROUP BY [Order Details].ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "For each product, what is the average discount applied in orders?",
        "output": "SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped in the month of January 2023?",
        "output": "SELECT COUNT(*) AS OrdersInJanuary FROM orders WHERE MONTH(ShippedDate) = 1 AND YEAR(ShippedDate) = 2023;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of orders shipped within the last year?",
        "output": "SELECT COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate >= DATE_ADD(CURDATE(), INTERVAL -1 YEAR);",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped late (after the required date) in 2022?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate AND YEAR(OrderDate) = 2022;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by employees grouped by title?",
        "output": "SELECT Title, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Title;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Get the list of orders that were not shipped on time.",
        "output": "SELECT o.OrderID, o.RequiredDate, o.ShippedDate FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the top 5 employees by total sales.",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many units of 'Chocolade' are currently in stock?",
        "output": "SELECT UnitsInStock FROM products WHERE ProductName = 'Chocolade';",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the percentage of orders that were shipped late?",
        "output": "SELECT ROUND((COUNT(OrderID) FILTER (WHERE ShippedDate > RequiredDate) * 1.0 / COUNT(OrderID)), 2) * 100 AS LateShipmentsPercentage FROM orders;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed each day by each employee?",
        "output": "SELECT e.EmployeeID, o.OrderDate, COUNT(o.OrderID) as OrdersByDay FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID, o.OrderDate;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "List employees handling orders exceeding a certain quantity of products.",
        "output": "SELECT e.EmployeeID, COUNT(*) AS OrdersOverLimit FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE od.Quantity > ? GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units sold and their total revenue for each month in the current year?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsSold, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue, EXTRACT(MONTH FROM o.OrderDate) AS Month FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID WHERE EXTRACT(YEAR FROM o.OrderDate) = YEAR(CURRENT_DATE()) GROUP BY p.ProductName, EXTRACT(MONTH FROM o.OrderDate);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the suppliers who have never supplied a discontinued product.",
        "output": "SELECT s.SupplierID, s.CompanyName FROM suppliers s LEFT JOIN products p ON s.SupplierID = p.SupplierID WHERE p.Discontinued IS NULL OR p.Discontinued = 0;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed in the last month?",
        "output": "SELECT COUNT(OrderID) AS OrderCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify the top 3 products with the highest total revenue.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee territory generated the most sales revenue in 2023?",
        "output": "SELECT territories.TerritoryDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID JOIN employeeTerritories ON employees.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY territories.TerritoryDescription ORDER BY total_sales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average supplier lead time for deliveries?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AverageLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total revenue for each supplier?",
        "output": "SELECT p.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which region has the highest sales?",
        "output": "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average shipping cost of the orders?",
        "output": "SELECT AVG(Freight) AS AverageFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped out within three days of being placed?",
        "output": "SELECT COUNT(*) FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 3;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product were sold this month?",
        "output": "SELECT P.ProductName, SUM(OD.Quantity) AS TotalSold FROM [Order Details] AS OD JOIN products AS P ON OD.ProductID = P.ProductID WHERE DATE_FORMAT(NOW(), '%Y-%m') = DATE_FORMAT(OD.OrderDate, '%Y-%m') GROUP BY P.ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not been ordered at all?",
        "output": "SELECT ProductName FROM products LEFT JOIN [Order Details] ON products.ProductID = [Order Details].ProductID WHERE [Order Details].ProductID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the total sales revenue generated by each product category in Q2 of 2023.",
        "output": "SELECT products.ProductCategory, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY products.ProductCategory",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What percentage of orders were delivered on-time in April 2023?",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders WHERE OrderDate BETWEEN '2023-04-01' AND '2023-04-30') AS OnTimeDeliveryRate FROM orders o WHERE o.OrderDate BETWEEN '2023-04-01' AND '2023-04-30' AND o.ShippedDate <= o.RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales for the year 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee generated the highest total sales?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the overall average time taken to fulfill an order?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many different products does each supplier provide?",
        "output": "SELECT SupplierID, COUNT(ProductID) AS ProductCount FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the unit price of products that have never been discounted.",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE Discount > 0);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the product performance based on sales for each month.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity, DATE_FORMAT(od.OrderDate, '%Y-%m') AS Month FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average discount given on orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers have placed more than three orders in 2022?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS order_count FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY customers.CustomerID HAVING order_count > 3",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "List products with no orders in the last month.",
        "output": "SELECT p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL OR od.OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the highest priced product in each category?",
        "output": "SELECT CategoryID, MAX(UnitPrice) AS HighestPrice FROM products GROUP BY CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the orders that have the highest freight cost in each month of 2023.",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, OrderID, MAX(Freight) AS MaxFreightCost FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = '2023' GROUP BY OrderMonth",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have handled more than 50 orders in the last month?",
        "output": "SELECT employees.EmployeeID FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID HAVING COUNT(orders.OrderID) > 50 AND MAX(orders.OrderDate) >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the distribution of orders across different countries?",
        "output": "SELECT orders.ShipCountry, COUNT(orders.OrderID) AS Total_Orders FROM orders GROUP BY orders.ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the highest average unit price for their products?",
        "output": "SELECT c.CategoryName, AVG(p.UnitPrice) AS AverageUnitPrice FROM categories c INNER JOIN products p ON c.CategoryID = p.CategoryID GROUP BY c.CategoryName ORDER BY AverageUnitPrice DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which customer has the highest lifetime value to the company?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS customer_lifetime_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID GROUP BY customers.CustomerID ORDER BY customer_lifetime_value DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of discontinued products supplied by each supplier?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS DiscontinuedProducts FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1 GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which employee has generated the highest sales in February 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all products with at least 100 units in stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock >= 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total revenue generated per month?",
        "output": "SELECT YEAR(o.OrderDate) AS Year, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY YEAR(o.OrderDate), MONTH(o.OrderDate);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total freight cost for each shipping method.",
        "output": "SELECT ShipVia, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the reorder level for each product?",
        "output": "SELECT ProductID, ReorderLevel FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount given across all orders?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average unit price of products supplied by each supplier?",
        "output": "SELECT s.CompanyName, AVG(p.UnitPrice) AS AverageUnitPrice FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID GROUP BY s.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total number of products sold in each region?",
        "output": "SELECT c.Region, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated from orders handled by each employee?",
        "output": "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for orders shipped to the USA?",
        "output": "SELECT SUM(Freight) AS TotalFreight FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order amount per customer?",
        "output": "SELECT customers.CustomerID, customers.CompanyName, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderAmount FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID, customers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products that have never been ordered.",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details]);",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has the highest sales in the last quarter?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY employees.EmployeeID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average lead time for suppliers in Q1 2022?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN products ON orders.ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY products.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped via each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How much time on average does it take to fulfill an order?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales and the number of orders for each customer located in the USA in 2023?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales, COUNT(orders.OrderID) AS total_orders FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA' AND orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product had the highest total sales in March 2023?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE MONTH(o.OrderDate) = 3 AND YEAR(o.OrderDate) = 2023 GROUP BY od.ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average sales per customer for customers located in France?",
        "output": "SELECT AVG(total_sales_per_customer) FROM (SELECT orders.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales_per_customer FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'France' GROUP BY orders.CustomerID) AS customer_sales",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average time it takes for employees to fulfill an order?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the products with a stock level below the reorder level and have ongoing orders.",
        "output": "SELECT products.ProductName FROM products WHERE products.UnitsInStock < products.ReorderLevel AND products.UnitsOnOrder > 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has the highest reorder level?",
        "output": "SELECT ProductID FROM products ORDER BY ReorderLevel DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "List the top 5 cities by number of orders placed in the current year.",
        "output": "SELECT ShipCity, COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = YEAR(CURDATE()) GROUP BY ShipCity ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product were sold last month?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalSold FROM [Order Details] WHERE DATEPART(month, GETDATE()) - DATEPART(month, OrderDate) = 1 GROUP BY ProductID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which suppliers provide products that need reordering?",
        "output": "SELECT DISTINCT suppliers.SupplierName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.UnitsInStock <= products.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the distinct product categories available?",
        "output": "SELECT DISTINCT CategoryID FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total sales value generated by each product category?",
        "output": "SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the monthly inventory turnover ratio for each product.",
        "output": "SELECT ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS MonthlyInventoryTurnoverRatio FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductID ORDER BY MonthlyInventoryTurnoverRatio DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on or before the required date in July 2023?",
        "output": "SELECT COUNT(orders.OrderID) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' AND orders.ShippedDate <= orders.RequiredDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products have more units on order than in stock?",
        "output": "SELECT ProductID, UnitsInStock, UnitsOnOrder FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the top 5 products by revenue?",
        "output": "SELECT P.ProductName, SUM(OD.Quantity * OD.UnitPrice) AS TotalRevenue FROM [Order Details] OD JOIN products P ON OD.ProductID = P.ProductID GROUP BY P.ProductID, P.ProductName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for each product in 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.ProductID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Calculate the average sales per order for each employee.",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSalesPerOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the total sales per category?",
        "output": "SELECT c.CategoryID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryID",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What percentage of orders were delivered on time in April 2023?",
        "output": "SELECT COUNT(CASE WHEN orders.ShippedDate <= orders.RequiredDate THEN 1 END) / COUNT(orders.OrderID) AS on_time_delivery_rate FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-04-30'",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city received the most orders?",
        "output": "SELECT o.ShipCity, COUNT(o.OrderID) AS OrderCount FROM orders o GROUP BY o.ShipCity ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the number of orders that were not delivered on time.",
        "output": "SELECT COUNT(*) as NumberOfLateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the most products in stock?",
        "output": "SELECT categories.CategoryName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product had the highest sales in 2022?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped after the required date?",
        "output": "SELECT COUNT(OrderID) AS late_orders FROM orders WHERE ShippedDate > RequiredDate",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Get the total number of customers in the database.",
        "output": "SELECT COUNT(*) FROM customers;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many different products do not have any units on order?",
        "output": "SELECT COUNT(ProductID) AS NumProductsWithoutOrder FROM products WHERE UnitsOnOrder = 0;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the top 5 customers based on their total order value.",
        "output": "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalOrderValue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY CustomerID ORDER BY TotalOrderValue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List the top 5 customers by the number of orders placed.",
        "output": "SELECT CustomerID, COUNT(OrderID) AS order_count FROM orders GROUP BY CustomerID ORDER BY order_count DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the top 5 products by total sales revenue?",
        "output": "SELECT p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How does the inventory turnover ratio vary each month in 2023?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY month",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee has offered the highest discount on an order?",
        "output": "SELECT e.EmployeeID, MAX(od.Discount) AS MaxDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID ORDER BY MaxDiscount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What percentage of orders were delivered on time?",
        "output": "SELECT COUNT(OrderID) * 100.0 / (SELECT COUNT(*) FROM orders) AS on_time_delivery_rate FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Calculate the average discount given per order in December 2022.",
        "output": "SELECT AVG(OD.Discount) AS AverageDiscount FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') = '2022-12';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the names and prices of all products?",
        "output": "SELECT ProductName, UnitPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders have been placed each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, COUNT(OrderID) AS OrderCount FROM orders GROUP BY OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which customers have placed the most orders?",
        "output": "SELECT customers.CustomerID, COUNT(orders.OrderID) AS TotalOrders FROM customers INNER JOIN orders ON customers.CustomerID = orders.CustomerID GROUP BY customers.CustomerID ORDER BY TotalOrders DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were fulfilled on time in December 2023?",
        "output": "SELECT COUNT(*) AS on_time_fulfillment_count FROM orders WHERE orders.RequiredDate >= orders.ShippedDate AND orders.OrderDate BETWEEN '2023-12-01' AND '2023-12-31'",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the inventory turnover ratio on a monthly basis.",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth, (SUM([Order Details].Quantity * [Order Details].UnitPrice) / NULLIF(AVG(products.UnitsInStock), 0)) AS InventoryTurnoverRatio FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost incurred per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were placed by EmployeeID = 5 in 2022?",
        "output": "SELECT COUNT(OrderID) AS OrderCount FROM orders WHERE YEAR(OrderDate) = 2022 AND EmployeeID = 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee took the highest number of orders?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS OrderCount FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a reorder level higher than 50 units?",
        "output": "SELECT ProductName FROM products WHERE ReorderLevel > 50;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product are currently on order?",
        "output": "SELECT ProductID, ProductName, UnitsOnOrder FROM products WHERE UnitsOnOrder > 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Retrieve products with a stock level below the reorder level and their suppliers.",
        "output": "SELECT p.ProductName, p.UnitsInStock, s.CompanyName FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID WHERE p.UnitsInStock < p.ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time in 2023?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY products.SupplierID ORDER BY supplier_lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many customers are from the USA?",
        "output": "SELECT COUNT(*) AS customer_count FROM customers WHERE Country = 'USA'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the most popular product based on the quantity ordered.",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantityOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalQuantityOrdered DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What was the highest single order value in 2023?",
        "output": "SELECT MAX(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MaxOrderValue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE YEAR(o.OrderDate) = 2023;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped on or before the required date?",
        "output": "SELECT COUNT(OrderID) AS on_time_deliveries FROM orders WHERE ShippedDate <= RequiredDate;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the name and UnitPrice of the most expensive product?",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the products that have not been sold in the last year.",
        "output": "SELECT p.ProductID, p.ProductName FROM products p LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.OrderID IS NULL OR od.OrderDate < DATEADD(year, -1, CURRENT_TIMESTAMP);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total value of inventory currently in stock.",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalInventoryValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for the current month?",
        "output": "SELECT AVG(Freight) AS AverageShippingCost FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m');",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been discontinued?",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier supplies the highest number of products, and how many products do they supply?",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName, COUNT(products.ProductID) AS NumberOfProducts FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.SupplierID ORDER BY NumberOfProducts DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the number of employees in each country.",
        "output": "SELECT Country, COUNT(*) AS EmployeeCount FROM employees GROUP BY Country;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average shipping cost per order in 2021?",
        "output": "SELECT AVG(orders.Freight) AS shipping_cost_per_order FROM orders WHERE orders.OrderDate BETWEEN '2021-01-01' AND '2021-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the highest sales amount generated by a single employee in a single month?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, DATE_FORMAT(orders.OrderDate, '%Y-%m') AS OrderMonth FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID, OrderMonth ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have never delivered an order late?",
        "output": "SELECT s.CompanyName FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID LEFT JOIN [Order Details] od ON p.ProductID = od.ProductID LEFT JOIN orders o ON od.OrderID = o.OrderID WHERE o.ShippedDate <= o.RequiredDate GROUP BY s.CompanyName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units are on order for each product?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales for each product in the last month?",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY p.ProductID, p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average order value for each customer?",
        "output": "SELECT orders.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY orders.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Find the average shipping cost per country.",
        "output": "SELECT ShipCountry, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the suppliers in Germany?",
        "output": "SELECT CompanyName FROM suppliers WHERE Country = 'Germany';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were fulfilled within the promised shipping window in 2023?",
        "output": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM orders WHERE YEAR(OrderDate) = 2023) AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate AND YEAR(OrderDate) = 2023;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order amount for each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) as AvgOrderAmount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales generated by employee for the last month?",
        "output": "SELECT EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.OrderDate >= DATEADD(MONTH, -1, DATE_TRUNC('month', CURRENT_DATE)) GROUP BY EmployeeID ORDER BY TotalSales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total discount given on all orders?",
        "output": "SELECT SUM(Discount) AS TotalDiscount FROM [Order Details]",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total number of orders processed by each employee?",
        "output": "SELECT employees.EmployeeID, employees.FirstName, employees.LastName, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employee handled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the most profitable product category in 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY categories.CategoryName ORDER BY total_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total quantity of products ordered per customer?",
        "output": "SELECT c.CustomerID, SUM(od.Quantity) AS TotalQuantity FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average time taken to ship an order.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_shipping_time FROM orders WHERE ShippedDate IS NOT NULL",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which products have been ordered more than 10 times?",
        "output": "SELECT ProductID, COUNT(*) AS OrderCount FROM [Order Details] GROUP BY ProductID HAVING OrderCount > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Identify the employee who handled the most orders in 2023.",
        "output": "SELECT o.EmployeeID, COUNT(*) AS OrderCount FROM orders o WHERE DATE_FORMAT(o.OrderDate, '%Y') = '2023' GROUP BY o.EmployeeID ORDER BY OrderCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "List all orders placed by customer ID 'C123' in December 2023",
        "output": "SELECT * FROM orders o WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = '2023-12' AND o.CustomerID = 'C123';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product categories have the highest sales revenue?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY total_sales DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total sales (units * unit price) for each product considering the discount applied?",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice * (1 - od.Discount)) AS TotalSales FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest total sales revenue?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_FORMAT(OrderDate, '%Y-%m') ORDER BY TotalSales DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(*) AS OrderCount FROM orders GROUP BY EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the regions with the highest number of active suppliers.",
        "output": "SELECT s.Region, COUNT(DISTINCT s.SupplierID) AS ActiveSuppliers FROM suppliers s WHERE s.SupplierID IN (SELECT DISTINCT SupplierID FROM products WHERE Discontinued = 0) GROUP BY s.Region ORDER BY ActiveSuppliers DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with high revenue but low stock levels.",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue, products.UnitsInStock FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName HAVING TotalRevenue > 1000 AND products.UnitsInStock < 50;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which month had the highest total sales revenue last year?",
        "output": "SELECT MONTH(orders.OrderDate) AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS Total_Sales_Revenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURRENT_DATE - INTERVAL 1 YEAR) GROUP BY OrderMonth ORDER BY Total_Sales_Revenue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost for orders shipped to 'France'?",
        "output": "SELECT AVG(Freight) AS AverageFreight FROM orders WHERE ShipCountry = 'France';",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for all orders in the current quarter?",
        "output": "SELECT SUM(Freight) FROM orders WHERE QUARTER(OrderDate) = QUARTER(CURDATE()) AND YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many days on average does it take to fulfill an order?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders WHERE ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not placed any orders?",
        "output": "SELECT * FROM employees WHERE EmployeeID NOT IN (SELECT EmployeeID FROM orders);",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who is the highest-performing employee in terms of sales for February 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' GROUP BY employees.EmployeeID ORDER BY employee_sales DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for shipped orders?",
        "output": "SELECT SUM(o.Freight) AS TotalFreightCost FROM orders o WHERE o.ShippedDate IS NOT NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue generated from orders with over 20 items?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE od.Quantity > 20",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products belong to each category?",
        "output": "SELECT CategoryID, COUNT(ProductID) AS ProductCount FROM products GROUP BY CategoryID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost incurred for all orders?",
        "output": "SELECT SUM(Freight) as TotalFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total number of units on order for each product?",
        "output": "SELECT ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average quantity ordered per product?",
        "output": "SELECT p.ProductName, AVG(od.Quantity) AS AvgQuantityOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all discontinued products and their suppliers.",
        "output": "SELECT products.ProductID, products.ProductName, suppliers.CompanyName FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID WHERE products.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all discontinued products.",
        "output": "SELECT ProductID, ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of on-time deliveries for the past quarter?",
        "output": "SELECT COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) / COUNT(*) * 100 AS OnTimeDeliveryRate FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') >= DATE_FORMAT(NOW() - INTERVAL 3 MONTH, '%Y-%m')",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount provided on orders in 2022?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List all orders that were never shipped.",
        "output": "SELECT * FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time for orders placed in 2022?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS order_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total discount given in each month?",
        "output": "SELECT DATE_TRUNC('month', o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * od.Discount) AS TotalDiscount FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY DATE_TRUNC('month', o.OrderDate);",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Which regions have the most returning customers?",
        "output": "SELECT Region, COUNT(DISTINCT customers.CustomerID) AS ReturningCustomers FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method is used the most frequently?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS UsageCount FROM orders GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Determine the inventory turnover ratio on a monthly basis.",
        "output": "SELECT DATE_FORMAT(od.OrderDate, '%Y-%m') AS Month, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM [Order Details] od INNER JOIN products p ON od.ProductID = p.ProductID GROUP BY DATE_FORMAT(od.OrderDate, '%Y-%m');",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the highest freight cost for any single order?",
        "output": "SELECT MAX(Freight) AS HighestFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average order value for each customer?",
        "output": "SELECT customers.CustomerID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM customers INNER JOIN orders ON customers.CustomerID = orders.CustomerID INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY customers.CustomerID",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which employees have fulfilled the most orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated by EmployeeID 3?",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.EmployeeID = 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which month had the highest number of orders shipped?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(OrderID) AS OrdersShipped FROM orders GROUP BY Month ORDER BY OrdersShipped DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Identify the orders which have not been shipped yet.",
        "output": "SELECT * FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which categories have the highest number of products?",
        "output": "SELECT CategoryID, COUNT(*) AS NumberOfProducts FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many different products are offered by each supplier?",
        "output": "SELECT SupplierID, COUNT(DISTINCT ProductID) AS ProductCount FROM products GROUP BY SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated from a customer with ID 'C0001'?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM orders INNER JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE orders.CustomerID = 'C0001'",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many orders include products that received a discount of more than 10%?",
        "output": "SELECT COUNT(DISTINCT OrderID) AS OrdersWithHighDiscount FROM [Order Details] WHERE Discount > 0.1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have the highest sales quantity?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalSalesQuantity FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY TotalSalesQuantity DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers are there in each region?",
        "output": "SELECT Region, COUNT(CustomerID) as NumberOfCustomers FROM customers GROUP BY Region;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many distinct products does each supplier supply?",
        "output": "SELECT suppliers.CompanyName, COUNT(DISTINCT products.ProductID) AS DistinctProducts FROM suppliers INNER JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity and total revenue for each product category?",
        "output": "SELECT c.CategoryID, c.CategoryName, SUM(od.Quantity) AS TotalQuantity, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for orders shipped to each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were placed in the last month?",
        "output": "SELECT COUNT(*) AS TotalOrders FROM orders WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total number of units in stock for each product category?",
        "output": "SELECT categories.CategoryName, SUM(products.UnitsInStock) AS total_units_in_stock FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the average freight cost per order.",
        "output": "SELECT AVG(Freight) AS AverageFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders that were shipped on or before the required date each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 1.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the order fulfillment time for January 2023?",
        "output": "SELECT AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgFulfillmentTime FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories have the highest total sales value?",
        "output": "SELECT products.CategoryID, SUM([Order Details].UnitPrice * [Order Details].Quantity) AS TotalSalesValue FROM [Order Details] INNER JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.CategoryID ORDER BY TotalSalesValue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the total sales per supplier.",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders were placed by each employee?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS TotalOrders FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product has the highest inventory value (UnitsInStock * UnitPrice)?",
        "output": "SELECT ProductID, ProductName, (UnitsInStock * UnitPrice) AS InventoryValue FROM products ORDER BY InventoryValue DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average discount given by employees?",
        "output": "SELECT e.EmployeeID, AVG(od.Discount) AS AvgDiscount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order quantity per order?",
        "output": "SELECT AVG(Quantity) AS AverageOrderQuantity FROM [Order Details];",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to all orders?",
        "output": "SELECT AVG(Discount) FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the average unit price of products per category.",
        "output": "SELECT c.CategoryID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p JOIN categories c ON p.CategoryID = c.CategoryID GROUP BY c.CategoryID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the top 5 employees based on the number of orders handled.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS OrderCount FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID ORDER BY OrderCount DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have a birthday this month?",
        "output": "SELECT * FROM employees WHERE strftime('%m', BirthDate) = strftime('%m', DATE('now'));",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who were hired after the year 2000.",
        "output": "SELECT * FROM employees WHERE HireDate > '2000-01-01'",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products by category?",
        "output": "SELECT CategoryID, AVG(UnitPrice) AS AvgUnitPrice FROM products GROUP BY CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the top 5 products by total sales revenue?",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY products.ProductName ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the 10 most frequently ordered products.",
        "output": "SELECT ProductID, COUNT(OrderID) AS OrderFrequency FROM [Order Details] GROUP BY ProductID ORDER BY OrderFrequency DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum freight cost for an order?",
        "output": "SELECT MAX(Freight) AS MaxFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers have the highest inventory turnover ratio?",
        "output": "SELECT s.SupplierID, (SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock)) as InventoryTurnoverRatio FROM [Order Details] od JOIN products p ON p.ProductID = od.ProductID JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID ORDER BY InventoryTurnoverRatio DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which shipping method is used most frequently for orders shipped in 2023?",
        "output": "SELECT orders.ShipVia, COUNT(orders.OrderID) AS shipping_count FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY orders.ShipVia ORDER BY shipping_count DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify employees who have never handled an order.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product has generated the highest total sales revenue?",
        "output": "SELECT [Order Details].ProductID, products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers are associated with discontinued products?",
        "output": "SELECT DISTINCT suppliers.SupplierName FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE products.Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost incurred for all shipments?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Average order fulfilment time per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS average_fulfillment_time FROM orders GROUP BY month ORDER BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Identify products with at least one order that had a discount greater than 10%.",
        "output": "SELECT DISTINCT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Discount > 0.1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which month had the highest inventory turnover ratio in the past year?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, SUM([Order Details].Quantity * [Order Details].UnitPrice) / (SELECT AVG(UnitsInStock) FROM products WHERE products.Discontinued = 0) AS InventoryTurnoverRatio FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Month ORDER BY InventoryTurnoverRatio DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total revenue for each product category?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List suppliers who have never had a discontinued product.",
        "output": "SELECT suppliers.SupplierID, suppliers.CompanyName FROM suppliers WHERE suppliers.SupplierID NOT IN (SELECT SupplierID FROM products WHERE Discontinued = 1);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the average quantity per unit for all products?",
        "output": "SELECT AVG(QuantityPerUnit) FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue generated for each product category?",
        "output": "SELECT ProductCategory, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY ProductCategory ORDER BY TotalSales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the employees who report to the same manager.",
        "output": "SELECT e1.EmployeeID, e1.FirstName, e1.LastName FROM employees e1 JOIN employees e2 ON e1.ReportsTo = e2.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total quantity sold for each product this month?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalQuantity FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE MONTH(od.OrderDate) = MONTH(CURDATE()) GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have more than 100 units in stock?",
        "output": "SELECT ProductID, ProductName, UnitsInStock FROM products WHERE UnitsInStock > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customers have placed more than 10 orders in the last six months?",
        "output": "SELECT CustomerID FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY CustomerID HAVING COUNT(*) > 10;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity ordered and the total revenue for each product?",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method is used the most?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrderCount FROM orders GROUP BY ShipVia ORDER BY OrderCount DESC",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of unique customers?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have products with more than 5 units on order?",
        "output": "SELECT s.CompanyName FROM suppliers s INNER JOIN products p ON s.SupplierID = p.SupplierID WHERE p.UnitsOnOrder > 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to products?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details];",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have not handled any orders?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e LEFT JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.OrderID IS NULL;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average number of days past the required date for late deliveries?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, RequiredDate)) as AvgLateDays FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total revenue generated by each customer over their lifetime?",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS LifetimeValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order quantity per employee?",
        "output": "SELECT employees.EmployeeID, AVG([Order Details].Quantity) AS AvgOrderQuantity FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the names of employees who have generated more than $100,000 in sales?",
        "output": "SELECT CONCAT(FirstName, ' ', LastName) AS EmployeeName FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID HAVING SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) > 100000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify products with stock below their reorder level.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which city received the highest number of shipments in the past quarter?",
        "output": "SELECT ShipCity, COUNT(*) AS TotalShipments FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY ShipCity ORDER BY TotalShipments DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employee reports to the manager with EmployeeID 5?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName FROM employees e WHERE e.ReportsTo = 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average unit price of products supplied by each supplier?",
        "output": "SELECT p.SupplierID, AVG(p.UnitPrice) AS AverageUnitPrice FROM products p GROUP BY p.SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What's the on-time delivery rate for the last quarter of 2023?",
        "output": "SELECT COUNT(orders.OrderID) AS on_time_delivery_count, COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) AS on_time_deliveries FROM orders WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-12-31' HAVING on_time_delivery_count > 0 AND COUNT(orders.OrderID WHERE orders.ShippedDate <= orders.RequiredDate) / on_time_delivery_count AS on_time_delivery_rate",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders placed by each employee?",
        "output": "SELECT EmployeeID, COUNT(*) AS order_count FROM orders GROUP BY EmployeeID ORDER BY order_count DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which categories have the most number of products with stock below the reorder level?",
        "output": "SELECT c.CategoryID, c.CategoryName, COUNT(p.ProductID) AS ProductsBelowReorderLevel FROM categories c JOIN products p ON c.CategoryID = p.CategoryID WHERE p.UnitsInStock < p.ReorderLevel GROUP BY c.CategoryID, c.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total revenue lost due to discounts this year?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * [Order Details].Discount) AS LostRevenue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = YEAR(CURDATE())",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which shipping method was used most frequently last month?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS ShipCount FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, DATE_TRUNC('month', CURRENT_DATE)) GROUP BY ShipVia ORDER BY ShipCount DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List the top 10 products by revenue for each customer.",
        "output": "SELECT c.CustomerID, od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS Revenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID, od.ProductID ORDER BY Revenue DESC LIMIT 10;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "List all orders that were shipped 5 days earlier than the required date in 2023.",
        "output": "SELECT * FROM orders WHERE DATEDIFF(RequiredDate, ShippedDate) = 5 AND DATE_FORMAT(OrderDate, '%Y') = '2023'",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 3 customers by total sales in 2023?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY total_sales DESC LIMIT 3",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product has the highest sales volume (quantity sold) in February 2023?",
        "output": "SELECT products.ProductID, SUM([Order Details].Quantity) AS total_quantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28' GROUP BY products.ProductID ORDER BY total_quantity DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest lead time for delivering products?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS supplier_lead_time FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY products.SupplierID ORDER BY supplier_lead_time ASC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and prices of all products that have been discontinued?",
        "output": "SELECT ProductName, UnitPrice FROM products WHERE Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average number of units in stock for all products?",
        "output": "SELECT AVG(products.UnitsInStock) AS avg_units_in_stock FROM products",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "For each supplier, determine the average reorder level of their products.",
        "output": "SELECT suppliers.SupplierID, AVG(products.ReorderLevel) AS AverageReorderLevel FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.SupplierID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which territory had the highest average order value in 2023?",
        "output": "SELECT territories.TerritoryID, AVG([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID GROUP BY territories.TerritoryID ORDER BY avg_order_value DESC LIMIT 1",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List all products that are currently out of stock.",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total number of units ordered for each product?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalUnitsOrdered FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a unit price greater than the average unit price of all products?",
        "output": "SELECT COUNT(*) FROM products WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM products);",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total value of all orders (considering unit price and quantity)?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) AS TotalOrderValue FROM [Order Details] od;",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average number of orders placed by each customer per year.",
        "output": "SELECT c.CustomerID, COUNT(o.OrderID) / (DATE_PART('year', age(MAX(o.OrderDate), MIN(o.OrderDate))) + 1) AS AvgOrdersPerYear FROM customers c INNER JOIN orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the monthly trend of average order value for 2022?",
        "output": "SELECT MONTH(orders.OrderDate) AS order_month, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS avg_order_value FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY order_month ORDER BY order_month",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier has the highest total sales?",
        "output": "SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products are currently below their reorder level?",
        "output": "SELECT products.ProductID, products.ProductName FROM products WHERE products.UnitsInStock < products.ReorderLevel",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total number of orders placed by each customer?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY CustomerID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have a stock level below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "How many products have been discontinued and what is their total value in inventory?",
        "output": "SELECT p.ProductID, p.ProductName, p.UnitsInStock * p.UnitPrice AS TotalValue FROM products p WHERE p.Discontinued = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the average number of products per order in 2023.",
        "output": "SELECT AVG([Order Details].Quantity) AS AvgProductsPerOrder FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE DATE_FORMAT(OrderDate, '%Y') = '2023'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List all orders with a freight cost greater than $100.",
        "output": "SELECT * FROM orders WHERE Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders have no shipped date recorded?",
        "output": "SELECT COUNT(*) AS OrdersWithNoShippedDate FROM orders WHERE ShippedDate IS NULL;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many distinct customers placed orders each month?",
        "output": "SELECT DATE_FORMAT(orders.OrderDate, '%Y-%m') AS Month, COUNT(DISTINCT orders.CustomerID) AS DistinctCustomers FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the average fulfillment time for orders delivered in January 2022.",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE ShippedDate BETWEEN '2022-01-01' AND '2022-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total freight cost for orders shipped last year?",
        "output": "SELECT SUM(orders.Freight) AS Total_Freight_Cost FROM orders WHERE orders.OrderDate >= CURDATE() - INTERVAL 1 YEAR;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which suppliers provide the highest number of unique products?",
        "output": "SELECT p.SupplierID, COUNT(DISTINCT p.ProductID) AS UniqueProducts FROM products p GROUP BY p.SupplierID ORDER BY UniqueProducts DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to orders last month?",
        "output": "SELECT AVG(Discount) AS AvgDiscount FROM [Order Details] WHERE OrderID IN (SELECT OrderID FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Calculate the customer retention rate for the year 2023.",
        "output": "SELECT (SELECT COUNT(DISTINCT Temp1.CustomerID) FROM (SELECT CustomerID FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY 1 HAVING COUNT(OrderID) > 1) AS Temp1) / (SELECT COUNT(DISTINCT Temp2.CustomerID) FROM (SELECT CustomerID FROM orders WHERE OrderDate < '2023-01-01' GROUP BY 1 HAVING COUNT(OrderID) > 1) AS Temp2) AS customer_retention_rate",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the on-time delivery rate for last month?",
        "output": "SELECT COUNT(OrderID) / (SELECT COUNT(OrderID) FROM orders WHERE OrderDate >= CURDATE() - INTERVAL 1 MONTH) AS OnTimeDeliveryRate FROM orders WHERE ShippedDate <= RequiredDate AND OrderDate >= CURDATE() - INTERVAL 1 MONTH;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What are the unit prices of products that have been ordered more than 1000 times?",
        "output": "SELECT p.ProductName, p.UnitPrice FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING SUM(od.Quantity) > 1000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Get the total revenue generated from each customer.",
        "output": "SELECT c.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the average discount applied per order?",
        "output": "SELECT AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details];",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee processed the most orders in January 2023?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS TotalOrders FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY EmployeeID ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per order for the last month?",
        "output": "SELECT AVG(Freight) FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the median order value for the month of October 2023?",
        "output": "SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TotalSales) AS MedianOrderValue FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE o.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY o.OrderID) Subquery;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which employee handled the highest number of orders?",
        "output": "SELECT EmployeeID, COUNT(OrderID) AS OrderCount FROM orders GROUP BY EmployeeID ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "How many orders were shipped last month?",
        "output": "SELECT COUNT(*) AS OrdersShippedLastMonth FROM orders o WHERE o.ShippedDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have been ordered with the highest quantities across all orders?",
        "output": "SELECT ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID GROUP BY ProductName ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the total number of orders placed in each country.",
        "output": "SELECT ShipCountry, COUNT(OrderID) AS TotalOrders FROM orders GROUP BY ShipCountry;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total value of the stock for each product (UnitPrice * UnitsInStock).",
        "output": "SELECT ProductName, (UnitPrice * UnitsInStock) AS StockValue FROM products;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "How does the performance of employees in different regions compare?",
        "output": "SELECT employees.Region, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS RegionalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have the highest and lowest lead times?",
        "output": "SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY LeadTime DESC LIMIT 1; SELECT suppliers.CompanyName, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LeadTime FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY suppliers.CompanyName ORDER BY LeadTime ASC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average sales amount per order for each employee?",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, AVG(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS AvgSalesPerOrder FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.FirstName, e.LastName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the top 3 cities where employees have the highest sales figures.",
        "output": "SELECT e.EmployeeID, e.City, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, e.City ORDER BY TotalSales DESC LIMIT 3;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average freight cost per order for each shipping method?",
        "output": "SELECT ShipVia, AVG(Freight) AS AvgFreightCost FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee who has shipped the most orders to the USA.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, COUNT(o.OrderID) AS TotalOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShipCountry = 'USA' GROUP BY e.EmployeeID, e.FirstName, e.LastName ORDER BY TotalOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average fulfillment time for orders each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AverageFulfillmentTime FROM orders GROUP BY Month;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which day of the week has the highest number of orders shipped?",
        "output": "SELECT DAYNAME(ShippedDate) AS ShippingDay, COUNT(OrderID) AS NumberOfOrders FROM orders GROUP BY ShippingDay ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the top 5 products with the highest unit price?",
        "output": "SELECT ProductName, UnitPrice FROM products ORDER BY UnitPrice DESC LIMIT 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products are low on stock and need reordering?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel AND Discontinued = 0;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the total sales and number of orders for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales, COUNT(OrderID) AS OrderCount FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY OrderMonth;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the highest discount applied to any order?",
        "output": "SELECT MAX(Discount) AS HighestDiscount FROM [Order Details];",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have never placed an order.",
        "output": "SELECT * FROM employees WHERE EmployeeID NOT IN (SELECT EmployeeID FROM orders);",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the contribution margin for each product.",
        "output": "SELECT products.ProductName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) - SUM(products.UnitPrice * [Order Details].Quantity) AS ContributionMargin FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which region has the highest number of orders in 2023?",
        "output": "SELECT territories.RegionID, COUNT(orders.OrderID) AS order_count FROM orders JOIN employeeTerritories ON orders.EmployeeID = employeeTerritories.EmployeeID JOIN territories ON employeeTerritories.TerritoryID = territories.TerritoryID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY territories.RegionID",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the most units in stock.",
        "output": "SELECT ProductName, UnitsInStock FROM products ORDER BY UnitsInStock DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the total freight cost for each shipping method?",
        "output": "SELECT ShipVia, SUM(Freight) as total_freight_cost FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Determine the number of products that have been ordered more than 100 times.",
        "output": "SELECT p.ProductID, p.ProductName FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName HAVING SUM(od.Quantity) > 100;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Calculate the Inventory Turnover Ratio for each product for the current month.",
        "output": "SELECT p.ProductName, SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnoverRatio FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON o.OrderID = od.OrderID WHERE DATE_FORMAT(o.OrderDate, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m') GROUP BY p.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Who are the top 5 customers based on sales in 2023?",
        "output": "SELECT customers.CustomerID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY customers.CustomerID ORDER BY total_sales DESC LIMIT 5",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which products have the highest number of units sold in July 2023?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity) AS units_sold FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-07-01' AND '2023-07-31' GROUP BY products.ProductID, products.ProductName ORDER BY units_sold DESC",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales generated by each employee in March 2023?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS employee_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most common shipping method used by customers?",
        "output": "SELECT ShipVia, COUNT(*) AS ShippingMethodCount FROM orders GROUP BY ShipVia ORDER BY ShippingMethodCount DESC;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many products are provided by each supplier?",
        "output": "SELECT SupplierID, COUNT(*) AS NumberOfProducts FROM products GROUP BY SupplierID;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the product with the highest total sales revenue.",
        "output": "SELECT od.ProductID, p.ProductName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID GROUP BY od.ProductID, p.ProductName ORDER BY TotalSales DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Calculate the customer retention rate for the last year.",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) * 100.0 / (SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE OrderDate < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) AS RetentionRate FROM orders WHERE OrderDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE();",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount applied to orders each quarter?",
        "output": "SELECT QUARTER(OrderDate) AS Quarter, AVG(Discount) AS AvgDiscount FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY QUARTER(OrderDate) ORDER BY Quarter",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have been ordered in quantities greater than 100 units?",
        "output": "SELECT p.ProductName, SUM(od.Quantity) AS TotalOrdered FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID WHERE od.Quantity > 100 GROUP BY p.ProductName ORDER BY TotalOrdered DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products are the best performers based on units sold?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalUnitsSold FROM [Order Details] GROUP BY ProductID ORDER BY TotalUnitsSold DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average shipping time for orders processed by each employee?",
        "output": "SELECT employees.EmployeeID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS AvgShippingTime FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID WHERE orders.ShippedDate IS NOT NULL GROUP BY employees.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which product category generated the highest revenue in Q2 of 2023?",
        "output": "SELECT categories.CategoryName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_revenue FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN categories ON products.CategoryID = categories.CategoryID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY categories.CategoryName ORDER BY total_revenue DESC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Get the breakdown of orders by shipping method.",
        "output": "SELECT ShipVia, COUNT(*) AS OrderCount FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales by each supplier in October 2023?",
        "output": "SELECT products.SupplierID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2023-10-01' AND '2023-10-31' GROUP BY products.SupplierID",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the inventory turnover ratio for February 2023?",
        "output": "SELECT SUM([Order Details].Quantity * [Order Details].UnitPrice) / AVG(products.UnitsInStock) AS inventory_turnover_ratio FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-02-01' AND '2023-02-28'",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "List the products with the highest and lowest unit prices.",
        "output": "SELECT * FROM (SELECT ProductName, UnitPrice, ROW_NUMBER() OVER (ORDER BY UnitPrice DESC) AS rnk1, ROW_NUMBER() OVER (ORDER BY UnitPrice ASC) AS rnk2 FROM products) WHERE rnk1 = 1 OR rnk2 = 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which regions have the highest number of employees?",
        "output": "SELECT Region, COUNT(EmployeeID) AS TotalEmployees FROM employees GROUP BY Region;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each country?",
        "output": "SELECT ShipCountry, SUM(Freight) AS TotalFreightCost FROM orders GROUP BY ShipCountry;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for the past six months?",
        "output": "SELECT AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders WHERE OrderDate BETWEEN DATE_ADD(CURDATE(), INTERVAL -6 MONTH) AND CURDATE()",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which supplier has the highest total product sales?",
        "output": "SELECT s.SupplierID, SUM(od.Quantity * od.UnitPrice) AS TotalSales FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY s.SupplierID ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were placed by customers located in the USA in 2022?",
        "output": "SELECT COUNT(orders.OrderID) AS total_orders FROM orders JOIN customers ON orders.CustomerID = customers.CustomerID WHERE customers.Country = 'USA' AND orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the city with the highest number of customers?",
        "output": "SELECT City, COUNT(CustomerID) AS CustomerCount FROM customers GROUP BY City ORDER BY CustomerCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Who are the top 5 suppliers based on the total sales revenue of their products?",
        "output": "SELECT suppliers.CompanyName, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalRevenue FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY suppliers.CompanyName ORDER BY TotalRevenue DESC LIMIT 5;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total quantity of each product that is on order?",
        "output": "SELECT ProductID, ProductName, UnitsOnOrder FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Find the product with the highest sales revenue.",
        "output": "SELECT p.ProductID, p.ProductName, SUM(od.Quantity * od.UnitPrice) AS TotalRevenue FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalRevenue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for January 2023?",
        "output": "SELECT SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) / COUNT(DISTINCT O.OrderID) AS AverageOrderValue FROM orders O JOIN [Order Details] OD ON O.OrderID = OD.OrderID WHERE DATE_FORMAT(O.OrderDate, '%Y-%m') = '2023-01';",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the longest time taken to fulfill an order?",
        "output": "SELECT MAX(DATEDIFF(ShippedDate, OrderDate)) AS LongestFulfillmentTime FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the total sales revenue for each customer?",
        "output": "SELECT o.CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY o.CustomerID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have a stock level below their reorder point?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average freight cost per order in 2022?",
        "output": "SELECT AVG(Freight) AS AvgFreightCost FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = '2022'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Determine the total freight cost for orders shipped to the USA.",
        "output": "SELECT SUM(Freight) AS TotalFreightCostUSA FROM orders WHERE ShipCountry = 'USA';",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average order quantity for each employee?",
        "output": "SELECT e.EmployeeID, AVG(od.Quantity) AS AvgOrderQuantity FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which regions have the highest sales?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS region_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID GROUP BY region.RegionDescription ORDER BY region_sales DESC",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the average price per unit for products in each category?",
        "output": "SELECT p.CategoryID, AVG(p.UnitPrice) AS AvgPricePerUnit FROM products p GROUP BY p.CategoryID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many orders were shipped via each shipping method?",
        "output": "SELECT ShipVia, COUNT(*) AS OrdersShipped FROM orders GROUP BY ShipVia;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping company has the best on-time delivery rate?",
        "output": "SELECT ShipVia, COUNT(CASE WHEN ShippedDate <= RequiredDate THEN 1 END) * 100.0 / COUNT(OrderID) AS OnTimeDeliveryRate FROM orders GROUP BY ShipVia ORDER BY OnTimeDeliveryRate DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are close to or below their reorder level?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock <= ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by employees in each region?",
        "output": "SELECT e.Region, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.Region;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which shipping method was used the most during April 2023?",
        "output": "SELECT ShipVia, COUNT(ShipVia) AS UsageCount FROM orders WHERE DATE_FORMAT(OrderDate, '%Y-%m') = '2023-04' GROUP BY ShipVia ORDER BY UsageCount DESC LIMIT 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost by region?",
        "output": "SELECT ShipRegion, AVG(Freight) AS AvgShippingCost FROM orders GROUP BY ShipRegion;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount given on orders in November 2023?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-11-01' AND '2023-11-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Determine the total sales revenue for the current month.",
        "output": "SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM [Order Details] od JOIN orders o ON od.OrderID = o.OrderID WHERE MONTH(o.OrderDate) = MONTH(CURRENT_DATE) AND YEAR(o.OrderDate) = YEAR(CURRENT_DATE);",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the most common shipping method?",
        "output": "SELECT ShipVia, COUNT(ShipVia) AS MethodCount FROM orders GROUP BY ShipVia ORDER BY MethodCount DESC LIMIT 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the average discount applied to orders per supplier?",
        "output": "SELECT suppliers.CompanyName, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID JOIN suppliers ON products.SupplierID = suppliers.SupplierID GROUP BY suppliers.CompanyName;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "How many customers placed orders in January 2023?",
        "output": "SELECT COUNT(DISTINCT CustomerID) AS CustomerCount FROM orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-01-31';",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "Determine the total number of orders processed by each employee in 2023.",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS total_orders FROM orders JOIN employees ON orders.EmployeeID = employees.EmployeeID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY employees.EmployeeID",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "How many orders did each employee handle?",
        "output": "SELECT employees.EmployeeID, COUNT(orders.OrderID) AS OrderCount FROM employees LEFT JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average freight cost per order for each employee?",
        "output": "SELECT e.EmployeeID, AVG(o.Freight) AS AvgFreightCost FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID GROUP BY e.EmployeeID",
        "difficulty": "easy"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Determine the Customer Retention Rate for the last month.",
        "output": "SELECT (COUNT(DISTINCT a.CustomerID) / COUNT(DISTINCT b.CustomerID)) * 100 as RetentionRate FROM orders a, orders b WHERE a.OrderDate BETWEEN CURDATE() - INTERVAL 1 MONTH AND CURDATE() AND b.OrderDate < CURDATE() - INTERVAL 1 MONTH;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average discount given per order in 2021?",
        "output": "SELECT AVG(Discount) AS AverageDiscount FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID WHERE YEAR(orders.OrderDate) = 2021;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which product was ordered the most in terms of quantity?",
        "output": "SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM [Order Details] GROUP BY ProductID ORDER BY TotalQuantity DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average discount given to customers in 2022?",
        "output": "SELECT AVG([Order Details].Discount) AS avg_discount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(orders.OrderDate) = 2022",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the orders that were not shipped within the required date.",
        "output": "SELECT o.OrderID, o.OrderDate, o.RequiredDate, o.ShippedDate FROM orders o WHERE o.ShippedDate > o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have not been ordered in the past year?",
        "output": "SELECT ProductName FROM products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM [Order Details] WHERE OrderDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",
        "difficulty": "advanced"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the total freight cost for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, SUM(Freight) AS total_freight FROM orders GROUP BY month ORDER BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which city has the most suppliers?",
        "output": "SELECT City, COUNT(SupplierID) AS SupplierCount FROM suppliers GROUP BY City ORDER BY SupplierCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Determine the average age of employees by department.",
        "output": "SELECT Title, AVG(YEAR(CURRENT_DATE) - YEAR(BirthDate)) AS AverageAge FROM employees GROUP BY Title;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered more than 100 times?",
        "output": "SELECT p.ProductName FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName HAVING COUNT(od.OrderID) > 100",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the employee with the most orders delayed beyond the required date.",
        "output": "SELECT e.EmployeeID, COUNT(o.OrderID) AS DelayedOrders FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID WHERE o.ShippedDate > o.RequiredDate GROUP BY e.EmployeeID ORDER BY DelayedOrders DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "cross_scenario",
        "input": "What are the total sales per region for the year 2023?",
        "output": "SELECT region.RegionDescription, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN customers ON orders.CustomerID = customers.CustomerID JOIN region ON customers.Region = region.RegionID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY region.RegionDescription",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "Find the average freight cost per order.",
        "output": "SELECT AVG(Freight) AS AverageFreight FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which product categories are performing best based on sales?",
        "output": "SELECT c.CategoryName, SUM(od.Quantity) AS TotalSales FROM categories c JOIN products p ON c.CategoryID = p.CategoryID JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY c.CategoryName ORDER BY TotalSales DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which products have the highest sales revenue this year?",
        "output": "SELECT od.ProductID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS ProductRevenue FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = YEAR(CURRENT_DATE) GROUP BY od.ProductID ORDER BY ProductRevenue DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "List the employees who have generated sales above the company average.",
        "output": "SELECT e.EmployeeID FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID HAVING SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) > (SELECT AVG(TotalSales) FROM (SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID) AS average_sales);",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales generated in March 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-03-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average shipping cost per month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(Freight) AS AverageShippingCost FROM orders GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of discontinued products are still in stock?",
        "output": "SELECT ProductName, UnitsInStock FROM products WHERE Discontinued = 1",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the total sales generated by each employee?",
        "output": "SELECT e.EmployeeID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped later than the required date?",
        "output": "SELECT COUNT(*) AS LateOrders FROM orders WHERE ShippedDate > RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of units in stock for each category?",
        "output": "SELECT categories.CategoryID, categories.CategoryName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryID, categories.CategoryName;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the average order fulfillment time in 2023?",
        "output": "SELECT AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_fulfillment_time FROM orders WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-12-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which city has the longest average order fulfillment time?",
        "output": "SELECT ShipCity, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_fulfillment_time FROM orders GROUP BY ShipCity ORDER BY avg_fulfillment_time DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What is the total freight cost for all orders?",
        "output": "SELECT SUM(Freight) AS TotalFreightCost FROM orders;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "List the suppliers located in Canada who have more than 10,000 units in stock.",
        "output": "SELECT suppliers.CompanyName, SUM(products.UnitsInStock) AS TotalUnitsInStock FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID WHERE suppliers.Country = 'Canada' GROUP BY suppliers.CompanyName HAVING TotalUnitsInStock > 10000;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the inventory turnover ratio for the past month?",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice) / AVG(p.UnitsInStock) AS InventoryTurnover FROM [Order Details] od JOIN products p ON od.ProductID = p.ProductID WHERE od.OrderID IN (SELECT OrderID FROM orders WHERE OrderDate BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW());",
        "difficulty": "advanced"
    },
    {
        "scenario": "Employee Performance",
        "input": "What are the top 5 products sold by each employee in terms of quantity?",
        "output": "WITH EmployeeProductRanks AS (SELECT e.EmployeeID, od.ProductID, SUM(od.Quantity) AS TotalQuantity, RANK() OVER (PARTITION BY e.EmployeeID ORDER BY SUM(od.Quantity) DESC) AS Rank FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, od.ProductID) SELECT EmployeeID, ProductID, TotalQuantity FROM EmployeeProductRanks WHERE Rank <= 5;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products contribute the most to total sales revenue?",
        "output": "SELECT products.ProductID, products.ProductName, SUM([Order Details].Quantity * [Order Details].UnitPrice) AS TotalRevenue FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductID, products.ProductName ORDER BY TotalRevenue DESC;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Calculate the total discount given on all orders.",
        "output": "SELECT SUM(od.Quantity * od.UnitPrice * od.Discount) AS TotalDiscount FROM [Order Details] od;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What percentage of orders were placed in the last quarter?",
        "output": "SELECT (COUNT(OrderID) FILTER (WHERE OrderDate BETWEEN '2022-10-01' AND '2022-12-31')) / (COUNT(OrderID)) * 100 AS PercentageOrders FROM orders",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "What is the total sales revenue generated in the first quarter of 2023?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS total_sales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE orders.OrderDate BETWEEN '2023-01-01' AND '2023-03-31'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the maximum number of units on order.",
        "output": "SELECT s.CompanyName, MAX(p.UnitsOnOrder) AS MaxUnitsOnOrder FROM products p INNER JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.CompanyName ORDER BY MaxUnitsOnOrder DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the total stock value of all products?",
        "output": "SELECT SUM(UnitPrice * UnitsInStock) AS TotalStockValue FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many distinct customers placed orders in Q2 2023?",
        "output": "SELECT COUNT(DISTINCT orders.CustomerID) FROM orders WHERE orders.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which suppliers have delivered products with the shortest and longest lead times?",
        "output": "SELECT products.SupplierID, MIN(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS ShortestLeadTime, MAX(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS LongestLeadTime FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID JOIN products ON products.ProductID = [Order Details].ProductID GROUP BY products.SupplierID;",
        "difficulty": "medium"
    },
    {
        "scenario": "cross_scenario",
        "input": "Which supplier has the shortest average lead time for delivery in 2022?",
        "output": "SELECT products.SupplierID, AVG(DATEDIFF(orders.ShippedDate, orders.OrderDate)) AS avg_lead_time FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID JOIN products ON [Order Details].ProductID = products.ProductID WHERE orders.OrderDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY products.SupplierID ORDER BY avg_lead_time ASC LIMIT 1",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Identify the top 5 products with the highest total sales.",
        "output": "SELECT [Order Details].ProductID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM [Order Details] JOIN orders ON orders.OrderID = [Order Details].OrderID GROUP BY [Order Details].ProductID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the percentage of orders delivered on or before the required date in January 2023?",
        "output": "SELECT COUNT(o.OrderID) * 1.0 / COUNT(c.OrderID) AS OnTimeDeliveryRate FROM orders o WHERE o.OrderDate BETWEEN '2023-01-01' AND '2023-01-31' AND o.ShippedDate <= o.RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "What is the total number of products provided by each supplier?",
        "output": "SELECT s.SupplierID, COUNT(p.ProductID) as TotalProducts FROM products p JOIN suppliers s ON p.SupplierID = s.SupplierID GROUP BY s.SupplierID",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Find the total discounts given across all orders in 2022.",
        "output": "SELECT SUM(UnitPrice * Quantity * Discount) AS TotalDiscount FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID WHERE YEAR(OrderDate) = 2022;",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the total sales generated by each employee?",
        "output": "SELECT employees.EmployeeID, SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) AS TotalSales FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID GROUP BY employees.EmployeeID;",
        "difficulty": "easy"
    },
    {
        "scenario": "cross_scenario",
        "input": "How many orders were shipped by each shipping company in 2023?",
        "output": "SELECT shippers.CompanyName, COUNT(orders.OrderID) AS total_orders FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE YEAR(orders.OrderDate) = 2023 GROUP BY shippers.CompanyName",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "What is the average salary of employees?",
        "output": "SELECT AVG(Salary) AS AvgSalary FROM employees;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products have been discontinued?",
        "output": "SELECT * FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products are currently discontinued?",
        "output": "SELECT ProductName FROM products WHERE Discontinued = 1;",
        "difficulty": "easy"
    },
    {
        "scenario": "Inventory Management",
        "input": "What is the monthly sales trend for each product?",
        "output": "SELECT ProductID, DATE_FORMAT(OrderDate, '%Y-%m') AS Month, SUM(Quantity * UnitPrice) AS MonthlySales FROM [Order Details] JOIN orders ON [Order Details].OrderID = orders.OrderID GROUP BY ProductID, Month ORDER BY ProductID, Month;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Product Analysis",
        "input": "How many units of each product are currently in stock?",
        "output": "SELECT ProductID, UnitsInStock FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which customer placed the most orders last year?",
        "output": "SELECT CustomerID, COUNT(OrderID) AS OrdersCount FROM orders WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY CustomerID ORDER BY OrdersCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the ratio of sales to salary for each employee.",
        "output": "SELECT e.EmployeeID, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) / e.Salary) AS SalesToSalaryRatio FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which products need to be reordered based on the 'ReorderLevel' field?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "How many orders were shipped within their required dates in 2020?",
        "output": "SELECT COUNT(OrderID) FROM orders WHERE YEAR(orders.OrderDate) = 2020 AND ShippedDate <= RequiredDate;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which orders shipped on time and which didn't?",
        "output": "SELECT OrderID, IF(ShippedDate <= RequiredDate, 'On Time', 'Late') AS DeliveryStatus FROM orders;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products have more units on order than units in stock?",
        "output": "SELECT ProductName FROM products WHERE UnitsOnOrder > UnitsInStock;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order fulfillment time for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS AvgFulfillmentTime FROM orders GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')",
        "difficulty": "easy"
    },
    {
        "scenario": "Employee Performance",
        "input": "Find the total sales generated by each employee within each month in 2023.",
        "output": "SELECT e.EmployeeID, e.FirstName, e.LastName, MONTH(o.OrderDate) AS OrderMonth, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM employees e JOIN orders o ON e.EmployeeID = o.EmployeeID JOIN [Order Details] od ON o.OrderID = od.OrderID WHERE YEAR(o.OrderDate) = 2023 GROUP BY e.EmployeeID, e.FirstName, e.LastName, OrderMonth;",
        "difficulty": "medium"
    },
    {
        "scenario": "Customer Analysis",
        "input": "List all customers who have placed an order with a freight cost greater than $100.",
        "output": "SELECT DISTINCT customers.* FROM customers JOIN orders ON customers.CustomerID = orders.CustomerID WHERE orders.Freight > 100;",
        "difficulty": "easy"
    },
    {
        "scenario": "Order Analysis",
        "input": "Which orders have a fulfillment time greater than 7 days?",
        "output": "SELECT OrderID FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) > 7;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the average time to deliver an order by month for the current year?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS month, AVG(DATEDIFF(ShippedDate, OrderDate)) AS avg_delivery_time FROM orders WHERE DATE_FORMAT(OrderDate, '%Y') = DATE_FORMAT(CURRENT_DATE, '%Y') GROUP BY month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Employee Performance",
        "input": "Which employees have sales greater than $10,000 in any month?",
        "output": "SELECT e.EmployeeID, MONTH(o.OrderDate) AS Month, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS MonthlySales FROM employees e INNER JOIN orders o ON e.EmployeeID = o.EmployeeID INNER JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY e.EmployeeID, Month HAVING MonthlySales > 10000",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Find the supplier with the longest average lead time.",
        "output": "SELECT s.CompanyName, AVG(DATEDIFF(o.ShippedDate, o.OrderDate)) AS AvgLeadTime FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName ORDER BY AvgLeadTime DESC LIMIT 1",
        "difficulty": "hard"
    },
    {
        "scenario": "Customer Analysis",
        "input": "What is the most expensive order placed by a customer?",
        "output": "SELECT c.CustomerID, o.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS OrderValue FROM customers c JOIN orders o ON c.CustomerID = o.CustomerID JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY c.CustomerID, o.OrderID ORDER BY OrderValue DESC LIMIT 1;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Inventory Management",
        "input": "Identify the top 5 products based on the quantity sold.",
        "output": "SELECT products.ProductName, SUM([Order Details].Quantity) AS TotalQuantity FROM products JOIN [Order Details] ON products.ProductID = [Order Details].ProductID GROUP BY products.ProductName ORDER BY TotalQuantity DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped within 3 days of the order date for each month?",
        "output": "SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, COUNT(*) AS NumberOfOrders FROM orders WHERE DATEDIFF(ShippedDate, OrderDate) <= 3 GROUP BY Month;",
        "difficulty": "medium"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have been ordered the most times?",
        "output": "SELECT p.ProductName, COUNT(od.OrderID) AS OrderCount FROM products p JOIN [Order Details] od ON p.ProductID = od.ProductID GROUP BY p.ProductName ORDER BY OrderCount DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "What are the names and prices of all products?",
        "output": "SELECT ProductName, UnitPrice FROM products;",
        "difficulty": "easy"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "Which customer has placed the most orders?",
        "output": "SELECT CustomerID, COUNT(*) AS NumberOfOrders FROM orders GROUP BY CustomerID ORDER BY NumberOfOrders DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "What is the maximum, minimum, and average freight cost for orders shipped within the last month?",
        "output": "SELECT MAX(Freight) AS MaxFreight, MIN(Freight) AS MinFreight, AVG(Freight) AS AvgFreight FROM orders WHERE OrderDate >= DATEADD(MONTH, -1, GETDATE())",
        "difficulty": "advanced"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which product categories have the most units in stock?",
        "output": "SELECT CategoryID, SUM(UnitsInStock) AS TotalUnitsInStock FROM products GROUP BY CategoryID ORDER BY TotalUnitsInStock DESC;",
        "difficulty": "medium"
    },
    {
        "scenario": "Inventory Management",
        "input": "Which products need to be reordered based on their current stock level and reorder points?",
        "output": "SELECT ProductName FROM products WHERE UnitsInStock < ReorderLevel;",
        "difficulty": "medium"
    },
    {
        "scenario": "Shipping Analysis",
        "input": "How many orders were shipped using each shipping method?",
        "output": "SELECT ShipVia, COUNT(OrderID) AS OrdersCount FROM orders GROUP BY ShipVia;",
        "difficulty": "easy"
    },
    {
        "scenario": "Product Analysis",
        "input": "Which products have a discount, and what is the average discount?",
        "output": "SELECT products.ProductName, AVG([Order Details].Discount) AS AverageDiscount FROM [Order Details] JOIN products ON [Order Details].ProductID = products.ProductID WHERE [Order Details].Discount > 0 GROUP BY products.ProductID;",
        "difficulty": "advanced"
    },
    {
        "scenario": "Order Analysis",
        "input": "Who are the top 5 customers in terms of total sales revenue?",
        "output": "SELECT CustomerID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalSales FROM orders o JOIN [Order Details] od ON o.OrderID = od.OrderID GROUP BY CustomerID ORDER BY TotalSales DESC LIMIT 5;",
        "difficulty": "medium"
    },
    {
        "scenario": "Order Analysis",
        "input": "What is the average order value for the month of July?",
        "output": "SELECT SUM([Order Details].UnitPrice * [Order Details].Quantity * (1 - [Order Details].Discount)) / COUNT(DISTINCT orders.OrderID) AS AverageOrderValue FROM orders JOIN [Order Details] ON orders.OrderID = [Order Details].OrderID WHERE MONTH(OrderDate) = 7 AND YEAR(OrderDate) = YEAR(CURDATE());",
        "difficulty": "easy"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "Which supplier provides the highest number of different products?",
        "output": "SELECT suppliers.CompanyName, COUNT(products.ProductID) AS ProductCount FROM suppliers JOIN products ON suppliers.SupplierID = products.SupplierID GROUP BY suppliers.CompanyName ORDER BY ProductCount DESC LIMIT 1;",
        "difficulty": "medium"
    },
    {
        "scenario": "Supplier Analysis",
        "input": "What are the total freight costs incurred for each supplier?",
        "output": "SELECT s.CompanyName, SUM(o.Freight) AS TotalFreight FROM suppliers s JOIN products p ON s.SupplierID = p.SupplierID JOIN [Order Details] od ON p.ProductID = od.ProductID JOIN orders o ON od.OrderID = o.OrderID GROUP BY s.CompanyName",
        "difficulty": "medium"
    }
]